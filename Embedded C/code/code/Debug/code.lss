
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00003f38  00003fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800230  00800230  00003ffc  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00003ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000073f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00007da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005714  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034e  00000000  00000000  0000d55c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001604  00000000  00000000  0000d8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  0000eeb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c95  00000000  00000000  0000f65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005325  00000000  00000000  000102f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00015616  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_5>
      18:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_26>
      6c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_27>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z7servo_3h+0x14>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e8 e3       	ldi	r30, 0x38	; 56
     17e:	ff e3       	ldi	r31, 0x3F	; 63
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 33       	cpi	r26, 0x30	; 48
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a0 e3       	ldi	r26, 0x30	; 48
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a3 35       	cpi	r26, 0x53	; 83
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <main>
     1a4:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_Z12lcd_set_4bitv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z12lcd_set_4bitv+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z12lcd_set_4bitv+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z12lcd_set_4bitv+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z12lcd_set_4bitv+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z12lcd_set_4bitv+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z12lcd_set_4bitv+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z12lcd_set_4bitv+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <_Z12lcd_set_4bitv+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <_Z12lcd_set_4bitv+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z12lcd_set_4bitv+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z12lcd_set_4bitv+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <_Z12lcd_set_4bitv+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <_Z14lcd_wr_commandh>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <_Z14lcd_wr_commandh+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <_Z14lcd_wr_commandh+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <_Z14lcd_wr_commandh+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_Z14lcd_wr_commandh+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <_Z8lcd_initv>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z12lcd_set_4bitv>
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <_Z8lcd_initv+0x8>
     288:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x01);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x0E);
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x80);
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
		
}
     2a8:	08 95       	ret

000002aa <_Z11lcd_wr_charc>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b0:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2b2:	28 2f       	mov	r18, r24
     2b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b6:	92 2b       	or	r25, r18
     2b8:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	ef ef       	ldi	r30, 0xFF	; 255
     2c2:	f7 e4       	ldi	r31, 0x47	; 71
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_Z11lcd_wr_charc+0x1a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z11lcd_wr_charc+0x20>
     2ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2cc:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d6:	82 95       	swap	r24
     2d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2da:	89 2b       	or	r24, r25
     2dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e2:	42 9a       	sbi	0x08, 2	; 8
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	97 e4       	ldi	r25, 0x47	; 71
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <_Z11lcd_wr_charc+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <_Z11lcd_wr_charc+0x44>
     2ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f0:	42 98       	cbi	0x08, 2	; 8
}
     2f2:	08 95       	ret

000002f4 <_Z8lcd_homev>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
}
     2fa:	08 95       	ret

000002fc <_Z10lcd_stringPc>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	while(*str != '\0')
     302:	88 81       	ld	r24, Y
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <_Z10lcd_stringPc+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     308:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30e:	89 91       	ld	r24, Y+
     310:	88 23       	and	r24, r24
     312:	d9 f7       	brne	.-10     	; 0x30a <_Z10lcd_stringPc+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_Z10lcd_cursorcc>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	79 f0       	breq	.+30     	; 0x33c <_Z10lcd_cursorcc+0x22>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	18 f4       	brcc	.+6      	; 0x328 <_Z10lcd_cursorcc+0xe>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	c9 f4       	brne	.+50     	; 0x358 <_Z10lcd_cursorcc+0x3e>
     326:	05 c0       	rjmp	.+10     	; 0x332 <_Z10lcd_cursorcc+0x18>
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	69 f0       	breq	.+26     	; 0x346 <_Z10lcd_cursorcc+0x2c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	a1 f4       	brne	.+40     	; 0x358 <_Z10lcd_cursorcc+0x3e>
     330:	0f c0       	rjmp	.+30     	; 0x350 <_Z10lcd_cursorcc+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     332:	86 2f       	mov	r24, r22
     334:	81 58       	subi	r24, 0x81	; 129
     336:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     33a:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     33c:	86 2f       	mov	r24, r22
     33e:	81 54       	subi	r24, 0x41	; 65
     340:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     344:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     346:	86 2f       	mov	r24, r22
     348:	8d 56       	subi	r24, 0x6D	; 109
     34a:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     34e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     350:	86 2f       	mov	r24, r22
     352:	8d 52       	subi	r24, 0x2D	; 45
     354:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     358:	08 95       	ret

0000035a <_Z9lcd_printccji>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8a 01       	movw	r16, r20
     364:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <_Z9lcd_printccji+0x14>
     36a:	66 23       	and	r22, r22
     36c:	19 f4       	brne	.+6      	; 0x374 <_Z9lcd_printccji+0x1a>
	{
		lcd_home();
     36e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z8lcd_homev>
     372:	02 c0       	rjmp	.+4      	; 0x378 <_Z9lcd_printccji+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     374:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z10lcd_cursorcc>
	}
	if(digits==5 || flag==1)
     378:	c5 30       	cpi	r28, 0x05	; 5
     37a:	d1 05       	cpc	r29, r1
     37c:	71 f4       	brne	.+28     	; 0x39a <_Z9lcd_printccji+0x40>
	{
		million=value/10000+48;
     37e:	c8 01       	movw	r24, r16
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	77 e2       	ldi	r23, 0x27	; 39
     384:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 48 02 	sts	0x0248, r25
     390:	80 93 47 02 	sts	0x0247, r24
		lcd_wr_char(million);
     394:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <_Z9lcd_printccji+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     39a:	c4 30       	cpi	r28, 0x04	; 4
     39c:	d1 05       	cpc	r29, r1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <_Z9lcd_printccji+0x74>
	{
		temp = value/1000;
     3a0:	c8 01       	movw	r24, r16
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     3aa:	cb 01       	movw	r24, r22
     3ac:	70 93 52 02 	sts	0x0252, r23
     3b0:	60 93 51 02 	sts	0x0251, r22
		thousand = temp%10 + 48;
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     3bc:	c0 96       	adiw	r24, 0x30	; 48
     3be:	90 93 4a 02 	sts	0x024A, r25
     3c2:	80 93 49 02 	sts	0x0249, r24
		lcd_wr_char(thousand);
     3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <_Z9lcd_printccji+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3d0:	c3 30       	cpi	r28, 0x03	; 3
     3d2:	d1 05       	cpc	r29, r1
     3d4:	11 f0       	breq	.+4      	; 0x3da <_Z9lcd_printccji+0x80>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	b1 f4       	brne	.+44     	; 0x406 <_Z9lcd_printccji+0xac>
	{
		temp = value/100;
     3da:	c8 01       	movw	r24, r16
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     3e4:	cb 01       	movw	r24, r22
     3e6:	70 93 52 02 	sts	0x0252, r23
     3ea:	60 93 51 02 	sts	0x0251, r22
		hundred = temp%10 + 48;
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     3f6:	c0 96       	adiw	r24, 0x30	; 48
     3f8:	90 93 4c 02 	sts	0x024C, r25
     3fc:	80 93 4b 02 	sts	0x024B, r24
		lcd_wr_char(hundred);
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     406:	c2 30       	cpi	r28, 0x02	; 2
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <_Z9lcd_printccji+0xb6>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <_Z9lcd_printccji+0xe2>
	{
		temp = value/10;
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b9 01       	movw	r22, r18
     418:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 52 02 	sts	0x0252, r23
     422:	60 93 51 02 	sts	0x0251, r22
		tens = temp%10 + 48;
     426:	b9 01       	movw	r22, r18
     428:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 4e 02 	sts	0x024E, r25
     432:	80 93 4d 02 	sts	0x024D, r24
		lcd_wr_char(tens);
     436:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <_Z9lcd_printccji+0xec>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <_Z9lcd_printccji+0x104>
	{
		unit = value%10 + 48;
     446:	c8 01       	movw	r24, r16
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
     450:	c0 96       	adiw	r24, 0x30	; 48
     452:	90 93 50 02 	sts	0x0250, r25
     456:	80 93 4f 02 	sts	0x024F, r24
		lcd_wr_char(unit);
     45a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
	}
	if(digits>5)
     45e:	c6 30       	cpi	r28, 0x06	; 6
     460:	d1 05       	cpc	r29, r1
     462:	1c f0       	brlt	.+6      	; 0x46a <_Z9lcd_printccji+0x110>
	{
		lcd_wr_char('E');
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
	}
	
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <_Z17buzzer_pin_configv>:
																										   // 1,2,3,4 represent blue,yellow,red,green block
	unsigned char data;
	
	void buzzer_pin_config (void)
	{
	 DDRC = DDRC | 0x08;    //Setting PORTC 3 as output
     474:	3b 9a       	sbi	0x07, 3	; 7
	 PORTC = PORTC & 0xF7;    //Setting PORTC 3 logic low to turnoff buzzer
     476:	43 98       	cbi	0x08, 3	; 8
	}
     478:	08 95       	ret

0000047a <_Z17servo1_pin_configv>:
	
	//Configure PORTB 5 pin for servo motor 1 operation
	void servo1_pin_config (void)
	{
	 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     47a:	25 9a       	sbi	0x04, 5	; 4
	 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     47c:	2d 9a       	sbi	0x05, 5	; 5
	}
     47e:	08 95       	ret

00000480 <_Z17servo2_pin_configv>:
	
	//Configure PORTB 6 pin for servo motor 2 operation
	void servo2_pin_config (void)
	{
	 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     480:	26 9a       	sbi	0x04, 6	; 4
	 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     482:	2e 9a       	sbi	0x05, 6	; 5
	}
     484:	08 95       	ret

00000486 <_Z17servo3_pin_configv>:
	
	
	//Configure PORTB 7 pin for servo motor 3 operation
	void servo3_pin_config (void)
	{
	 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     486:	27 9a       	sbi	0x04, 7	; 4
	 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     488:	2f 9a       	sbi	0x05, 7	; 5
	}
     48a:	08 95       	ret

0000048c <_Z23left_encoder_pin_configv>:
	unsigned char Center_white_line = 0;
	unsigned char Right_white_line = 0;
	
	void left_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     48c:	6c 98       	cbi	0x0d, 4	; 13
		PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     48e:	74 9a       	sbi	0x0e, 4	; 14
	}
     490:	08 95       	ret

00000492 <_Z24right_encoder_pin_configv>:
	
	//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
	void right_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     492:	6d 98       	cbi	0x0d, 5	; 13
		PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     494:	75 9a       	sbi	0x0e, 5	; 14
	}
     496:	08 95       	ret

00000498 <_Z15lcd_port_configv>:
	
	//Function to configure LCD port
	void lcd_port_config (void)
	{
	 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     498:	87 b1       	in	r24, 0x07	; 7
     49a:	87 6f       	ori	r24, 0xF7	; 247
     49c:	87 b9       	out	0x07, r24	; 7
	 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     49e:	88 b1       	in	r24, 0x08	; 8
     4a0:	80 78       	andi	r24, 0x80	; 128
     4a2:	88 b9       	out	0x08, r24	; 8
	}
     4a4:	08 95       	ret

000004a6 <_Z14adc_pin_configv>:
	
	//ADC pin configuration
	void adc_pin_config (void)
	{
	 DDRF = 0x00;
     4a6:	10 ba       	out	0x10, r1	; 16
	 PORTF = 0x00;
     4a8:	11 ba       	out	0x11, r1	; 17
	 DDRK = 0x00;
     4aa:	10 92 07 01 	sts	0x0107, r1
	 PORTK = 0x00;
     4ae:	10 92 08 01 	sts	0x0108, r1
	}
     4b2:	08 95       	ret

000004b4 <_Z17motion_pin_configv>:
	
	//Function to configure ports to enable robot's motion
	void motion_pin_config (void)
	{
	 DDRA = DDRA | 0x0F;
     4b4:	81 b1       	in	r24, 0x01	; 1
     4b6:	8f 60       	ori	r24, 0x0F	; 15
     4b8:	81 b9       	out	0x01, r24	; 1
	 PORTA = PORTA & 0xF0;
     4ba:	82 b1       	in	r24, 0x02	; 2
     4bc:	80 7f       	andi	r24, 0xF0	; 240
     4be:	82 b9       	out	0x02, r24	; 2
	 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     4c0:	ea e0       	ldi	r30, 0x0A	; 10
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	80 81       	ld	r24, Z
     4c6:	88 61       	ori	r24, 0x18	; 24
     4c8:	80 83       	st	Z, r24
	 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     4ca:	eb e0       	ldi	r30, 0x0B	; 11
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	80 81       	ld	r24, Z
     4d0:	88 61       	ori	r24, 0x18	; 24
     4d2:	80 83       	st	Z, r24
	}
     4d4:	08 95       	ret

000004d6 <_Z10uart0_initv>:

	void uart0_init(void)
	{
		UCSR0B = 0x00; //disable while setting baud rate
     4d6:	e1 ec       	ldi	r30, 0xC1	; 193
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	10 82       	st	Z, r1
		UCSR0A = 0x20;
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	80 93 c0 00 	sts	0x00C0, r24
		UCSR0C = 0x06;
     4e2:	86 e0       	ldi	r24, 0x06	; 6
     4e4:	80 93 c2 00 	sts	0x00C2, r24
		UBRR0L = 0x5F; //set baud rate lo
     4e8:	8f e5       	ldi	r24, 0x5F	; 95
     4ea:	80 93 c4 00 	sts	0x00C4, r24
		UBRR0H = 0x00; //set baud rate hi
     4ee:	10 92 c5 00 	sts	0x00C5, r1
		UCSR0B = 0x68;
     4f2:	88 e6       	ldi	r24, 0x68	; 104
     4f4:	80 83       	st	Z, r24
	}
     4f6:	08 95       	ret

000004f8 <__vector_26>:

	SIGNAL(SIG_USART0_DATA) 		// ISR for transmit complete interrupt
	{
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
		
		
		UDR0 = data;
     50a:	80 91 3a 02 	lds	r24, 0x023A
     50e:	80 93 c6 00 	sts	0x00C6, r24
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	9f e3       	ldi	r25, 0x3F	; 63
     516:	a2 e0       	ldi	r26, 0x02	; 2
     518:	81 50       	subi	r24, 0x01	; 1
     51a:	90 40       	sbci	r25, 0x00	; 0
     51c:	a0 40       	sbci	r26, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <__vector_26+0x20>
     520:	00 c0       	rjmp	.+0      	; 0x522 <__vector_26+0x2a>
     522:	00 00       	nop
		_delay_ms(50);

		

	}
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <__vector_27>:
	SIGNAL(SIG_USART0_TRANS)    
	{
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
		data = 0x00 ;
     540:	10 92 3a 02 	sts	0x023A, r1
	};
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <_Z9port_initv>:

	
	//Function to Initialize PORTS
	void port_init()
	{
		buzzer_pin_config();
     54e:	0e 94 3a 02 	call	0x474	; 0x474 <_Z17buzzer_pin_configv>
		servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     552:	0e 94 3d 02 	call	0x47a	; 0x47a <_Z17servo1_pin_configv>
	 	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     556:	0e 94 40 02 	call	0x480	; 0x480 <_Z17servo2_pin_configv>
	 	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
     55a:	0e 94 43 02 	call	0x486	; 0x486 <_Z17servo3_pin_configv>
		
	  	lcd_port_config();
     55e:	0e 94 4c 02 	call	0x498	; 0x498 <_Z15lcd_port_configv>
		adc_pin_config();
     562:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z14adc_pin_configv>
		motion_pin_config();
     566:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z17motion_pin_configv>
		left_encoder_pin_config(); //left encoder pin config
     56a:	0e 94 46 02 	call	0x48c	; 0x48c <_Z23left_encoder_pin_configv>
		right_encoder_pin_config(); //right encoder pin config
     56e:	0e 94 49 02 	call	0x492	; 0x492 <_Z24right_encoder_pin_configv>
	}
     572:	08 95       	ret

00000574 <_Z36left_position_encoder_interrupt_initv>:
	
	
	void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
	{
		cli(); //Clears the global interrupt
     574:	f8 94       	cli
		EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     576:	ea e6       	ldi	r30, 0x6A	; 106
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	82 60       	ori	r24, 0x02	; 2
     57e:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     580:	ec 9a       	sbi	0x1d, 4	; 29
		sei();   // Enables the global interrupt
     582:	78 94       	sei
	}
     584:	08 95       	ret

00000586 <_Z37right_position_encoder_interrupt_initv>:
	
	void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
	{
		cli(); //Clears the global interrupt
     586:	f8 94       	cli
		EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     588:	ea e6       	ldi	r30, 0x6A	; 106
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	88 60       	ori	r24, 0x08	; 8
     590:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     592:	ed 9a       	sbi	0x1d, 5	; 29
		sei();   // Enables the global interrupt
     594:	78 94       	sei
	}
     596:	08 95       	ret

00000598 <__vector_6>:
	
	ISR(INT5_vect)
	{
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
		ShaftCountRight++;  //increment right shaft position count
     5aa:	80 91 3f 02 	lds	r24, 0x023F
     5ae:	90 91 40 02 	lds	r25, 0x0240
     5b2:	a0 91 41 02 	lds	r26, 0x0241
     5b6:	b0 91 42 02 	lds	r27, 0x0242
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	a1 1d       	adc	r26, r1
     5be:	b1 1d       	adc	r27, r1
     5c0:	80 93 3f 02 	sts	0x023F, r24
     5c4:	90 93 40 02 	sts	0x0240, r25
     5c8:	a0 93 41 02 	sts	0x0241, r26
     5cc:	b0 93 42 02 	sts	0x0242, r27
	}
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_5>:
	
	//ISR for left position encoder
	ISR(INT4_vect)
	{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
     5f0:	af 93       	push	r26
     5f2:	bf 93       	push	r27
		ShaftCountLeft++;  //increment left shaft position count
     5f4:	80 91 43 02 	lds	r24, 0x0243
     5f8:	90 91 44 02 	lds	r25, 0x0244
     5fc:	a0 91 45 02 	lds	r26, 0x0245
     600:	b0 91 46 02 	lds	r27, 0x0246
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	a1 1d       	adc	r26, r1
     608:	b1 1d       	adc	r27, r1
     60a:	80 93 43 02 	sts	0x0243, r24
     60e:	90 93 44 02 	sts	0x0244, r25
     612:	a0 93 45 02 	sts	0x0245, r26
     616:	b0 93 46 02 	sts	0x0246, r27
	}
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	0f 90       	pop	r0
     628:	1f 90       	pop	r1
     62a:	18 95       	reti

0000062c <_Z11timer5_initv>:
	// Pre-scale:256
	// PWM 8bit fast, TOP=0x00FF
	// Timer Frequency:225.000Hz
	void timer5_init()
	{
		TCCR5B = 0x00;	//Stop
     62c:	e1 e2       	ldi	r30, 0x21	; 33
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	10 82       	st	Z, r1
		TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	80 93 25 01 	sts	0x0125, r24
		TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	90 93 24 01 	sts	0x0124, r25
		OCR5AH = 0x00;	//Output compare register high value for Left Motor
     63e:	10 92 29 01 	sts	0x0129, r1
		OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     642:	80 93 28 01 	sts	0x0128, r24
		OCR5BH = 0x00;	//Output compare register high value for Right Motor
     646:	10 92 2b 01 	sts	0x012B, r1
		OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     64a:	80 93 2a 01 	sts	0x012A, r24
		OCR5CH = 0x00;	//Output compare register high value for Motor C1
     64e:	10 92 2d 01 	sts	0x012D, r1
		OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     652:	80 93 2c 01 	sts	0x012C, r24
		TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     656:	89 ea       	ldi	r24, 0xA9	; 169
     658:	80 93 20 01 	sts	0x0120, r24
	 					  For Overriding normal port functionality to OCRnA outputs.
					  	  {WGM51=0, WGM80=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

		TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     65c:	8b e0       	ldi	r24, 0x0B	; 11
     65e:	80 83       	st	Z, r24
	}
     660:	08 95       	ret

00000662 <_Z11timer1_initv>:
	void timer1_init(void)
	{
	 TCCR1B = 0x00; //stop
     662:	e1 e8       	ldi	r30, 0x81	; 129
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	10 82       	st	Z, r1
	 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     668:	8c ef       	ldi	r24, 0xFC	; 252
     66a:	80 93 85 00 	sts	0x0085, r24
	 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 84 00 	sts	0x0084, r24
	 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	90 93 89 00 	sts	0x0089, r25
	 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	80 93 88 00 	sts	0x0088, r24
	 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     680:	90 93 8b 00 	sts	0x008B, r25
	 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     684:	80 93 8a 00 	sts	0x008A, r24
	 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     688:	90 93 8d 00 	sts	0x008D, r25
	 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     68c:	80 93 8c 00 	sts	0x008C, r24
	 ICR1H  = 0x03;
     690:	90 93 87 00 	sts	0x0087, r25
	 ICR1L  = 0xFF;
     694:	80 93 86 00 	sts	0x0086, r24
	 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     698:	8b ea       	ldi	r24, 0xAB	; 171
     69a:	80 93 80 00 	sts	0x0080, r24
	 					For Overriding normal port functionality to OCRnA outputs.
					  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	 TCCR1C = 0x00;
     69e:	10 92 82 00 	sts	0x0082, r1
	 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     6a2:	8c e0       	ldi	r24, 0x0C	; 12
     6a4:	80 83       	st	Z, r24
	}
     6a6:	08 95       	ret

000006a8 <_Z8adc_initv>:
	
	void adc_init()
	{
		ADCSRA = 0x00;
     6a8:	ea e7       	ldi	r30, 0x7A	; 122
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	10 82       	st	Z, r1
		ADCSRB = 0x00;		//MUX5 = 0
     6ae:	10 92 7b 00 	sts	0x007B, r1
		ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	80 93 7c 00 	sts	0x007C, r24
		ACSR = 0x80;
     6b8:	80 e8       	ldi	r24, 0x80	; 128
     6ba:	80 bf       	out	0x30, r24	; 48
		ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     6bc:	86 e8       	ldi	r24, 0x86	; 134
     6be:	80 83       	st	Z, r24
	}
     6c0:	08 95       	ret

000006c2 <_Z14ADC_Conversionh>:

	//Function For ADC Conversion
	unsigned char ADC_Conversion(unsigned char Ch)
	{
		unsigned char a;
		if(Ch>7)
     6c2:	88 30       	cpi	r24, 0x08	; 8
     6c4:	18 f0       	brcs	.+6      	; 0x6cc <_Z14ADC_Conversionh+0xa>
		{
			ADCSRB = 0x08;
     6c6:	98 e0       	ldi	r25, 0x08	; 8
     6c8:	90 93 7b 00 	sts	0x007B, r25
		}
		Ch = Ch & 0x07;
     6cc:	87 70       	andi	r24, 0x07	; 7
		ADMUX= 0x20| Ch;
     6ce:	80 62       	ori	r24, 0x20	; 32
     6d0:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     6d4:	ea e7       	ldi	r30, 0x7A	; 122
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	80 64       	ori	r24, 0x40	; 64
     6dc:	80 83       	st	Z, r24
		while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     6de:	80 81       	ld	r24, Z
     6e0:	84 ff       	sbrs	r24, 4
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <_Z14ADC_Conversionh+0x1c>
		a=ADCH;
     6e4:	80 91 79 00 	lds	r24, 0x0079
		ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     6e8:	ea e7       	ldi	r30, 0x7A	; 122
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	90 81       	ld	r25, Z
     6ee:	90 61       	ori	r25, 0x10	; 16
     6f0:	90 83       	st	Z, r25
		ADCSRB = 0x00;
     6f2:	10 92 7b 00 	sts	0x007B, r1
		return a;
	}
     6f6:	08 95       	ret

000006f8 <_Z12print_sensorcch>:

	//Function To Print Sensor Values At Desired Row And Column Location on LCD
	void print_sensor(char row, char coloumn,unsigned char channel)
	{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	d8 2f       	mov	r29, r24
     6fe:	c6 2f       	mov	r28, r22
     700:	84 2f       	mov	r24, r20

		ADC_Value = ADC_Conversion(channel);
     702:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     706:	48 2f       	mov	r20, r24
     708:	80 93 39 02 	sts	0x0239, r24
		lcd_print(row, coloumn, ADC_Value, 3);
     70c:	8d 2f       	mov	r24, r29
     70e:	6c 2f       	mov	r22, r28
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	23 e0       	ldi	r18, 0x03	; 3
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
	}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <_Z23Sharp_GP2D12_estimationh>:
	
	// This Function calculates the actual distance in millimeters(mm) from the input
	// analog value of Sharp Sensor.
	unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
	{
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
		float distance;
		unsigned int distanceInt;
		distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     724:	68 2f       	mov	r22, r24
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__floatunsisf>
     730:	2f ee       	ldi	r18, 0xEF	; 239
     732:	39 ec       	ldi	r19, 0xC9	; 201
     734:	43 e9       	ldi	r20, 0x93	; 147
     736:	5f e3       	ldi	r21, 0x3F	; 63
     738:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <pow>
     73c:	b6 2f       	mov	r27, r22
     73e:	a7 2f       	mov	r26, r23
     740:	38 2f       	mov	r19, r24
     742:	29 2f       	mov	r18, r25
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e8       	ldi	r24, 0x80	; 128
     74a:	9f e3       	ldi	r25, 0x3F	; 63
     74c:	42 2f       	mov	r20, r18
     74e:	0b 2f       	mov	r16, r27
     750:	1a 2f       	mov	r17, r26
     752:	23 2f       	mov	r18, r19
     754:	34 2f       	mov	r19, r20
     756:	a9 01       	movw	r20, r18
     758:	98 01       	movw	r18, r16
     75a:	0e 94 97 1c 	call	0x392e	; 0x392e <__divsf3>
     75e:	2a e9       	ldi	r18, 0x9A	; 154
     760:	39 ef       	ldi	r19, 0xF9	; 249
     762:	4e e2       	ldi	r20, 0x2E	; 46
     764:	55 e4       	ldi	r21, 0x45	; 69
     766:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__mulsf3>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e2       	ldi	r20, 0x20	; 32
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__mulsf3>
     776:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <__fixsfsi>
     77a:	88 27       	eor	r24, r24
     77c:	77 fd       	sbrc	r23, 7
     77e:	80 95       	com	r24
     780:	98 2f       	mov	r25, r24
     782:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__floatsisf>
		distanceInt = (int)distance;
     786:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <__fixsfsi>
		if(distanceInt>800)
		{
			distanceInt=800;
		}
		return distanceInt;
     78a:	86 2f       	mov	r24, r22
     78c:	97 2f       	mov	r25, r23
     78e:	23 e0       	ldi	r18, 0x03	; 3
     790:	81 32       	cpi	r24, 0x21	; 33
     792:	92 07       	cpc	r25, r18
     794:	10 f0       	brcs	.+4      	; 0x79a <_Z23Sharp_GP2D12_estimationh+0x7a>
     796:	80 e2       	ldi	r24, 0x20	; 32
     798:	93 e0       	ldi	r25, 0x03	; 3
	}
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <_Z8velocityhh>:
	
	//Function for velocity control
	void velocity (unsigned char left_motor, unsigned char right_motor)
	{
		OCR5AL = (unsigned char)left_motor;
     7a0:	80 93 28 01 	sts	0x0128, r24
		OCR5BL = (unsigned char)right_motor;
     7a4:	60 93 2a 01 	sts	0x012A, r22
	}
     7a8:	08 95       	ret

000007aa <_Z10motion_seth>:
	void motion_set (unsigned char Direction)
	{
	 unsigned char PortARestore = 0;

	 Direction &= 0x0F; 		// removing upper nibbel for the protection
	 PortARestore = PORTA; 		// reading the PORTA original status
     7aa:	92 b1       	in	r25, 0x02	; 2
	 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7ac:	90 7f       	andi	r25, 0xF0	; 240
	//Function used for setting motor's direction
	void motion_set (unsigned char Direction)
	{
	 unsigned char PortARestore = 0;

	 Direction &= 0x0F; 		// removing upper nibbel for the protection
     7ae:	8f 70       	andi	r24, 0x0F	; 15
	 PortARestore = PORTA; 		// reading the PORTA original status
	 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7b0:	98 2b       	or	r25, r24
	 PORTA = PortARestore; 		// executing the command
     7b2:	92 b9       	out	0x02, r25	; 2
	}
     7b4:	08 95       	ret

000007b6 <_Z7forwardv>:
	}


	void forward (void)
	{
	  motion_set (0x06);
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     7bc:	08 95       	ret

000007be <_Z4backv>:

	void back (void) //both wheels backward
	{
	  motion_set(0x09);
     7be:	89 e0       	ldi	r24, 0x09	; 9
     7c0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     7c4:	08 95       	ret

000007c6 <_Z4stopv>:

	void stop (void)
	{
	  motion_set (0x00);
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     7cc:	08 95       	ret

000007ce <_Z12angle_rotatej>:
	 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	 PORTA = PortARestore; 		// executing the command
	}

	void angle_rotate(unsigned int Degrees)
	{
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;

		ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     7d4:	bc 01       	movw	r22, r24
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__floatunsisf>
     7de:	28 e4       	ldi	r18, 0x48	; 72
     7e0:	31 ee       	ldi	r19, 0xE1	; 225
     7e2:	42 e8       	ldi	r20, 0x82	; 130
     7e4:	50 e4       	ldi	r21, 0x40	; 64
     7e6:	0e 94 97 1c 	call	0x392e	; 0x392e <__divsf3>
		ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     7ea:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__fixunssfsi>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	a0 e0       	ldi	r26, 0x00	; 0
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
		ShaftCountRight = 0;
     7f6:	10 92 3f 02 	sts	0x023F, r1
     7fa:	10 92 40 02 	sts	0x0240, r1
     7fe:	10 92 41 02 	sts	0x0241, r1
     802:	10 92 42 02 	sts	0x0242, r1
		ShaftCountLeft = 0;
     806:	10 92 43 02 	sts	0x0243, r1
     80a:	10 92 44 02 	sts	0x0244, r1
     80e:	10 92 45 02 	sts	0x0245, r1
     812:	10 92 46 02 	sts	0x0246, r1

		while (1)
		{
			if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	c0 e0       	ldi	r28, 0x00	; 0
     81a:	40 91 3f 02 	lds	r20, 0x023F
     81e:	50 91 40 02 	lds	r21, 0x0240
     822:	60 91 41 02 	lds	r22, 0x0241
     826:	70 91 42 02 	lds	r23, 0x0242
     82a:	00 91 43 02 	lds	r16, 0x0243
     82e:	10 91 44 02 	lds	r17, 0x0244
     832:	20 91 45 02 	lds	r18, 0x0245
     836:	30 91 46 02 	lds	r19, 0x0246
     83a:	ef 2f       	mov	r30, r31
     83c:	48 17       	cp	r20, r24
     83e:	59 07       	cpc	r21, r25
     840:	6a 07       	cpc	r22, r26
     842:	7b 07       	cpc	r23, r27
     844:	08 f4       	brcc	.+2      	; 0x848 <_Z12angle_rotatej+0x7a>
     846:	ec 2f       	mov	r30, r28
     848:	ee 23       	and	r30, r30
     84a:	49 f4       	brne	.+18     	; 0x85e <_Z12angle_rotatej+0x90>
     84c:	4f 2f       	mov	r20, r31
     84e:	08 17       	cp	r16, r24
     850:	19 07       	cpc	r17, r25
     852:	2a 07       	cpc	r18, r26
     854:	3b 07       	cpc	r19, r27
     856:	08 f4       	brcc	.+2      	; 0x85a <_Z12angle_rotatej+0x8c>
     858:	4c 2f       	mov	r20, r28
     85a:	44 23       	and	r20, r20
     85c:	f1 f2       	breq	.-68     	; 0x81a <_Z12angle_rotatej+0x4c>
			break;
		}
		stop(); //Stop robot
     85e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
	}
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	08 95       	ret

0000086a <_Z4leftv>:
	  motion_set (0x00);
	}

	void left (void) //Left wheel backward, Right wheel forward
	{
	  motion_set(0x05);
     86a:	85 e0       	ldi	r24, 0x05	; 5
     86c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     870:	08 95       	ret

00000872 <_Z12left_degreesj>:
		stop(); //Stop robot
	}
	
	// uses angle_rotate() to turn specific angles to left
	void left_degrees(unsigned int Degrees)
	{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		left(); //Turn left
     878:	0e 94 35 04 	call	0x86a	; 0x86a <_Z4leftv>
		//velocity(160,160);
		angle_rotate(Degrees);
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z12angle_rotatej>
	}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <_Z5rightv>:
	  motion_set(0x05);
	}

	void right (void) //Left wheel forward, Right wheel backward
	{
	  motion_set(0x0A);
     888:	8a e0       	ldi	r24, 0x0A	; 10
     88a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     88e:	08 95       	ret

00000890 <_Z13right_degreesj>:
	}


	// uses angle_rotate() to turn specific angles to left
	void right_degrees(unsigned int Degrees)
	{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		right(); //Turn right
     896:	0e 94 44 04 	call	0x888	; 0x888 <_Z5rightv>
		angle_rotate(Degrees);
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z12angle_rotatej>
	}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <_Z9soft_leftv>:
	  motion_set(0x0A);
	}

	void soft_left (void) //Left wheel stationary, Right wheel forward
	{
	 motion_set(0x04);
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     8ac:	08 95       	ret

000008ae <_Z10soft_rightv>:

	void soft_right (void) //Left wheel forward, Right wheel is stationary
	{
	 motion_set(0x02);
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     8b4:	08 95       	ret

000008b6 <_Z11soft_left_2v>:

	void soft_left_2 (void) //Left wheel backward, right wheel stationary
	{
	 motion_set(0x01);
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     8bc:	08 95       	ret

000008be <_Z12soft_right_2v>:

	void soft_right_2 (void) //Left wheel stationary, Right wheel backward
	{
	 motion_set(0x08);
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z10motion_seth>
	}
     8c4:	08 95       	ret

000008c6 <_Z12init_devicesv>:
	
	void init_devices (void)
	{
	 	cli(); //Clears the global interrupts
     8c6:	f8 94       	cli
		uart0_init();
     8c8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10uart0_initv>
		port_init();
     8cc:	0e 94 a7 02 	call	0x54e	; 0x54e <_Z9port_initv>
		adc_init();
     8d0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_Z8adc_initv>
		timer5_init();
     8d4:	0e 94 16 03 	call	0x62c	; 0x62c <_Z11timer5_initv>
		left_position_encoder_interrupt_init();
     8d8:	0e 94 ba 02 	call	0x574	; 0x574 <_Z36left_position_encoder_interrupt_initv>
		right_position_encoder_interrupt_init();
     8dc:	0e 94 c3 02 	call	0x586	; 0x586 <_Z37right_position_encoder_interrupt_initv>
		timer1_init();
     8e0:	0e 94 31 03 	call	0x662	; 0x662 <_Z11timer1_initv>
		sei();   //Enables the global interrupts
     8e4:	78 94       	sei
	}
     8e6:	08 95       	ret

000008e8 <_Z7servo_1h>:
	// function to set servo motor on pin 1 to motion (for a specified angle of rotation)
	void servo_1(unsigned char degrees)
	{
	 float PositionPanServo = 0;
	  PositionPanServo = ((float)degrees / 1.86) + 35.0;
	 OCR1AH = 0x00;
     8e8:	10 92 89 00 	sts	0x0089, r1
	
	// function to set servo motor on pin 1 to motion (for a specified angle of rotation)
	void servo_1(unsigned char degrees)
	{
	 float PositionPanServo = 0;
	  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     8ec:	68 2f       	mov	r22, r24
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__floatunsisf>
     8f8:	2b e7       	ldi	r18, 0x7B	; 123
     8fa:	34 e1       	ldi	r19, 0x14	; 20
     8fc:	4e ee       	ldi	r20, 0xEE	; 238
     8fe:	5f e3       	ldi	r21, 0x3F	; 63
     900:	0e 94 97 1c 	call	0x392e	; 0x392e <__divsf3>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4c e0       	ldi	r20, 0x0C	; 12
     90a:	52 e4       	ldi	r21, 0x42	; 66
     90c:	0e 94 33 1c 	call	0x3866	; 0x3866 <__addsf3>
	 OCR1AH = 0x00;
	 OCR1AL = (unsigned char) PositionPanServo;
     910:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__fixunssfsi>
     914:	60 93 88 00 	sts	0x0088, r22
	}
     918:	08 95       	ret

0000091a <_Z7servo_2h>:
	//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
	void servo_2(unsigned char degrees)
	{
	 float PositionTiltServo = 0;
	 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	 OCR1BH = 0x00;
     91a:	10 92 8b 00 	sts	0x008B, r1

	//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
	void servo_2(unsigned char degrees)
	{
	 float PositionTiltServo = 0;
	 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     91e:	68 2f       	mov	r22, r24
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__floatunsisf>
     92a:	2b e7       	ldi	r18, 0x7B	; 123
     92c:	34 e1       	ldi	r19, 0x14	; 20
     92e:	4e ee       	ldi	r20, 0xEE	; 238
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	0e 94 97 1c 	call	0x392e	; 0x392e <__divsf3>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	4c e0       	ldi	r20, 0x0C	; 12
     93c:	52 e4       	ldi	r21, 0x42	; 66
     93e:	0e 94 33 1c 	call	0x3866	; 0x3866 <__addsf3>
	 OCR1BH = 0x00;
	 OCR1BL = (unsigned char) PositionTiltServo;
     942:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__fixunssfsi>
     946:	60 93 8a 00 	sts	0x008A, r22
	}
     94a:	08 95       	ret

0000094c <_Z7servo_3h>:
	//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
	void servo_3(unsigned char degrees)
	{
	 float PositionServo = 0;
	 PositionServo = ((float)degrees / 1.86) + 35.0;
	 OCR1CH = 0x00;
     94c:	10 92 8d 00 	sts	0x008D, r1

	//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
	void servo_3(unsigned char degrees)
	{
	 float PositionServo = 0;
	 PositionServo = ((float)degrees / 1.86) + 35.0;
     950:	68 2f       	mov	r22, r24
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__floatunsisf>
     95c:	2b e7       	ldi	r18, 0x7B	; 123
     95e:	34 e1       	ldi	r19, 0x14	; 20
     960:	4e ee       	ldi	r20, 0xEE	; 238
     962:	5f e3       	ldi	r21, 0x3F	; 63
     964:	0e 94 97 1c 	call	0x392e	; 0x392e <__divsf3>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	4c e0       	ldi	r20, 0x0C	; 12
     96e:	52 e4       	ldi	r21, 0x42	; 66
     970:	0e 94 33 1c 	call	0x3866	; 0x3866 <__addsf3>
	 OCR1CH = 0x00;
	 OCR1CL = (unsigned char) PositionServo;
     974:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__fixunssfsi>
     978:	60 93 8c 00 	sts	0x008C, r22
	}
     97c:	08 95       	ret

0000097e <_Z12servo_1_freev>:

	void servo_1_free (void) //makes servo 1 free rotating
	{
	 OCR1AH = 0x03;
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	80 93 89 00 	sts	0x0089, r24
	 OCR1AL = 0xFF; //Servo 1 off
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	80 93 88 00 	sts	0x0088, r24
	}
     98a:	08 95       	ret

0000098c <_Z12servo_2_freev>:

	void servo_2_free (void) //makes servo 2 free rotating
	{
	 OCR1BH = 0x03;
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	80 93 8b 00 	sts	0x008B, r24
	 OCR1BL = 0xFF; //Servo 2 off
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	80 93 8a 00 	sts	0x008A, r24
	}
     998:	08 95       	ret

0000099a <_Z12servo_3_freev>:

	void servo_3_free (void) //makes servo 3 free rotating
	{
	 OCR1CH = 0x03;
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	80 93 8d 00 	sts	0x008D, r24
	 OCR1CL = 0xFF; //Servo 3 off
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	80 93 8c 00 	sts	0x008C, r24
	}
     9a6:	08 95       	ret

000009a8 <_Z13forward_blackv>:
	 
	 */
	int forward_black()
	{
		while(1){
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     9ae:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     9b8:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     9c2:	80 93 30 02 	sts	0x0230, r24

			if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20) // Center on black line-010
     9c6:	90 91 31 02 	lds	r25, 0x0231
     9ca:	91 32       	cpi	r25, 0x21	; 33
     9cc:	68 f0       	brcs	.+26     	; 0x9e8 <_Z13forward_blackv+0x40>
     9ce:	20 91 32 02 	lds	r18, 0x0232
     9d2:	20 32       	cpi	r18, 0x20	; 32
     9d4:	48 f4       	brcc	.+18     	; 0x9e8 <_Z13forward_blackv+0x40>
     9d6:	80 32       	cpi	r24, 0x20	; 32
     9d8:	38 f4       	brcc	.+14     	; 0x9e8 <_Z13forward_blackv+0x40>
			{	forward();
     9da:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
				velocity(150,142); //velocity value calibrated as per requirement
     9de:	86 e9       	ldi	r24, 0x96	; 150
     9e0:	6e e8       	ldi	r22, 0x8E	; 142
     9e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     9e6:	e0 cf       	rjmp	.-64     	; 0x9a8 <_Z13forward_blackv>

			}

			else if((Left_white_line>0x20 && Center_white_line<0x20) ) //left sensor on black line, take left turn to get back on blackline
     9e8:	20 91 32 02 	lds	r18, 0x0232
     9ec:	21 32       	cpi	r18, 0x21	; 33
     9ee:	78 f0       	brcs	.+30     	; 0xa0e <_Z13forward_blackv+0x66>
     9f0:	90 32       	cpi	r25, 0x20	; 32
     9f2:	68 f4       	brcc	.+26     	; 0xa0e <_Z13forward_blackv+0x66>
			{
				forward();
     9f4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
				velocity(40,120); //velocity of left and right motors calibrated as per requirement
     9f8:	88 e2       	ldi	r24, 0x28	; 40
     9fa:	68 e7       	ldi	r22, 0x78	; 120
     9fc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	97 ed       	ldi	r25, 0xD7	; 215
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <_Z13forward_blackv+0x5c>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <_Z13forward_blackv+0x62>
     a0a:	00 00       	nop
     a0c:	cd cf       	rjmp	.-102    	; 0x9a8 <_Z13forward_blackv>
				_delay_ms(15);
			}

			else if((Right_white_line>0x20 && Center_white_line<0x20)) //right sensor on black line, take right turn to get back on blackline
     a0e:	81 32       	cpi	r24, 0x21	; 33
     a10:	78 f0       	brcs	.+30     	; 0xa30 <_Z13forward_blackv+0x88>
     a12:	90 32       	cpi	r25, 0x20	; 32
     a14:	68 f4       	brcc	.+26     	; 0xa30 <_Z13forward_blackv+0x88>
			{	forward();
     a16:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
				velocity(120,40);
     a1a:	88 e7       	ldi	r24, 0x78	; 120
     a1c:	68 e2       	ldi	r22, 0x28	; 40
     a1e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	97 ed       	ldi	r25, 0xD7	; 215
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <_Z13forward_blackv+0x7e>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <_Z13forward_blackv+0x84>
     a2c:	00 00       	nop
     a2e:	bc cf       	rjmp	.-136    	; 0x9a8 <_Z13forward_blackv>
				_delay_ms(15);
			}
			
			else if(Center_white_line>0x20 && Left_white_line>0x20 && Right_white_line>0x20){//111
     a30:	91 32       	cpi	r25, 0x21	; 33
     a32:	08 f4       	brcc	.+2      	; 0xa36 <_Z13forward_blackv+0x8e>
     a34:	b9 cf       	rjmp	.-142    	; 0x9a8 <_Z13forward_blackv>
     a36:	21 32       	cpi	r18, 0x21	; 33
     a38:	08 f4       	brcc	.+2      	; 0xa3c <_Z13forward_blackv+0x94>
     a3a:	b6 cf       	rjmp	.-148    	; 0x9a8 <_Z13forward_blackv>
     a3c:	81 32       	cpi	r24, 0x21	; 33
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <_Z13forward_blackv+0x9a>
     a40:	b3 cf       	rjmp	.-154    	; 0x9a8 <_Z13forward_blackv>
				stop();
     a42:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			}
			

		}

	}
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	08 95       	ret

00000a4c <_Z9turn_leftv>:
	
	 */

	void turn_left()
	{
		left();
     a4c:	0e 94 35 04 	call	0x86a	; 0x86a <_Z4leftv>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     a56:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     a60:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     a6a:	80 93 30 02 	sts	0x0230, r24

			flag=0;
     a6e:	10 92 33 02 	sts	0x0233, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	43 e0       	ldi	r20, 0x03	; 3
     a78:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	65 e0       	ldi	r22, 0x05	; 5
     a80:	42 e0       	ldi	r20, 0x02	; 2
     a82:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	69 e0       	ldi	r22, 0x09	; 9
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>

			velocity(110,110);
     a90:	8e e6       	ldi	r24, 0x6E	; 110
     a92:	6e e6       	ldi	r22, 0x6E	; 110
     a94:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     a98:	86 e6       	ldi	r24, 0x66	; 102
     a9a:	96 e5       	ldi	r25, 0x56	; 86
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <_Z9turn_leftv+0x50>
     aa0:	00 00       	nop
			_delay_ms(6);
			if(Center_white_line>=0x40)
     aa2:	80 91 31 02 	lds	r24, 0x0231
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	98 f2       	brcs	.-90     	; 0xa50 <_Z9turn_leftv+0x4>
			{	stop();
     aaa:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
				velocity(0,0);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
				return;
			}

		}
	}
     ab6:	08 95       	ret

00000ab8 <_Z12center_rightv>:

	 */

	void center_right()
	{
		soft_right_2();
     ab8:	0e 94 5f 04 	call	0x8be	; 0x8be <_Z12soft_right_2v>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     ac2:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     acc:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     ad6:	80 93 30 02 	sts	0x0230, r24

			flag=0;
     ada:	10 92 33 02 	sts	0x0233, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	43 e0       	ldi	r20, 0x03	; 3
     ae4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	65 e0       	ldi	r22, 0x05	; 5
     aec:	42 e0       	ldi	r20, 0x02	; 2
     aee:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	69 e0       	ldi	r22, 0x09	; 9
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>

			velocity(0,130);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	62 e8       	ldi	r22, 0x82	; 130
     b00:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     b04:	86 e6       	ldi	r24, 0x66	; 102
     b06:	96 e5       	ldi	r25, 0x56	; 86
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <_Z12center_rightv+0x50>
     b0c:	00 00       	nop
			_delay_ms(6);
			if(Center_white_line>=0x0b)
     b0e:	80 91 31 02 	lds	r24, 0x0231
     b12:	8b 30       	cpi	r24, 0x0B	; 11
     b14:	98 f2       	brcs	.-90     	; 0xabc <_Z12center_rightv+0x4>
			{
				velocity(0,0);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>

				return;
			}

		}
	}
     b1e:	08 95       	ret

00000b20 <_Z10turn_rightv>:
	
	 */

	void turn_right()
	{
		right();
     b20:	0e 94 44 04 	call	0x888	; 0x888 <_Z5rightv>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     b2a:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     b34:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     b3e:	80 93 30 02 	sts	0x0230, r24

			flag=0;
     b42:	10 92 33 02 	sts	0x0233, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	43 e0       	ldi	r20, 0x03	; 3
     b4c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	65 e0       	ldi	r22, 0x05	; 5
     b54:	42 e0       	ldi	r20, 0x02	; 2
     b56:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	69 e0       	ldi	r22, 0x09	; 9
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z12print_sensorcch>

			velocity(110,110);
     b64:	8e e6       	ldi	r24, 0x6E	; 110
     b66:	6e e6       	ldi	r22, 0x6E	; 110
     b68:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     b6c:	86 e6       	ldi	r24, 0x66	; 102
     b6e:	96 e5       	ldi	r25, 0x56	; 86
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <_Z10turn_rightv+0x50>
     b74:	00 00       	nop
			_delay_ms(6);
			if(Center_white_line>=0x40)
     b76:	80 91 31 02 	lds	r24, 0x0231
     b7a:	80 34       	cpi	r24, 0x40	; 64
     b7c:	98 f2       	brcs	.-90     	; 0xb24 <_Z10turn_rightv+0x4>
			{
				velocity(0,0);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
				return;
			}


		}
	}
     b86:	08 95       	ret

00000b88 <_Z9buzzer_onv>:
	// function to set the buzzer on
	
	void buzzer_on (void)
	{
	 unsigned char port_restore = 0;
	 port_restore = PINC;
     b88:	86 b1       	in	r24, 0x06	; 6
	 port_restore = port_restore | 0x08;
     b8a:	88 60       	ori	r24, 0x08	; 8
	 PORTC = port_restore;
     b8c:	88 b9       	out	0x08, r24	; 8
	}
     b8e:	08 95       	ret

00000b90 <_Z10buzzer_offv>:

	void buzzer_off (void)
	{
	 unsigned char port_restore = 0;
	 port_restore = PINC;
     b90:	86 b1       	in	r24, 0x06	; 6
	 port_restore = port_restore & 0xF7;
     b92:	87 7f       	andi	r24, 0xF7	; 247
	 PORTC = port_restore;
     b94:	88 b9       	out	0x08, r24	; 8
	}
     b96:	08 95       	ret

00000b98 <_Z18linear_distance_mmj>:
	void linear_distance_mm(unsigned int DistanceInMM)
	{
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;

		ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     b98:	bc 01       	movw	r22, r24
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__floatunsisf>
     ba2:	25 ee       	ldi	r18, 0xE5	; 229
     ba4:	30 ed       	ldi	r19, 0xD0	; 208
     ba6:	4a ea       	ldi	r20, 0xAA	; 170
     ba8:	50 e4       	ldi	r21, 0x40	; 64
     baa:	0e 94 97 1c 	call	0x392e	; 0x392e <__divsf3>
		ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     bae:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__fixunssfsi>
     bb2:	46 2f       	mov	r20, r22
     bb4:	57 2f       	mov	r21, r23
     bb6:	68 2f       	mov	r22, r24
     bb8:	79 2f       	mov	r23, r25

		ShaftCountRight = 0;
     bba:	10 92 3f 02 	sts	0x023F, r1
     bbe:	10 92 40 02 	sts	0x0240, r1
     bc2:	10 92 41 02 	sts	0x0241, r1
     bc6:	10 92 42 02 	sts	0x0242, r1
		while(1)
		{
			if(ShaftCountRight > ReqdShaftCountInt)
     bca:	80 91 3f 02 	lds	r24, 0x023F
     bce:	90 91 40 02 	lds	r25, 0x0240
     bd2:	a0 91 41 02 	lds	r26, 0x0241
     bd6:	b0 91 42 02 	lds	r27, 0x0242
     bda:	48 17       	cp	r20, r24
     bdc:	59 07       	cpc	r21, r25
     bde:	6a 07       	cpc	r22, r26
     be0:	7b 07       	cpc	r23, r27
     be2:	98 f7       	brcc	.-26     	; 0xbca <_Z18linear_distance_mmj+0x32>
			{
				break;
			}
		}
		stop(); //Stop robot
     be4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
	}
     be8:	08 95       	ret

00000bea <_Z10forward_mmj>:

	void forward_mm(unsigned int DistanceInMM)
	{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
		forward();
     bf0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
		linear_distance_mm(DistanceInMM);
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z18linear_distance_mmj>
	}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <_Z7back_mmj>:

	void back_mm(unsigned int DistanceInMM)
	{
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
		back();
     c06:	0e 94 df 03 	call	0x7be	; 0x7be <_Z4backv>
		linear_distance_mm(DistanceInMM);
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z18linear_distance_mmj>
	}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <_Z30rotation_using_blackline_rightv>:
			  Thus robot is forwarded and then turn_right function is called. 
	? * Example Call:rotation_using_blackline_right
	? */
	void rotation_using_blackline_right(void)
	{
	forward_mm(89); //robot is forwarded by fixed distance using encoder
     c16:	89 e5       	ldi	r24, 0x59	; 89
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
	stop();
     c1e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	9f e7       	ldi	r25, 0x7F	; 127
     c26:	a6 e1       	ldi	r26, 0x16	; 22
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	a0 40       	sbci	r26, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <_Z30rotation_using_blackline_rightv+0x12>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <_Z30rotation_using_blackline_rightv+0x1c>
     c32:	00 00       	nop
	_delay_ms(500);


	right_degrees(90);
     c34:	8a e5       	ldi	r24, 0x5A	; 90
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	9f e3       	ldi	r25, 0x3F	; 63
     c40:	a2 e0       	ldi	r26, 0x02	; 2
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	90 40       	sbci	r25, 0x00	; 0
     c46:	a0 40       	sbci	r26, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <_Z30rotation_using_blackline_rightv+0x2c>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <_Z30rotation_using_blackline_rightv+0x36>
     c4c:	00 00       	nop
	_delay_ms(50);
	stop();
     c4e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>


	}
     c52:	08 95       	ret

00000c54 <_Z29rotation_using_blackline_leftv>:
			  Thus robot is forwarded and then turn_left function is called. 
	? * Example Call: rotation_using_blackline_left();
	? */
	void rotation_using_blackline_left(void)
	{
		forward_mm(89); //robot is forwarded by fixed distance using encoder
     c54:	89 e5       	ldi	r24, 0x59	; 89
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
		stop();
     c5c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	9f e7       	ldi	r25, 0x7F	; 127
     c64:	a6 e1       	ldi	r26, 0x16	; 22
     c66:	81 50       	subi	r24, 0x01	; 1
     c68:	90 40       	sbci	r25, 0x00	; 0
     c6a:	a0 40       	sbci	r26, 0x00	; 0
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <_Z29rotation_using_blackline_leftv+0x12>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <_Z29rotation_using_blackline_leftv+0x1c>
     c70:	00 00       	nop
		_delay_ms(500);
		left_degrees(90);
     c72:	8a e5       	ldi	r24, 0x5A	; 90
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	9f e3       	ldi	r25, 0x3F	; 63
     c7e:	a2 e0       	ldi	r26, 0x02	; 2
     c80:	81 50       	subi	r24, 0x01	; 1
     c82:	90 40       	sbci	r25, 0x00	; 0
     c84:	a0 40       	sbci	r26, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <_Z29rotation_using_blackline_leftv+0x2c>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <_Z29rotation_using_blackline_leftv+0x36>
     c8a:	00 00       	nop
		_delay_ms(50);
		stop();
     c8c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
	}
     c90:	08 95       	ret

00000c92 <_Z10count_nodev>:
	
//Function to count node in path of firebird V. A node is defined as the junction where value of all three black line sensors is geater than threshold value.
int count_node(void) {
			
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     c98:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     ca2:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     cac:	80 93 30 02 	sts	0x0230, r24

			if(Center_white_line>0x20 && Left_white_line>0x20 && Right_white_line>0x20){//111
     cb0:	90 91 31 02 	lds	r25, 0x0231
     cb4:	91 32       	cpi	r25, 0x21	; 33
     cb6:	88 f0       	brcs	.+34     	; 0xcda <_Z10count_nodev+0x48>
     cb8:	90 91 32 02 	lds	r25, 0x0232
     cbc:	91 32       	cpi	r25, 0x21	; 33
     cbe:	68 f0       	brcs	.+26     	; 0xcda <_Z10count_nodev+0x48>
     cc0:	81 32       	cpi	r24, 0x21	; 33
     cc2:	58 f0       	brcs	.+22     	; 0xcda <_Z10count_nodev+0x48>
				stop();
     cc4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
				count++ ;
     cc8:	80 91 3b 02 	lds	r24, 0x023B
     ccc:	90 91 3c 02 	lds	r25, 0x023C
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 3c 02 	sts	0x023C, r25
     cd6:	80 93 3b 02 	sts	0x023B, r24
			
			}
			return count;
}
     cda:	80 91 3b 02 	lds	r24, 0x023B
     cde:	90 91 3c 02 	lds	r25, 0x023C
     ce2:	08 95       	ret

00000ce4 <_Z11reset_countv>:

//function to reset node count value to 0
void reset_count(void){
	count = 0 ;
     ce4:	10 92 3c 02 	sts	0x023C, r1
     ce8:	10 92 3b 02 	sts	0x023B, r1
	return;
}
     cec:	08 95       	ret

00000cee <_Z17forward_from_nodev>:
//function to move robot from node to node
// logic :- If the robot is at a node, then black line following function can not be used. So, this function sets the robot in motion
//  		initially and then does proper black line following till next node is reached
void forward_from_node(void){
			
			forward_mm(30);
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9f e3       	ldi	r25, 0x3F	; 63
     cfa:	a2 e0       	ldi	r26, 0x02	; 2
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	a0 40       	sbci	r26, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <_Z17forward_from_nodev+0xe>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <_Z17forward_from_nodev+0x18>
     d06:	00 00       	nop
			_delay_ms(50);
			while(1){
			
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     d0e:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     d18:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
     d22:	80 93 30 02 	sts	0x0230, r24
			if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20) // Center on black line-010
     d26:	90 91 31 02 	lds	r25, 0x0231
     d2a:	91 32       	cpi	r25, 0x21	; 33
     d2c:	68 f0       	brcs	.+26     	; 0xd48 <_Z17forward_from_nodev+0x5a>
     d2e:	20 91 32 02 	lds	r18, 0x0232
     d32:	20 32       	cpi	r18, 0x20	; 32
     d34:	48 f4       	brcc	.+18     	; 0xd48 <_Z17forward_from_nodev+0x5a>
     d36:	80 32       	cpi	r24, 0x20	; 32
     d38:	38 f4       	brcc	.+14     	; 0xd48 <_Z17forward_from_nodev+0x5a>
			{	forward();
     d3a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
				velocity(130,122); //velocity value calibrated as per requirement
     d3e:	82 e8       	ldi	r24, 0x82	; 130
     d40:	6a e7       	ldi	r22, 0x7A	; 122
     d42:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     d46:	e0 cf       	rjmp	.-64     	; 0xd08 <_Z17forward_from_nodev+0x1a>

			}

		    else if((Left_white_line>0x20 && Center_white_line<0x20) ) //left sensor on black line, take left turn to get back on blackline
     d48:	20 91 32 02 	lds	r18, 0x0232
     d4c:	21 32       	cpi	r18, 0x21	; 33
     d4e:	78 f0       	brcs	.+30     	; 0xd6e <_Z17forward_from_nodev+0x80>
     d50:	90 32       	cpi	r25, 0x20	; 32
     d52:	68 f4       	brcc	.+26     	; 0xd6e <_Z17forward_from_nodev+0x80>
			{
				forward();
     d54:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
				velocity(40,120); //velocity of left and right motors calibrated as per requirement
     d58:	88 e2       	ldi	r24, 0x28	; 40
     d5a:	68 e7       	ldi	r22, 0x78	; 120
     d5c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     d60:	af ef       	ldi	r26, 0xFF	; 255
     d62:	b7 ed       	ldi	r27, 0xD7	; 215
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <_Z17forward_from_nodev+0x76>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <_Z17forward_from_nodev+0x7c>
     d6a:	00 00       	nop
     d6c:	cd cf       	rjmp	.-102    	; 0xd08 <_Z17forward_from_nodev+0x1a>
				_delay_ms(15);
			}

			else if((Right_white_line>0x20 && Center_white_line<0x20)) //right sensor on black line, take right turn to get back on blackline
     d6e:	81 32       	cpi	r24, 0x21	; 33
     d70:	78 f0       	brcs	.+30     	; 0xd90 <_Z17forward_from_nodev+0xa2>
     d72:	90 32       	cpi	r25, 0x20	; 32
     d74:	68 f4       	brcc	.+26     	; 0xd90 <_Z17forward_from_nodev+0xa2>
			{	forward();
     d76:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z7forwardv>
				velocity(120,40);
     d7a:	88 e7       	ldi	r24, 0x78	; 120
     d7c:	68 e2       	ldi	r22, 0x28	; 40
     d7e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	97 ed       	ldi	r25, 0xD7	; 215
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <_Z17forward_from_nodev+0x98>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <_Z17forward_from_nodev+0x9e>
     d8c:	00 00       	nop
     d8e:	bc cf       	rjmp	.-136    	; 0xd08 <_Z17forward_from_nodev+0x1a>
				_delay_ms(15);
			}
			else if(Center_white_line>0x20 && Left_white_line>0x20 && Right_white_line>0x20){//111
     d90:	91 32       	cpi	r25, 0x21	; 33
     d92:	08 f4       	brcc	.+2      	; 0xd96 <_Z17forward_from_nodev+0xa8>
     d94:	b9 cf       	rjmp	.-142    	; 0xd08 <_Z17forward_from_nodev+0x1a>
     d96:	21 32       	cpi	r18, 0x21	; 33
     d98:	08 f4       	brcc	.+2      	; 0xd9c <_Z17forward_from_nodev+0xae>
     d9a:	b6 cf       	rjmp	.-148    	; 0xd08 <_Z17forward_from_nodev+0x1a>
     d9c:	81 32       	cpi	r24, 0x21	; 33
     d9e:	08 f4       	brcc	.+2      	; 0xda2 <_Z17forward_from_nodev+0xb4>
     da0:	b3 cf       	rjmp	.-154    	; 0xd08 <_Z17forward_from_nodev+0x1a>
				stop();
     da2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
				 break;

				}
}
return;
}
     da6:	08 95       	ret

00000da8 <_Z32rotation_using_blackline_newleftj>:

//function to move forward 30mm and rotate left robot  until black line found based on flag value
// if flag =0 it will rotate until first black line detected
// if flag =1 it will rotate until second black line detected
void rotation_using_blackline_newleft(unsigned int flag =0)
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
	forward_mm(30); //robot is forwarded by fixed distance using encoder
     dae:	8e e1       	ldi	r24, 0x1E	; 30
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
	stop();
     db6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9f e7       	ldi	r25, 0x7F	; 127
     dbe:	a6 e1       	ldi	r26, 0x16	; 22
     dc0:	81 50       	subi	r24, 0x01	; 1
     dc2:	90 40       	sbci	r25, 0x00	; 0
     dc4:	a0 40       	sbci	r26, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <_Z32rotation_using_blackline_newleftj+0x18>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <_Z32rotation_using_blackline_newleftj+0x22>
     dca:	00 00       	nop
	_delay_ms(500);
	if(flag ==0)
     dcc:	20 97       	sbiw	r28, 0x00	; 0
     dce:	91 f4       	brne	.+36     	; 0xdf4 <_Z32rotation_using_blackline_newleftj+0x4c>
	{
	
		turn_left();     //robot will rotate left until it gets blackline
     dd0:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
		velocity(190,190);
     dd4:	8e eb       	ldi	r24, 0xBE	; 190
     dd6:	6e eb       	ldi	r22, 0xBE	; 190
     dd8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	9f e3       	ldi	r25, 0x3F	; 63
     de0:	a2 e0       	ldi	r26, 0x02	; 2
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	90 40       	sbci	r25, 0x00	; 0
     de6:	a0 40       	sbci	r26, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <_Z32rotation_using_blackline_newleftj+0x3a>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <_Z32rotation_using_blackline_newleftj+0x44>
     dec:	00 00       	nop
		_delay_ms(50);
		stop();
     dee:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     df2:	1c c0       	rjmp	.+56     	; 0xe2c <_Z32rotation_using_blackline_newleftj+0x84>
	}
	else {
		
		turn_left();     //robot will rotate left until it gets blackline
     df4:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9f e3       	ldi	r25, 0x3F	; 63
     dfc:	a2 e0       	ldi	r26, 0x02	; 2
     dfe:	81 50       	subi	r24, 0x01	; 1
     e00:	90 40       	sbci	r25, 0x00	; 0
     e02:	a0 40       	sbci	r26, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <_Z32rotation_using_blackline_newleftj+0x56>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <_Z32rotation_using_blackline_newleftj+0x60>
     e08:	00 00       	nop
		_delay_ms(50);
		turn_left();
     e0a:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
		velocity(160,160);
     e0e:	80 ea       	ldi	r24, 0xA0	; 160
     e10:	60 ea       	ldi	r22, 0xA0	; 160
     e12:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	9f e3       	ldi	r25, 0x3F	; 63
     e1a:	a2 e0       	ldi	r26, 0x02	; 2
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	90 40       	sbci	r25, 0x00	; 0
     e20:	a0 40       	sbci	r26, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <_Z32rotation_using_blackline_newleftj+0x74>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <_Z32rotation_using_blackline_newleftj+0x7e>
     e26:	00 00       	nop
		_delay_ms(50);
		stop();
     e28:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
	}
	
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <_Z33rotation_using_blackline_newrightj>:
//function to move forward 30mm and rotate robot right  until black line found based on flag value
// if flag =0 it will rotate until first black line detected
// if flag =1 it will rotate until second black line detected

void rotation_using_blackline_newright(unsigned int flag =0)
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ec 01       	movw	r28, r24
	forward_mm(30); //robot is forwarded by fixed distance using encoder
     e38:	8e e1       	ldi	r24, 0x1E	; 30
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
	stop();
     e40:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	9f e7       	ldi	r25, 0x7F	; 127
     e48:	a6 e1       	ldi	r26, 0x16	; 22
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	90 40       	sbci	r25, 0x00	; 0
     e4e:	a0 40       	sbci	r26, 0x00	; 0
     e50:	e1 f7       	brne	.-8      	; 0xe4a <_Z33rotation_using_blackline_newrightj+0x18>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <_Z33rotation_using_blackline_newrightj+0x22>
     e54:	00 00       	nop
	_delay_ms(500);
	if(flag ==0)
     e56:	20 97       	sbiw	r28, 0x00	; 0
     e58:	91 f4       	brne	.+36     	; 0xe7e <_Z33rotation_using_blackline_newrightj+0x4c>
	{
			turn_right();     //robot will rotate left until it gets blackline
     e5a:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
			velocity(160,160);
     e5e:	80 ea       	ldi	r24, 0xA0	; 160
     e60:	60 ea       	ldi	r22, 0xA0	; 160
     e62:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f e3       	ldi	r25, 0x3F	; 63
     e6a:	a2 e0       	ldi	r26, 0x02	; 2
     e6c:	81 50       	subi	r24, 0x01	; 1
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	a0 40       	sbci	r26, 0x00	; 0
     e72:	e1 f7       	brne	.-8      	; 0xe6c <_Z33rotation_using_blackline_newrightj+0x3a>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <_Z33rotation_using_blackline_newrightj+0x44>
     e76:	00 00       	nop
			_delay_ms(50);
			stop();
     e78:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     e7c:	1c c0       	rjmp	.+56     	; 0xeb6 <_Z33rotation_using_blackline_newrightj+0x84>
	}
	else {
			turn_right();     //robot will rotate left until it gets blackline
     e7e:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	9f e3       	ldi	r25, 0x3F	; 63
     e86:	a2 e0       	ldi	r26, 0x02	; 2
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	a0 40       	sbci	r26, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <_Z33rotation_using_blackline_newrightj+0x56>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <_Z33rotation_using_blackline_newrightj+0x60>
     e92:	00 00       	nop
			_delay_ms(50);
			turn_right();
     e94:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
			velocity(160,160);
     e98:	80 ea       	ldi	r24, 0xA0	; 160
     e9a:	60 ea       	ldi	r22, 0xA0	; 160
     e9c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f e3       	ldi	r25, 0x3F	; 63
     ea4:	a2 e0       	ldi	r26, 0x02	; 2
     ea6:	81 50       	subi	r24, 0x01	; 1
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	a0 40       	sbci	r26, 0x00	; 0
     eac:	e1 f7       	brne	.-8      	; 0xea6 <_Z33rotation_using_blackline_newrightj+0x74>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <_Z33rotation_using_blackline_newrightj+0x7e>
     eb0:	00 00       	nop
			_delay_ms(50);
			stop();
     eb2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
	}

}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <_Z23rotation_blackline_leftj>:
//function to rotate left robot until black line found based on flag value
// if flag =0 it will rotate until first black line detected
// if flag =1 it will rotate until second black line detected
void rotation_blackline_left(unsigned int flag =0)
{
	if(flag ==0)
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	91 f4       	brne	.+36     	; 0xee4 <_Z23rotation_blackline_leftj+0x28>
	{
		turn_left();
     ec0:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
		velocity(160,160);
     ec4:	80 ea       	ldi	r24, 0xA0	; 160
     ec6:	60 ea       	ldi	r22, 0xA0	; 160
     ec8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	9f e3       	ldi	r25, 0x3F	; 63
     ed0:	a2 e0       	ldi	r26, 0x02	; 2
     ed2:	81 50       	subi	r24, 0x01	; 1
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	a0 40       	sbci	r26, 0x00	; 0
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <_Z23rotation_blackline_leftj+0x16>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <_Z23rotation_blackline_leftj+0x20>
     edc:	00 00       	nop
		_delay_ms(50);
		stop();
     ede:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     ee2:	08 95       	ret
		
	}
	else {
		turn_left();
     ee4:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	9f e3       	ldi	r25, 0x3F	; 63
     eec:	a2 e0       	ldi	r26, 0x02	; 2
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	90 40       	sbci	r25, 0x00	; 0
     ef2:	a0 40       	sbci	r26, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <_Z23rotation_blackline_leftj+0x32>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <_Z23rotation_blackline_leftj+0x3c>
     ef8:	00 00       	nop
		_delay_ms(50);
		turn_left();
     efa:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
		velocity(160,160);
     efe:	80 ea       	ldi	r24, 0xA0	; 160
     f00:	60 ea       	ldi	r22, 0xA0	; 160
     f02:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f e3       	ldi	r25, 0x3F	; 63
     f0a:	a2 e0       	ldi	r26, 0x02	; 2
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	a0 40       	sbci	r26, 0x00	; 0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <_Z23rotation_blackline_leftj+0x50>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <_Z23rotation_blackline_leftj+0x5a>
     f16:	00 00       	nop
		_delay_ms(50);
		stop();
     f18:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     f1c:	08 95       	ret

00000f1e <_Z24rotation_blackline_rightj>:
//function to rotate right robot until black line found based on flag value
// if flag =0 it will rotate until first black line detected
// if flag =1 it will rotate until second black line detected
void rotation_blackline_right(unsigned int flag =0)
{
	if(flag ==0)
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	91 f4       	brne	.+36     	; 0xf46 <_Z24rotation_blackline_rightj+0x28>
	{
		turn_right();
     f22:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
		velocity(160,160);
     f26:	80 ea       	ldi	r24, 0xA0	; 160
     f28:	60 ea       	ldi	r22, 0xA0	; 160
     f2a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f e3       	ldi	r25, 0x3F	; 63
     f32:	a2 e0       	ldi	r26, 0x02	; 2
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	a0 40       	sbci	r26, 0x00	; 0
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <_Z24rotation_blackline_rightj+0x16>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <_Z24rotation_blackline_rightj+0x20>
     f3e:	00 00       	nop
		_delay_ms(50);
		stop();
     f40:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     f44:	08 95       	ret
		
	}
	else {
		turn_right();
     f46:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	9f e3       	ldi	r25, 0x3F	; 63
     f4e:	a2 e0       	ldi	r26, 0x02	; 2
     f50:	81 50       	subi	r24, 0x01	; 1
     f52:	90 40       	sbci	r25, 0x00	; 0
     f54:	a0 40       	sbci	r26, 0x00	; 0
     f56:	e1 f7       	brne	.-8      	; 0xf50 <_Z24rotation_blackline_rightj+0x32>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <_Z24rotation_blackline_rightj+0x3c>
     f5a:	00 00       	nop
		_delay_ms(50);
		turn_right();
     f5c:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
		velocity(160,160);
     f60:	80 ea       	ldi	r24, 0xA0	; 160
     f62:	60 ea       	ldi	r22, 0xA0	; 160
     f64:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	9f e3       	ldi	r25, 0x3F	; 63
     f6c:	a2 e0       	ldi	r26, 0x02	; 2
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	90 40       	sbci	r25, 0x00	; 0
     f72:	a0 40       	sbci	r26, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <_Z24rotation_blackline_rightj+0x50>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <_Z24rotation_blackline_rightj+0x5a>
     f78:	00 00       	nop
		_delay_ms(50);
		stop();
     f7a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
     f7e:	08 95       	ret

00000f80 <_Z6pickupv>:
	
}
//function to implement picking up of block by robotic arm
void pickup(){
	
	servo_1(0);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z7servo_1h>
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f e7       	ldi	r25, 0x7F	; 127
     f8a:	a4 e0       	ldi	r26, 0x04	; 4
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	90 40       	sbci	r25, 0x00	; 0
     f90:	a0 40       	sbci	r26, 0x00	; 0
     f92:	e1 f7       	brne	.-8      	; 0xf8c <_Z6pickupv+0xc>
     f94:	00 c0       	rjmp	.+0      	; 0xf96 <_Z6pickupv+0x16>
     f96:	00 00       	nop
	_delay_ms(100) ;
	servo_2(0);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z7servo_2h>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f e7       	ldi	r25, 0x7F	; 127
     fa2:	a4 e0       	ldi	r26, 0x04	; 4
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	90 40       	sbci	r25, 0x00	; 0
     fa8:	a0 40       	sbci	r26, 0x00	; 0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <_Z6pickupv+0x24>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <_Z6pickupv+0x2e>
     fae:	00 00       	nop
	_delay_ms(100) ;
	servo_1(25) ;
     fb0:	89 e1       	ldi	r24, 0x19	; 25
     fb2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z7servo_1h>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	9f e7       	ldi	r25, 0x7F	; 127
     fba:	a4 e0       	ldi	r26, 0x04	; 4
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	90 40       	sbci	r25, 0x00	; 0
     fc0:	a0 40       	sbci	r26, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <_Z6pickupv+0x3c>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <_Z6pickupv+0x46>
     fc6:	00 00       	nop
	_delay_ms(100);
}
     fc8:	08 95       	ret

00000fca <_Z4dropv>:

//function to implement dropping of block by robotic arm 
void drop(){
	servo_2(30);
     fca:	8e e1       	ldi	r24, 0x1E	; 30
     fcc:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z7servo_2h>
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	a8 e0       	ldi	r26, 0x08	; 8
     fd6:	81 50       	subi	r24, 0x01	; 1
     fd8:	90 40       	sbci	r25, 0x00	; 0
     fda:	a0 40       	sbci	r26, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <_Z4dropv+0xc>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <_Z4dropv+0x16>
     fe0:	00 00       	nop
	_delay_ms(200);
	
}
     fe2:	08 95       	ret

00000fe4 <_Z7pathto1v>:

// path for traversal of each block collection.
// logic :- Path of the robot to each block is predefined using above functions wherever required.
//			whenever a specific block is to be collected, the path leading to the block is called.  
void pathto1()
{
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	cb e0       	ldi	r28, 0x0B	; 11
     fee:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==10){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][0] + 4; 		// so as to send a particular data dependent on the block color to arduino xbee for regaining the originsl configuration 
     ff0:	00 e0       	ldi	r16, 0x00	; 0
     ff2:	12 e0       	ldi	r17, 0x02	; 2
//			whenever a specific block is to be collected, the path leading to the block is called.  
void pathto1()
{
	
	for( int i =0; i<11;i++){
		lcd_print(1,1,count,3);
     ff4:	40 91 3b 02 	lds	r20, 0x023B
     ff8:	50 91 3c 02 	lds	r21, 0x023C
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	23 e0       	ldi	r18, 0x03	; 3
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    1008:	80 91 3b 02 	lds	r24, 0x023B
    100c:	90 91 3c 02 	lds	r25, 0x023C
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	19 f4       	brne	.+6      	; 0x101a <_Z7pathto1v+0x36>
			stop();
    1014:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    1018:	99 c1       	rjmp	.+818    	; 0x134c <_Z7pathto1v+0x368>
		}
		else if(count==1){
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	91 05       	cpc	r25, r1
    101e:	01 f5       	brne	.+64     	; 0x1060 <_Z7pathto1v+0x7c>
			rotation_using_blackline_right();
    1020:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f e3       	ldi	r25, 0x3F	; 63
    1028:	a2 e0       	ldi	r26, 0x02	; 2
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	90 40       	sbci	r25, 0x00	; 0
    102e:	a0 40       	sbci	r26, 0x00	; 0
    1030:	e1 f7       	brne	.-8      	; 0x102a <_Z7pathto1v+0x46>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <_Z7pathto1v+0x50>
    1034:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1036:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    103a:	80 91 3b 02 	lds	r24, 0x023B
    103e:	90 91 3c 02 	lds	r25, 0x023C
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	90 93 3c 02 	sts	0x023C, r25
    1048:	80 93 3b 02 	sts	0x023B, r24
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	9f e3       	ldi	r25, 0x3F	; 63
    1050:	a2 e0       	ldi	r26, 0x02	; 2
    1052:	81 50       	subi	r24, 0x01	; 1
    1054:	90 40       	sbci	r25, 0x00	; 0
    1056:	a0 40       	sbci	r26, 0x00	; 0
    1058:	e1 f7       	brne	.-8      	; 0x1052 <_Z7pathto1v+0x6e>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <_Z7pathto1v+0x78>
    105c:	00 00       	nop
    105e:	73 c1       	rjmp	.+742    	; 0x1346 <_Z7pathto1v+0x362>
			_delay_ms(50);
			
		}
		else if(count==2){
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	91 05       	cpc	r25, r1
    1064:	a9 f4       	brne	.+42     	; 0x1090 <_Z7pathto1v+0xac>
			forward_from_node();
    1066:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	9f e3       	ldi	r25, 0x3F	; 63
    106e:	a2 e0       	ldi	r26, 0x02	; 2
    1070:	81 50       	subi	r24, 0x01	; 1
    1072:	90 40       	sbci	r25, 0x00	; 0
    1074:	a0 40       	sbci	r26, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <_Z7pathto1v+0x8c>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <_Z7pathto1v+0x96>
    107a:	00 00       	nop
			_delay_ms(50);
			++count;
    107c:	80 91 3b 02 	lds	r24, 0x023B
    1080:	90 91 3c 02 	lds	r25, 0x023C
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	90 93 3c 02 	sts	0x023C, r25
    108a:	80 93 3b 02 	sts	0x023B, r24
    108e:	5b c1       	rjmp	.+694    	; 0x1346 <_Z7pathto1v+0x362>
		
		}
		else if(count==3){
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	11 f5       	brne	.+68     	; 0x10da <_Z7pathto1v+0xf6>
			
			rotation_using_blackline_newleft();
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f e3       	ldi	r25, 0x3F	; 63
    10a2:	a2 e0       	ldi	r26, 0x02	; 2
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	a0 40       	sbci	r26, 0x00	; 0
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <_Z7pathto1v+0xc0>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <_Z7pathto1v+0xca>
    10ae:	00 00       	nop
			_delay_ms(50);
			forward_black();
    10b0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f e3       	ldi	r25, 0x3F	; 63
    10b8:	a2 e0       	ldi	r26, 0x02	; 2
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	90 40       	sbci	r25, 0x00	; 0
    10be:	a0 40       	sbci	r26, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <_Z7pathto1v+0xd6>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <_Z7pathto1v+0xe0>
    10c4:	00 00       	nop
			_delay_ms(50);
			++count;
    10c6:	80 91 3b 02 	lds	r24, 0x023B
    10ca:	90 91 3c 02 	lds	r25, 0x023C
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	90 93 3c 02 	sts	0x023C, r25
    10d4:	80 93 3b 02 	sts	0x023B, r24
    10d8:	36 c1       	rjmp	.+620    	; 0x1346 <_Z7pathto1v+0x362>
		
		}
		
		else if(count ==4)
    10da:	84 30       	cpi	r24, 0x04	; 4
    10dc:	91 05       	cpc	r25, r1
    10de:	a9 f4       	brne	.+42     	; 0x110a <_Z7pathto1v+0x126>
		{
			forward_from_node();
    10e0:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	9f e3       	ldi	r25, 0x3F	; 63
    10e8:	a2 e0       	ldi	r26, 0x02	; 2
    10ea:	81 50       	subi	r24, 0x01	; 1
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	a0 40       	sbci	r26, 0x00	; 0
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <_Z7pathto1v+0x106>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <_Z7pathto1v+0x110>
    10f4:	00 00       	nop
			_delay_ms(50);
			++count;
    10f6:	80 91 3b 02 	lds	r24, 0x023B
    10fa:	90 91 3c 02 	lds	r25, 0x023C
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	90 93 3c 02 	sts	0x023C, r25
    1104:	80 93 3b 02 	sts	0x023B, r24
    1108:	1e c1       	rjmp	.+572    	; 0x1346 <_Z7pathto1v+0x362>
			
		}
		else if(count==5){
    110a:	85 30       	cpi	r24, 0x05	; 5
    110c:	91 05       	cpc	r25, r1
    110e:	09 f0       	breq	.+2      	; 0x1112 <_Z7pathto1v+0x12e>
    1110:	51 c0       	rjmp	.+162    	; 0x11b4 <_Z7pathto1v+0x1d0>
			data = info_table[0][0]; 			  
    1112:	d8 01       	movw	r26, r16
    1114:	8c 91       	ld	r24, X
    1116:	80 93 3a 02 	sts	0x023A, r24
			forward_mm(60);
    111a:	8c e3       	ldi	r24, 0x3C	; 60
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	9f e3       	ldi	r25, 0x3F	; 63
    1126:	a2 e0       	ldi	r26, 0x02	; 2
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	90 40       	sbci	r25, 0x00	; 0
    112c:	a0 40       	sbci	r26, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <_Z7pathto1v+0x144>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <_Z7pathto1v+0x14e>
    1132:	00 00       	nop
			_delay_ms(50);
			right_degrees(45);
    1134:	8d e2       	ldi	r24, 0x2D	; 45
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	9f e3       	ldi	r25, 0x3F	; 63
    1140:	a2 e0       	ldi	r26, 0x02	; 2
    1142:	81 50       	subi	r24, 0x01	; 1
    1144:	90 40       	sbci	r25, 0x00	; 0
    1146:	a0 40       	sbci	r26, 0x00	; 0
    1148:	e1 f7       	brne	.-8      	; 0x1142 <_Z7pathto1v+0x15e>
    114a:	00 c0       	rjmp	.+0      	; 0x114c <_Z7pathto1v+0x168>
    114c:	00 00       	nop
			_delay_ms(50);
			turn_right();
    114e:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	9f e7       	ldi	r25, 0x7F	; 127
    1156:	a6 e1       	ldi	r26, 0x16	; 22
    1158:	81 50       	subi	r24, 0x01	; 1
    115a:	90 40       	sbci	r25, 0x00	; 0
    115c:	a0 40       	sbci	r26, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <_Z7pathto1v+0x174>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <_Z7pathto1v+0x17e>
    1162:	00 00       	nop
			_delay_ms(500);
			pickup() ;	
    1164:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			velocity(120,60);
    1168:	88 e7       	ldi	r24, 0x78	; 120
    116a:	6c e3       	ldi	r22, 0x3C	; 60
    116c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_blackline_right();
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z24rotation_blackline_rightj>
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	9f e3       	ldi	r25, 0x3F	; 63
    117c:	a2 e0       	ldi	r26, 0x02	; 2
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	90 40       	sbci	r25, 0x00	; 0
    1182:	a0 40       	sbci	r26, 0x00	; 0
    1184:	e1 f7       	brne	.-8      	; 0x117e <_Z7pathto1v+0x19a>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <_Z7pathto1v+0x1a4>
    1188:	00 00       	nop
			_delay_ms(50);
			forward_black();
    118a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f e3       	ldi	r25, 0x3F	; 63
    1192:	a2 e0       	ldi	r26, 0x02	; 2
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	90 40       	sbci	r25, 0x00	; 0
    1198:	a0 40       	sbci	r26, 0x00	; 0
    119a:	e1 f7       	brne	.-8      	; 0x1194 <_Z7pathto1v+0x1b0>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <_Z7pathto1v+0x1ba>
    119e:	00 00       	nop
			_delay_ms(50);
			++count;
    11a0:	80 91 3b 02 	lds	r24, 0x023B
    11a4:	90 91 3c 02 	lds	r25, 0x023C
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	90 93 3c 02 	sts	0x023C, r25
    11ae:	80 93 3b 02 	sts	0x023B, r24
    11b2:	c9 c0       	rjmp	.+402    	; 0x1346 <_Z7pathto1v+0x362>
			
		}
		else if(count == 6)
    11b4:	86 30       	cpi	r24, 0x06	; 6
    11b6:	91 05       	cpc	r25, r1
    11b8:	a9 f4       	brne	.+42     	; 0x11e4 <_Z7pathto1v+0x200>
		{
			forward_from_node();
    11ba:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9f e3       	ldi	r25, 0x3F	; 63
    11c2:	a2 e0       	ldi	r26, 0x02	; 2
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	90 40       	sbci	r25, 0x00	; 0
    11c8:	a0 40       	sbci	r26, 0x00	; 0
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <_Z7pathto1v+0x1e0>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <_Z7pathto1v+0x1ea>
    11ce:	00 00       	nop
			_delay_ms(50);
			++count;
    11d0:	80 91 3b 02 	lds	r24, 0x023B
    11d4:	90 91 3c 02 	lds	r25, 0x023C
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	90 93 3c 02 	sts	0x023C, r25
    11de:	80 93 3b 02 	sts	0x023B, r24
    11e2:	b1 c0       	rjmp	.+354    	; 0x1346 <_Z7pathto1v+0x362>
		}
		else if(count==7){
    11e4:	87 30       	cpi	r24, 0x07	; 7
    11e6:	91 05       	cpc	r25, r1
    11e8:	31 f5       	brne	.+76     	; 0x1236 <_Z7pathto1v+0x252>
			velocity(120,60);
    11ea:	88 e7       	ldi	r24, 0x78	; 120
    11ec:	6c e3       	ldi	r22, 0x3C	; 60
    11ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	9f e3       	ldi	r25, 0x3F	; 63
    11fe:	a2 e0       	ldi	r26, 0x02	; 2
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	90 40       	sbci	r25, 0x00	; 0
    1204:	a0 40       	sbci	r26, 0x00	; 0
    1206:	e1 f7       	brne	.-8      	; 0x1200 <_Z7pathto1v+0x21c>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <_Z7pathto1v+0x226>
    120a:	00 00       	nop
			_delay_ms(50);
			forward_black();
    120c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	9f e3       	ldi	r25, 0x3F	; 63
    1214:	a2 e0       	ldi	r26, 0x02	; 2
    1216:	81 50       	subi	r24, 0x01	; 1
    1218:	90 40       	sbci	r25, 0x00	; 0
    121a:	a0 40       	sbci	r26, 0x00	; 0
    121c:	e1 f7       	brne	.-8      	; 0x1216 <_Z7pathto1v+0x232>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <_Z7pathto1v+0x23c>
    1220:	00 00       	nop
			_delay_ms(50);
			++count;
    1222:	80 91 3b 02 	lds	r24, 0x023B
    1226:	90 91 3c 02 	lds	r25, 0x023C
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	90 93 3c 02 	sts	0x023C, r25
    1230:	80 93 3b 02 	sts	0x023B, r24
    1234:	88 c0       	rjmp	.+272    	; 0x1346 <_Z7pathto1v+0x362>
			
		}
		else if(count==8){
    1236:	88 30       	cpi	r24, 0x08	; 8
    1238:	91 05       	cpc	r25, r1
    123a:	a9 f4       	brne	.+42     	; 0x1266 <_Z7pathto1v+0x282>
			forward_from_node();
    123c:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	9f e3       	ldi	r25, 0x3F	; 63
    1244:	a2 e0       	ldi	r26, 0x02	; 2
    1246:	81 50       	subi	r24, 0x01	; 1
    1248:	90 40       	sbci	r25, 0x00	; 0
    124a:	a0 40       	sbci	r26, 0x00	; 0
    124c:	e1 f7       	brne	.-8      	; 0x1246 <_Z7pathto1v+0x262>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <_Z7pathto1v+0x26c>
    1250:	00 00       	nop
			_delay_ms(50);
			
			++count;
    1252:	80 91 3b 02 	lds	r24, 0x023B
    1256:	90 91 3c 02 	lds	r25, 0x023C
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	90 93 3c 02 	sts	0x023C, r25
    1260:	80 93 3b 02 	sts	0x023B, r24
    1264:	70 c0       	rjmp	.+224    	; 0x1346 <_Z7pathto1v+0x362>
			
		}
		else if(count==9){
    1266:	89 30       	cpi	r24, 0x09	; 9
    1268:	91 05       	cpc	r25, r1
    126a:	79 f5       	brne	.+94     	; 0x12ca <_Z7pathto1v+0x2e6>
			forward_mm(88);
    126c:	88 e5       	ldi	r24, 0x58	; 88
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z10forward_mmj>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	9f e3       	ldi	r25, 0x3F	; 63
    1278:	a2 e0       	ldi	r26, 0x02	; 2
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	90 40       	sbci	r25, 0x00	; 0
    127e:	a0 40       	sbci	r26, 0x00	; 0
    1280:	e1 f7       	brne	.-8      	; 0x127a <_Z7pathto1v+0x296>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <_Z7pathto1v+0x2a0>
    1284:	00 00       	nop
			_delay_ms(50);
			rotation_using_blackline_right();
    1286:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	9f e3       	ldi	r25, 0x3F	; 63
    128e:	a2 e0       	ldi	r26, 0x02	; 2
    1290:	81 50       	subi	r24, 0x01	; 1
    1292:	90 40       	sbci	r25, 0x00	; 0
    1294:	a0 40       	sbci	r26, 0x00	; 0
    1296:	e1 f7       	brne	.-8      	; 0x1290 <_Z7pathto1v+0x2ac>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <_Z7pathto1v+0x2b6>
    129a:	00 00       	nop
			_delay_ms(50);
			turn_right();
    129c:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	9f e3       	ldi	r25, 0x3F	; 63
    12a4:	a2 e0       	ldi	r26, 0x02	; 2
    12a6:	81 50       	subi	r24, 0x01	; 1
    12a8:	90 40       	sbci	r25, 0x00	; 0
    12aa:	a0 40       	sbci	r26, 0x00	; 0
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <_Z7pathto1v+0x2c2>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <_Z7pathto1v+0x2cc>
    12b0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    12b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    12b6:	80 91 3b 02 	lds	r24, 0x023B
    12ba:	90 91 3c 02 	lds	r25, 0x023C
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	90 93 3c 02 	sts	0x023C, r25
    12c4:	80 93 3b 02 	sts	0x023B, r24
    12c8:	3e c0       	rjmp	.+124    	; 0x1346 <_Z7pathto1v+0x362>
			
		}
		else if(count==10){
    12ca:	8a 30       	cpi	r24, 0x0A	; 10
    12cc:	91 05       	cpc	r25, r1
    12ce:	d9 f5       	brne	.+118    	; 0x1346 <_Z7pathto1v+0x362>
			forward_from_node();
    12d0:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f e3       	ldi	r25, 0x3F	; 63
    12d8:	a2 e0       	ldi	r26, 0x02	; 2
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	90 40       	sbci	r25, 0x00	; 0
    12de:	a0 40       	sbci	r26, 0x00	; 0
    12e0:	e1 f7       	brne	.-8      	; 0x12da <_Z7pathto1v+0x2f6>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <_Z7pathto1v+0x300>
    12e4:	00 00       	nop
			_delay_ms(50);
			drop();
    12e6:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][0] + 4; 		// so as to send a particular data dependent on the block color to arduino xbee for regaining the originsl configuration 
    12ea:	d8 01       	movw	r26, r16
    12ec:	8c 91       	ld	r24, X
    12ee:	8c 5f       	subi	r24, 0xFC	; 252
    12f0:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    12f4:	8d e2       	ldi	r24, 0x2D	; 45
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	9f e3       	ldi	r25, 0x3F	; 63
    1300:	a2 e0       	ldi	r26, 0x02	; 2
    1302:	81 50       	subi	r24, 0x01	; 1
    1304:	90 40       	sbci	r25, 0x00	; 0
    1306:	a0 40       	sbci	r26, 0x00	; 0
    1308:	e1 f7       	brne	.-8      	; 0x1302 <_Z7pathto1v+0x31e>
    130a:	00 c0       	rjmp	.+0      	; 0x130c <_Z7pathto1v+0x328>
    130c:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f e3       	ldi	r25, 0x3F	; 63
    131a:	a2 e0       	ldi	r26, 0x02	; 2
    131c:	81 50       	subi	r24, 0x01	; 1
    131e:	90 40       	sbci	r25, 0x00	; 0
    1320:	a0 40       	sbci	r26, 0x00	; 0
    1322:	e1 f7       	brne	.-8      	; 0x131c <_Z7pathto1v+0x338>
    1324:	00 c0       	rjmp	.+0      	; 0x1326 <_Z7pathto1v+0x342>
    1326:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1328:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	9f e3       	ldi	r25, 0x3F	; 63
    1330:	a2 e0       	ldi	r26, 0x02	; 2
    1332:	81 50       	subi	r24, 0x01	; 1
    1334:	90 40       	sbci	r25, 0x00	; 0
    1336:	a0 40       	sbci	r26, 0x00	; 0
    1338:	e1 f7       	brne	.-8      	; 0x1332 <_Z7pathto1v+0x34e>
    133a:	00 c0       	rjmp	.+0      	; 0x133c <_Z7pathto1v+0x358>
    133c:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    133e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
			
			reset_count();									//call count reset function to reset it to 0
    1342:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    1346:	21 97       	sbiw	r28, 0x01	; 1
// logic :- Path of the robot to each block is predefined using above functions wherever required.
//			whenever a specific block is to be collected, the path leading to the block is called.  
void pathto1()
{
	
	for( int i =0; i<11;i++){
    1348:	09 f0       	breq	.+2      	; 0x134c <_Z7pathto1v+0x368>
    134a:	54 ce       	rjmp	.-856    	; 0xff4 <_Z7pathto1v+0x10>
			
			reset_count();									//call count reset function to reset it to 0
		}
	}
	
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	08 95       	ret

00001356 <_Z7pathto2v>:

void pathto2(){
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	c9 e0       	ldi	r28, 0x09	; 9
    1360:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(count==8){
		forward_from_node();
		_delay_ms(50);
		drop();
		data = info_table[0][1] + 4 ; 
    1362:	02 e0       	ldi	r16, 0x02	; 2
    1364:	12 e0       	ldi	r17, 0x02	; 2
	
}

void pathto2(){
	for( int i =0; i<9;i++){
		lcd_print(1,1,count,3);
    1366:	40 91 3b 02 	lds	r20, 0x023B
    136a:	50 91 3c 02 	lds	r21, 0x023C
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	23 e0       	ldi	r18, 0x03	; 3
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		                                    
	if(count==0){
    137a:	80 91 3b 02 	lds	r24, 0x023B
    137e:	90 91 3c 02 	lds	r25, 0x023C
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	19 f4       	brne	.+6      	; 0x138c <_Z7pathto2v+0x36>
		stop();
    1386:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
		break;
    138a:	46 c1       	rjmp	.+652    	; 0x1618 <_Z7pathto2v+0x2c2>
	}
	else if(count==1){
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	01 f5       	brne	.+64     	; 0x13d2 <_Z7pathto2v+0x7c>
		rotation_using_blackline_right();
    1392:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	9f e3       	ldi	r25, 0x3F	; 63
    139a:	a2 e0       	ldi	r26, 0x02	; 2
    139c:	81 50       	subi	r24, 0x01	; 1
    139e:	90 40       	sbci	r25, 0x00	; 0
    13a0:	a0 40       	sbci	r26, 0x00	; 0
    13a2:	e1 f7       	brne	.-8      	; 0x139c <_Z7pathto2v+0x46>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <_Z7pathto2v+0x50>
    13a6:	00 00       	nop
		_delay_ms(50);
		forward_black();
    13a8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
		++count;
    13ac:	80 91 3b 02 	lds	r24, 0x023B
    13b0:	90 91 3c 02 	lds	r25, 0x023C
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	90 93 3c 02 	sts	0x023C, r25
    13ba:	80 93 3b 02 	sts	0x023B, r24
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	9f e3       	ldi	r25, 0x3F	; 63
    13c2:	a2 e0       	ldi	r26, 0x02	; 2
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	90 40       	sbci	r25, 0x00	; 0
    13c8:	a0 40       	sbci	r26, 0x00	; 0
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <_Z7pathto2v+0x6e>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <_Z7pathto2v+0x78>
    13ce:	00 00       	nop
    13d0:	20 c1       	rjmp	.+576    	; 0x1612 <_Z7pathto2v+0x2bc>
		_delay_ms(50);
		
	}
	else if(count==2){
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	91 05       	cpc	r25, r1
    13d6:	a9 f4       	brne	.+42     	; 0x1402 <_Z7pathto2v+0xac>
		forward_from_node();
    13d8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	9f e3       	ldi	r25, 0x3F	; 63
    13e0:	a2 e0       	ldi	r26, 0x02	; 2
    13e2:	81 50       	subi	r24, 0x01	; 1
    13e4:	90 40       	sbci	r25, 0x00	; 0
    13e6:	a0 40       	sbci	r26, 0x00	; 0
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <_Z7pathto2v+0x8c>
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <_Z7pathto2v+0x96>
    13ec:	00 00       	nop
		_delay_ms(50);
		++count;
    13ee:	80 91 3b 02 	lds	r24, 0x023B
    13f2:	90 91 3c 02 	lds	r25, 0x023C
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	90 93 3c 02 	sts	0x023C, r25
    13fc:	80 93 3b 02 	sts	0x023B, r24
    1400:	08 c1       	rjmp	.+528    	; 0x1612 <_Z7pathto2v+0x2bc>
		
	}
	else if(count==3){
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	c9 f4       	brne	.+50     	; 0x143a <_Z7pathto2v+0xe4>
		
		rotation_using_blackline_newleft();
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f e3       	ldi	r25, 0x3F	; 63
    1414:	a2 e0       	ldi	r26, 0x02	; 2
    1416:	81 50       	subi	r24, 0x01	; 1
    1418:	90 40       	sbci	r25, 0x00	; 0
    141a:	a0 40       	sbci	r26, 0x00	; 0
    141c:	e1 f7       	brne	.-8      	; 0x1416 <_Z7pathto2v+0xc0>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <_Z7pathto2v+0xca>
    1420:	00 00       	nop
		_delay_ms(50);
		forward_black();
    1422:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
		++count;
    1426:	80 91 3b 02 	lds	r24, 0x023B
    142a:	90 91 3c 02 	lds	r25, 0x023C
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	90 93 3c 02 	sts	0x023C, r25
    1434:	80 93 3b 02 	sts	0x023B, r24
    1438:	ec c0       	rjmp	.+472    	; 0x1612 <_Z7pathto2v+0x2bc>
		
	}
	else if(count==4){
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	91 05       	cpc	r25, r1
    143e:	09 f0       	breq	.+2      	; 0x1442 <_Z7pathto2v+0xec>
    1440:	46 c0       	rjmp	.+140    	; 0x14ce <_Z7pathto2v+0x178>
		data = info_table[0][1] ;  		  
    1442:	d8 01       	movw	r26, r16
    1444:	8c 91       	ld	r24, X
    1446:	80 93 3a 02 	sts	0x023A, r24
		velocity(120,60);
    144a:	88 e7       	ldi	r24, 0x78	; 120
    144c:	6c e3       	ldi	r22, 0x3C	; 60
    144e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
		rotation_using_blackline_newright();
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	a0 ee       	ldi	r26, 0xE0	; 224
    1460:	81 50       	subi	r24, 0x01	; 1
    1462:	90 40       	sbci	r25, 0x00	; 0
    1464:	a0 40       	sbci	r26, 0x00	; 0
    1466:	e1 f7       	brne	.-8      	; 0x1460 <_Z7pathto2v+0x10a>
    1468:	00 c0       	rjmp	.+0      	; 0x146a <_Z7pathto2v+0x114>
    146a:	00 00       	nop
		_delay_ms(5000);
		pickup();	
    146c:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
		right_degrees(45);
    1470:	8d e2       	ldi	r24, 0x2D	; 45
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	9f e3       	ldi	r25, 0x3F	; 63
    147c:	a2 e0       	ldi	r26, 0x02	; 2
    147e:	81 50       	subi	r24, 0x01	; 1
    1480:	90 40       	sbci	r25, 0x00	; 0
    1482:	a0 40       	sbci	r26, 0x00	; 0
    1484:	e1 f7       	brne	.-8      	; 0x147e <_Z7pathto2v+0x128>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <_Z7pathto2v+0x132>
    1488:	00 00       	nop
		_delay_ms(50);
		rotation_blackline_right();
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z24rotation_blackline_rightj>
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	9f e3       	ldi	r25, 0x3F	; 63
    1496:	a2 e0       	ldi	r26, 0x02	; 2
    1498:	81 50       	subi	r24, 0x01	; 1
    149a:	90 40       	sbci	r25, 0x00	; 0
    149c:	a0 40       	sbci	r26, 0x00	; 0
    149e:	e1 f7       	brne	.-8      	; 0x1498 <_Z7pathto2v+0x142>
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <_Z7pathto2v+0x14c>
    14a2:	00 00       	nop
		_delay_ms(50);
		forward_black();
    14a4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	9f e3       	ldi	r25, 0x3F	; 63
    14ac:	a2 e0       	ldi	r26, 0x02	; 2
    14ae:	81 50       	subi	r24, 0x01	; 1
    14b0:	90 40       	sbci	r25, 0x00	; 0
    14b2:	a0 40       	sbci	r26, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <_Z7pathto2v+0x158>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <_Z7pathto2v+0x162>
    14b8:	00 00       	nop
		_delay_ms(50);
		++count;
    14ba:	80 91 3b 02 	lds	r24, 0x023B
    14be:	90 91 3c 02 	lds	r25, 0x023C
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	90 93 3c 02 	sts	0x023C, r25
    14c8:	80 93 3b 02 	sts	0x023B, r24
    14cc:	a2 c0       	rjmp	.+324    	; 0x1612 <_Z7pathto2v+0x2bc>
		
	}
	else if(count==5){
    14ce:	85 30       	cpi	r24, 0x05	; 5
    14d0:	91 05       	cpc	r25, r1
    14d2:	31 f5       	brne	.+76     	; 0x1520 <_Z7pathto2v+0x1ca>
		velocity(120,60);
    14d4:	88 e7       	ldi	r24, 0x78	; 120
    14d6:	6c e3       	ldi	r22, 0x3C	; 60
    14d8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
		rotation_using_blackline_newright();
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	9f e3       	ldi	r25, 0x3F	; 63
    14e8:	a2 e0       	ldi	r26, 0x02	; 2
    14ea:	81 50       	subi	r24, 0x01	; 1
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	a0 40       	sbci	r26, 0x00	; 0
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <_Z7pathto2v+0x194>
    14f2:	00 c0       	rjmp	.+0      	; 0x14f4 <_Z7pathto2v+0x19e>
    14f4:	00 00       	nop
		_delay_ms(50);
		forward_black();
    14f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f e3       	ldi	r25, 0x3F	; 63
    14fe:	a2 e0       	ldi	r26, 0x02	; 2
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	90 40       	sbci	r25, 0x00	; 0
    1504:	a0 40       	sbci	r26, 0x00	; 0
    1506:	e1 f7       	brne	.-8      	; 0x1500 <_Z7pathto2v+0x1aa>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <_Z7pathto2v+0x1b4>
    150a:	00 00       	nop
		_delay_ms(50);
		++count;
    150c:	80 91 3b 02 	lds	r24, 0x023B
    1510:	90 91 3c 02 	lds	r25, 0x023C
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 3c 02 	sts	0x023C, r25
    151a:	80 93 3b 02 	sts	0x023B, r24
    151e:	79 c0       	rjmp	.+242    	; 0x1612 <_Z7pathto2v+0x2bc>
		
	}
	else if(count==6){
    1520:	86 30       	cpi	r24, 0x06	; 6
    1522:	91 05       	cpc	r25, r1
    1524:	a9 f4       	brne	.+42     	; 0x1550 <_Z7pathto2v+0x1fa>
		forward_from_node();
    1526:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f e3       	ldi	r25, 0x3F	; 63
    152e:	a2 e0       	ldi	r26, 0x02	; 2
    1530:	81 50       	subi	r24, 0x01	; 1
    1532:	90 40       	sbci	r25, 0x00	; 0
    1534:	a0 40       	sbci	r26, 0x00	; 0
    1536:	e1 f7       	brne	.-8      	; 0x1530 <_Z7pathto2v+0x1da>
    1538:	00 c0       	rjmp	.+0      	; 0x153a <_Z7pathto2v+0x1e4>
    153a:	00 00       	nop
		_delay_ms(50);
		
		++count;
    153c:	80 91 3b 02 	lds	r24, 0x023B
    1540:	90 91 3c 02 	lds	r25, 0x023C
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	90 93 3c 02 	sts	0x023C, r25
    154a:	80 93 3b 02 	sts	0x023B, r24
    154e:	61 c0       	rjmp	.+194    	; 0x1612 <_Z7pathto2v+0x2bc>
		
	}
	else if(count==7){
    1550:	87 30       	cpi	r24, 0x07	; 7
    1552:	91 05       	cpc	r25, r1
    1554:	11 f5       	brne	.+68     	; 0x159a <_Z7pathto2v+0x244>
		rotation_using_blackline_right();
    1556:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	9f e3       	ldi	r25, 0x3F	; 63
    155e:	a2 e0       	ldi	r26, 0x02	; 2
    1560:	81 50       	subi	r24, 0x01	; 1
    1562:	90 40       	sbci	r25, 0x00	; 0
    1564:	a0 40       	sbci	r26, 0x00	; 0
    1566:	e1 f7       	brne	.-8      	; 0x1560 <_Z7pathto2v+0x20a>
    1568:	00 c0       	rjmp	.+0      	; 0x156a <_Z7pathto2v+0x214>
    156a:	00 00       	nop
		_delay_ms(50);
		turn_right();
    156c:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	9f e3       	ldi	r25, 0x3F	; 63
    1574:	a2 e0       	ldi	r26, 0x02	; 2
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	90 40       	sbci	r25, 0x00	; 0
    157a:	a0 40       	sbci	r26, 0x00	; 0
    157c:	e1 f7       	brne	.-8      	; 0x1576 <_Z7pathto2v+0x220>
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <_Z7pathto2v+0x22a>
    1580:	00 00       	nop
		_delay_ms(50);
		forward_black();
    1582:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
		++count;
    1586:	80 91 3b 02 	lds	r24, 0x023B
    158a:	90 91 3c 02 	lds	r25, 0x023C
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	90 93 3c 02 	sts	0x023C, r25
    1594:	80 93 3b 02 	sts	0x023B, r24
    1598:	3c c0       	rjmp	.+120    	; 0x1612 <_Z7pathto2v+0x2bc>
		
	}
	else if(count==8){
    159a:	88 30       	cpi	r24, 0x08	; 8
    159c:	91 05       	cpc	r25, r1
    159e:	c9 f5       	brne	.+114    	; 0x1612 <_Z7pathto2v+0x2bc>
		forward_from_node();
    15a0:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	9f e3       	ldi	r25, 0x3F	; 63
    15a8:	a2 e0       	ldi	r26, 0x02	; 2
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	90 40       	sbci	r25, 0x00	; 0
    15ae:	a0 40       	sbci	r26, 0x00	; 0
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <_Z7pathto2v+0x254>
    15b2:	00 c0       	rjmp	.+0      	; 0x15b4 <_Z7pathto2v+0x25e>
    15b4:	00 00       	nop
		_delay_ms(50);
		drop();
    15b6:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
		data = info_table[0][1] + 4 ; 
    15ba:	d8 01       	movw	r26, r16
    15bc:	8c 91       	ld	r24, X
    15be:	8c 5f       	subi	r24, 0xFC	; 252
    15c0:	80 93 3a 02 	sts	0x023A, r24
		left_degrees(45);
    15c4:	8d e2       	ldi	r24, 0x2D	; 45
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	9f e3       	ldi	r25, 0x3F	; 63
    15d0:	a2 e0       	ldi	r26, 0x02	; 2
    15d2:	81 50       	subi	r24, 0x01	; 1
    15d4:	90 40       	sbci	r25, 0x00	; 0
    15d6:	a0 40       	sbci	r26, 0x00	; 0
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <_Z7pathto2v+0x27c>
    15da:	00 c0       	rjmp	.+0      	; 0x15dc <_Z7pathto2v+0x286>
    15dc:	00 00       	nop
		_delay_ms(50);
		turn_left();
    15de:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f e3       	ldi	r25, 0x3F	; 63
    15e6:	a2 e0       	ldi	r26, 0x02	; 2
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	90 40       	sbci	r25, 0x00	; 0
    15ec:	a0 40       	sbci	r26, 0x00	; 0
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <_Z7pathto2v+0x292>
    15f0:	00 c0       	rjmp	.+0      	; 0x15f2 <_Z7pathto2v+0x29c>
    15f2:	00 00       	nop
		_delay_ms(50);
		forward_black();
    15f4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f e3       	ldi	r25, 0x3F	; 63
    15fc:	a2 e0       	ldi	r26, 0x02	; 2
    15fe:	81 50       	subi	r24, 0x01	; 1
    1600:	90 40       	sbci	r25, 0x00	; 0
    1602:	a0 40       	sbci	r26, 0x00	; 0
    1604:	e1 f7       	brne	.-8      	; 0x15fe <_Z7pathto2v+0x2a8>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <_Z7pathto2v+0x2b2>
    1608:	00 00       	nop
		_delay_ms(50);
		forward_from_node();
    160a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
		
		reset_count();									//call count reset function to reset it to 0
    160e:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    1612:	21 97       	sbiw	r28, 0x01	; 1
	}
	
}

void pathto2(){
	for( int i =0; i<9;i++){
    1614:	09 f0       	breq	.+2      	; 0x1618 <_Z7pathto2v+0x2c2>
    1616:	a7 ce       	rjmp	.-690    	; 0x1366 <_Z7pathto2v+0x10>
		forward_from_node();
		
		reset_count();									//call count reset function to reset it to 0
	}
}
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <_Z7pathto3v>:

void pathto3()
{
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	c9 e0       	ldi	r28, 0x09	; 9
    162c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==8){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][2] + 4 ; 
    162e:	04 e0       	ldi	r16, 0x04	; 4
    1630:	12 e0       	ldi	r17, 0x02	; 2
}

void pathto3()
{
	for( int i =0; i<9;i++){
		lcd_print(1,1,count,3);
    1632:	40 91 3b 02 	lds	r20, 0x023B
    1636:	50 91 3c 02 	lds	r21, 0x023C
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	23 e0       	ldi	r18, 0x03	; 3
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    1646:	80 91 3b 02 	lds	r24, 0x023B
    164a:	90 91 3c 02 	lds	r25, 0x023C
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	19 f4       	brne	.+6      	; 0x1658 <_Z7pathto3v+0x36>
			stop();
    1652:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    1656:	3f c1       	rjmp	.+638    	; 0x18d6 <_Z7pathto3v+0x2b4>
		}
		else if(count==1){
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	01 f5       	brne	.+64     	; 0x169e <_Z7pathto3v+0x7c>
			rotation_using_blackline_left();
    165e:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z29rotation_using_blackline_leftv>
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	9f e3       	ldi	r25, 0x3F	; 63
    1666:	a2 e0       	ldi	r26, 0x02	; 2
    1668:	81 50       	subi	r24, 0x01	; 1
    166a:	90 40       	sbci	r25, 0x00	; 0
    166c:	a0 40       	sbci	r26, 0x00	; 0
    166e:	e1 f7       	brne	.-8      	; 0x1668 <_Z7pathto3v+0x46>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <_Z7pathto3v+0x50>
    1672:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1674:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    1678:	80 91 3b 02 	lds	r24, 0x023B
    167c:	90 91 3c 02 	lds	r25, 0x023C
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	90 93 3c 02 	sts	0x023C, r25
    1686:	80 93 3b 02 	sts	0x023B, r24
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	9f e3       	ldi	r25, 0x3F	; 63
    168e:	a2 e0       	ldi	r26, 0x02	; 2
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	90 40       	sbci	r25, 0x00	; 0
    1694:	a0 40       	sbci	r26, 0x00	; 0
    1696:	e1 f7       	brne	.-8      	; 0x1690 <_Z7pathto3v+0x6e>
    1698:	00 c0       	rjmp	.+0      	; 0x169a <_Z7pathto3v+0x78>
    169a:	00 00       	nop
    169c:	19 c1       	rjmp	.+562    	; 0x18d0 <_Z7pathto3v+0x2ae>
			_delay_ms(50);
			
		}
		else if(count==2){
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	91 05       	cpc	r25, r1
    16a2:	a9 f4       	brne	.+42     	; 0x16ce <_Z7pathto3v+0xac>
			forward_from_node();
    16a4:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	9f e3       	ldi	r25, 0x3F	; 63
    16ac:	a2 e0       	ldi	r26, 0x02	; 2
    16ae:	81 50       	subi	r24, 0x01	; 1
    16b0:	90 40       	sbci	r25, 0x00	; 0
    16b2:	a0 40       	sbci	r26, 0x00	; 0
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <_Z7pathto3v+0x8c>
    16b6:	00 c0       	rjmp	.+0      	; 0x16b8 <_Z7pathto3v+0x96>
    16b8:	00 00       	nop
			_delay_ms(50);
			++count;
    16ba:	80 91 3b 02 	lds	r24, 0x023B
    16be:	90 91 3c 02 	lds	r25, 0x023C
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	90 93 3c 02 	sts	0x023C, r25
    16c8:	80 93 3b 02 	sts	0x023B, r24
    16cc:	01 c1       	rjmp	.+514    	; 0x18d0 <_Z7pathto3v+0x2ae>
			
		}
		else if(count==3){
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	c9 f4       	brne	.+50     	; 0x1706 <_Z7pathto3v+0xe4>
			
			rotation_using_blackline_newright();
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	9f e3       	ldi	r25, 0x3F	; 63
    16e0:	a2 e0       	ldi	r26, 0x02	; 2
    16e2:	81 50       	subi	r24, 0x01	; 1
    16e4:	90 40       	sbci	r25, 0x00	; 0
    16e6:	a0 40       	sbci	r26, 0x00	; 0
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <_Z7pathto3v+0xc0>
    16ea:	00 c0       	rjmp	.+0      	; 0x16ec <_Z7pathto3v+0xca>
    16ec:	00 00       	nop
			_delay_ms(50);
			forward_black();
    16ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    16f2:	80 91 3b 02 	lds	r24, 0x023B
    16f6:	90 91 3c 02 	lds	r25, 0x023C
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	90 93 3c 02 	sts	0x023C, r25
    1700:	80 93 3b 02 	sts	0x023B, r24
    1704:	e5 c0       	rjmp	.+458    	; 0x18d0 <_Z7pathto3v+0x2ae>
			
		}
		else if(count==4){
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	91 05       	cpc	r25, r1
    170a:	09 f0       	breq	.+2      	; 0x170e <_Z7pathto3v+0xec>
    170c:	46 c0       	rjmp	.+140    	; 0x179a <_Z7pathto3v+0x178>
			data = info_table[0][2]; 			   
    170e:	d8 01       	movw	r26, r16
    1710:	8c 91       	ld	r24, X
    1712:	80 93 3a 02 	sts	0x023A, r24
			velocity(60,120);
    1716:	8c e3       	ldi	r24, 0x3C	; 60
    1718:	68 e7       	ldi	r22, 0x78	; 120
    171a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	9f ef       	ldi	r25, 0xFF	; 255
    172a:	a0 ee       	ldi	r26, 0xE0	; 224
    172c:	81 50       	subi	r24, 0x01	; 1
    172e:	90 40       	sbci	r25, 0x00	; 0
    1730:	a0 40       	sbci	r26, 0x00	; 0
    1732:	e1 f7       	brne	.-8      	; 0x172c <_Z7pathto3v+0x10a>
    1734:	00 c0       	rjmp	.+0      	; 0x1736 <_Z7pathto3v+0x114>
    1736:	00 00       	nop
			_delay_ms(5000);
			pickup();	
    1738:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			left_degrees(45);
    173c:	8d e2       	ldi	r24, 0x2D	; 45
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	9f e3       	ldi	r25, 0x3F	; 63
    1748:	a2 e0       	ldi	r26, 0x02	; 2
    174a:	81 50       	subi	r24, 0x01	; 1
    174c:	90 40       	sbci	r25, 0x00	; 0
    174e:	a0 40       	sbci	r26, 0x00	; 0
    1750:	e1 f7       	brne	.-8      	; 0x174a <_Z7pathto3v+0x128>
    1752:	00 c0       	rjmp	.+0      	; 0x1754 <_Z7pathto3v+0x132>
    1754:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	9f e3       	ldi	r25, 0x3F	; 63
    1762:	a2 e0       	ldi	r26, 0x02	; 2
    1764:	81 50       	subi	r24, 0x01	; 1
    1766:	90 40       	sbci	r25, 0x00	; 0
    1768:	a0 40       	sbci	r26, 0x00	; 0
    176a:	e1 f7       	brne	.-8      	; 0x1764 <_Z7pathto3v+0x142>
    176c:	00 c0       	rjmp	.+0      	; 0x176e <_Z7pathto3v+0x14c>
    176e:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1770:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	9f e3       	ldi	r25, 0x3F	; 63
    1778:	a2 e0       	ldi	r26, 0x02	; 2
    177a:	81 50       	subi	r24, 0x01	; 1
    177c:	90 40       	sbci	r25, 0x00	; 0
    177e:	a0 40       	sbci	r26, 0x00	; 0
    1780:	e1 f7       	brne	.-8      	; 0x177a <_Z7pathto3v+0x158>
    1782:	00 c0       	rjmp	.+0      	; 0x1784 <_Z7pathto3v+0x162>
    1784:	00 00       	nop
			_delay_ms(50);
			++count;
    1786:	80 91 3b 02 	lds	r24, 0x023B
    178a:	90 91 3c 02 	lds	r25, 0x023C
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	90 93 3c 02 	sts	0x023C, r25
    1794:	80 93 3b 02 	sts	0x023B, r24
    1798:	9b c0       	rjmp	.+310    	; 0x18d0 <_Z7pathto3v+0x2ae>
			
		}
		else if(count==5){
    179a:	85 30       	cpi	r24, 0x05	; 5
    179c:	91 05       	cpc	r25, r1
    179e:	31 f5       	brne	.+76     	; 0x17ec <_Z7pathto3v+0x1ca>
			velocity(60,120);
    17a0:	8c e3       	ldi	r24, 0x3C	; 60
    17a2:	68 e7       	ldi	r22, 0x78	; 120
    17a4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	9f e3       	ldi	r25, 0x3F	; 63
    17b4:	a2 e0       	ldi	r26, 0x02	; 2
    17b6:	81 50       	subi	r24, 0x01	; 1
    17b8:	90 40       	sbci	r25, 0x00	; 0
    17ba:	a0 40       	sbci	r26, 0x00	; 0
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <_Z7pathto3v+0x194>
    17be:	00 c0       	rjmp	.+0      	; 0x17c0 <_Z7pathto3v+0x19e>
    17c0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    17c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	9f e3       	ldi	r25, 0x3F	; 63
    17ca:	a2 e0       	ldi	r26, 0x02	; 2
    17cc:	81 50       	subi	r24, 0x01	; 1
    17ce:	90 40       	sbci	r25, 0x00	; 0
    17d0:	a0 40       	sbci	r26, 0x00	; 0
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <_Z7pathto3v+0x1aa>
    17d4:	00 c0       	rjmp	.+0      	; 0x17d6 <_Z7pathto3v+0x1b4>
    17d6:	00 00       	nop
			_delay_ms(50);
			++count;
    17d8:	80 91 3b 02 	lds	r24, 0x023B
    17dc:	90 91 3c 02 	lds	r25, 0x023C
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	90 93 3c 02 	sts	0x023C, r25
    17e6:	80 93 3b 02 	sts	0x023B, r24
    17ea:	72 c0       	rjmp	.+228    	; 0x18d0 <_Z7pathto3v+0x2ae>
			
		}
		else if(count==6){
    17ec:	86 30       	cpi	r24, 0x06	; 6
    17ee:	91 05       	cpc	r25, r1
    17f0:	a9 f4       	brne	.+42     	; 0x181c <_Z7pathto3v+0x1fa>
			forward_from_node();
    17f2:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	9f e3       	ldi	r25, 0x3F	; 63
    17fa:	a2 e0       	ldi	r26, 0x02	; 2
    17fc:	81 50       	subi	r24, 0x01	; 1
    17fe:	90 40       	sbci	r25, 0x00	; 0
    1800:	a0 40       	sbci	r26, 0x00	; 0
    1802:	e1 f7       	brne	.-8      	; 0x17fc <_Z7pathto3v+0x1da>
    1804:	00 c0       	rjmp	.+0      	; 0x1806 <_Z7pathto3v+0x1e4>
    1806:	00 00       	nop
			_delay_ms(50);
			
			++count;
    1808:	80 91 3b 02 	lds	r24, 0x023B
    180c:	90 91 3c 02 	lds	r25, 0x023C
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	90 93 3c 02 	sts	0x023C, r25
    1816:	80 93 3b 02 	sts	0x023B, r24
    181a:	5a c0       	rjmp	.+180    	; 0x18d0 <_Z7pathto3v+0x2ae>
			
		}
		else if(count==7){
    181c:	87 30       	cpi	r24, 0x07	; 7
    181e:	91 05       	cpc	r25, r1
    1820:	c9 f4       	brne	.+50     	; 0x1854 <_Z7pathto3v+0x232>
			rotation_using_blackline_right();
    1822:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	9f e3       	ldi	r25, 0x3F	; 63
    182a:	a2 e0       	ldi	r26, 0x02	; 2
    182c:	81 50       	subi	r24, 0x01	; 1
    182e:	90 40       	sbci	r25, 0x00	; 0
    1830:	a0 40       	sbci	r26, 0x00	; 0
    1832:	e1 f7       	brne	.-8      	; 0x182c <_Z7pathto3v+0x20a>
    1834:	00 c0       	rjmp	.+0      	; 0x1836 <_Z7pathto3v+0x214>
    1836:	00 00       	nop
			_delay_ms(50);
			turn_right();
    1838:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
			forward_black();
    183c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    1840:	80 91 3b 02 	lds	r24, 0x023B
    1844:	90 91 3c 02 	lds	r25, 0x023C
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	90 93 3c 02 	sts	0x023C, r25
    184e:	80 93 3b 02 	sts	0x023B, r24
    1852:	3e c0       	rjmp	.+124    	; 0x18d0 <_Z7pathto3v+0x2ae>
			
		}
		else if(count==8){
    1854:	88 30       	cpi	r24, 0x08	; 8
    1856:	91 05       	cpc	r25, r1
    1858:	d9 f5       	brne	.+118    	; 0x18d0 <_Z7pathto3v+0x2ae>
			forward_from_node();
    185a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	9f e3       	ldi	r25, 0x3F	; 63
    1862:	a2 e0       	ldi	r26, 0x02	; 2
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	90 40       	sbci	r25, 0x00	; 0
    1868:	a0 40       	sbci	r26, 0x00	; 0
    186a:	e1 f7       	brne	.-8      	; 0x1864 <_Z7pathto3v+0x242>
    186c:	00 c0       	rjmp	.+0      	; 0x186e <_Z7pathto3v+0x24c>
    186e:	00 00       	nop
			_delay_ms(50);
			drop();
    1870:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][2] + 4 ; 
    1874:	d8 01       	movw	r26, r16
    1876:	8c 91       	ld	r24, X
    1878:	8c 5f       	subi	r24, 0xFC	; 252
    187a:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    187e:	8d e2       	ldi	r24, 0x2D	; 45
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	9f e3       	ldi	r25, 0x3F	; 63
    188a:	a2 e0       	ldi	r26, 0x02	; 2
    188c:	81 50       	subi	r24, 0x01	; 1
    188e:	90 40       	sbci	r25, 0x00	; 0
    1890:	a0 40       	sbci	r26, 0x00	; 0
    1892:	e1 f7       	brne	.-8      	; 0x188c <_Z7pathto3v+0x26a>
    1894:	00 c0       	rjmp	.+0      	; 0x1896 <_Z7pathto3v+0x274>
    1896:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	9f e3       	ldi	r25, 0x3F	; 63
    18a4:	a2 e0       	ldi	r26, 0x02	; 2
    18a6:	81 50       	subi	r24, 0x01	; 1
    18a8:	90 40       	sbci	r25, 0x00	; 0
    18aa:	a0 40       	sbci	r26, 0x00	; 0
    18ac:	e1 f7       	brne	.-8      	; 0x18a6 <_Z7pathto3v+0x284>
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <_Z7pathto3v+0x28e>
    18b0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    18b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f e3       	ldi	r25, 0x3F	; 63
    18ba:	a2 e0       	ldi	r26, 0x02	; 2
    18bc:	81 50       	subi	r24, 0x01	; 1
    18be:	90 40       	sbci	r25, 0x00	; 0
    18c0:	a0 40       	sbci	r26, 0x00	; 0
    18c2:	e1 f7       	brne	.-8      	; 0x18bc <_Z7pathto3v+0x29a>
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <_Z7pathto3v+0x2a4>
    18c6:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    18c8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
			
			
			reset_count();									//call count reset function to reset it to 0
    18cc:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    18d0:	21 97       	sbiw	r28, 0x01	; 1
}
}

void pathto3()
{
	for( int i =0; i<9;i++){
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <_Z7pathto3v+0x2b4>
    18d4:	ae ce       	rjmp	.-676    	; 0x1632 <_Z7pathto3v+0x10>
			
			
			reset_count();									//call count reset function to reset it to 0
		}
	}
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	08 95       	ret

000018e0 <_Z7pathto4v>:

void pathto4()
{
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cb e0       	ldi	r28, 0x0B	; 11
    18ea:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==10){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][3] + 4 ; 
    18ec:	06 e0       	ldi	r16, 0x06	; 6
    18ee:	12 e0       	ldi	r17, 0x02	; 2
}

void pathto4()
{
	for( int i =0; i<11;i++){
		lcd_print(1,1,count,3);
    18f0:	40 91 3b 02 	lds	r20, 0x023B
    18f4:	50 91 3c 02 	lds	r21, 0x023C
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	23 e0       	ldi	r18, 0x03	; 3
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    1904:	80 91 3b 02 	lds	r24, 0x023B
    1908:	90 91 3c 02 	lds	r25, 0x023C
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	19 f4       	brne	.+6      	; 0x1916 <_Z7pathto4v+0x36>
			stop();
    1910:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    1914:	78 c1       	rjmp	.+752    	; 0x1c06 <_Z7pathto4v+0x326>
		}
		else if(count==1){
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	91 05       	cpc	r25, r1
    191a:	01 f5       	brne	.+64     	; 0x195c <_Z7pathto4v+0x7c>
			rotation_using_blackline_left();
    191c:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z29rotation_using_blackline_leftv>
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	9f e3       	ldi	r25, 0x3F	; 63
    1924:	a2 e0       	ldi	r26, 0x02	; 2
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	90 40       	sbci	r25, 0x00	; 0
    192a:	a0 40       	sbci	r26, 0x00	; 0
    192c:	e1 f7       	brne	.-8      	; 0x1926 <_Z7pathto4v+0x46>
    192e:	00 c0       	rjmp	.+0      	; 0x1930 <_Z7pathto4v+0x50>
    1930:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1932:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    1936:	80 91 3b 02 	lds	r24, 0x023B
    193a:	90 91 3c 02 	lds	r25, 0x023C
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	90 93 3c 02 	sts	0x023C, r25
    1944:	80 93 3b 02 	sts	0x023B, r24
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	9f e3       	ldi	r25, 0x3F	; 63
    194c:	a2 e0       	ldi	r26, 0x02	; 2
    194e:	81 50       	subi	r24, 0x01	; 1
    1950:	90 40       	sbci	r25, 0x00	; 0
    1952:	a0 40       	sbci	r26, 0x00	; 0
    1954:	e1 f7       	brne	.-8      	; 0x194e <_Z7pathto4v+0x6e>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <_Z7pathto4v+0x78>
    1958:	00 00       	nop
    195a:	52 c1       	rjmp	.+676    	; 0x1c00 <_Z7pathto4v+0x320>
			_delay_ms(50);
			
		}
		else if(count==2){
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	91 05       	cpc	r25, r1
    1960:	a9 f4       	brne	.+42     	; 0x198c <_Z7pathto4v+0xac>
			forward_from_node();
    1962:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	9f e3       	ldi	r25, 0x3F	; 63
    196a:	a2 e0       	ldi	r26, 0x02	; 2
    196c:	81 50       	subi	r24, 0x01	; 1
    196e:	90 40       	sbci	r25, 0x00	; 0
    1970:	a0 40       	sbci	r26, 0x00	; 0
    1972:	e1 f7       	brne	.-8      	; 0x196c <_Z7pathto4v+0x8c>
    1974:	00 c0       	rjmp	.+0      	; 0x1976 <_Z7pathto4v+0x96>
    1976:	00 00       	nop
			_delay_ms(50);
			++count;
    1978:	80 91 3b 02 	lds	r24, 0x023B
    197c:	90 91 3c 02 	lds	r25, 0x023C
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	90 93 3c 02 	sts	0x023C, r25
    1986:	80 93 3b 02 	sts	0x023B, r24
    198a:	3a c1       	rjmp	.+628    	; 0x1c00 <_Z7pathto4v+0x320>
			
		}
		else if(count==3){
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	91 05       	cpc	r25, r1
    1990:	11 f5       	brne	.+68     	; 0x19d6 <_Z7pathto4v+0xf6>
			
			rotation_using_blackline_newright();
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	9f e3       	ldi	r25, 0x3F	; 63
    199e:	a2 e0       	ldi	r26, 0x02	; 2
    19a0:	81 50       	subi	r24, 0x01	; 1
    19a2:	90 40       	sbci	r25, 0x00	; 0
    19a4:	a0 40       	sbci	r26, 0x00	; 0
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <_Z7pathto4v+0xc0>
    19a8:	00 c0       	rjmp	.+0      	; 0x19aa <_Z7pathto4v+0xca>
    19aa:	00 00       	nop
			_delay_ms(50);
			forward_black();
    19ac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f e3       	ldi	r25, 0x3F	; 63
    19b4:	a2 e0       	ldi	r26, 0x02	; 2
    19b6:	81 50       	subi	r24, 0x01	; 1
    19b8:	90 40       	sbci	r25, 0x00	; 0
    19ba:	a0 40       	sbci	r26, 0x00	; 0
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <_Z7pathto4v+0xd6>
    19be:	00 c0       	rjmp	.+0      	; 0x19c0 <_Z7pathto4v+0xe0>
    19c0:	00 00       	nop
			_delay_ms(50);
			++count;
    19c2:	80 91 3b 02 	lds	r24, 0x023B
    19c6:	90 91 3c 02 	lds	r25, 0x023C
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	90 93 3c 02 	sts	0x023C, r25
    19d0:	80 93 3b 02 	sts	0x023B, r24
    19d4:	15 c1       	rjmp	.+554    	; 0x1c00 <_Z7pathto4v+0x320>
			
		}
		else if (count ==4)
    19d6:	84 30       	cpi	r24, 0x04	; 4
    19d8:	91 05       	cpc	r25, r1
    19da:	a9 f4       	brne	.+42     	; 0x1a06 <_Z7pathto4v+0x126>
		{
			forward_from_node();
    19dc:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	9f e3       	ldi	r25, 0x3F	; 63
    19e4:	a2 e0       	ldi	r26, 0x02	; 2
    19e6:	81 50       	subi	r24, 0x01	; 1
    19e8:	90 40       	sbci	r25, 0x00	; 0
    19ea:	a0 40       	sbci	r26, 0x00	; 0
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <_Z7pathto4v+0x106>
    19ee:	00 c0       	rjmp	.+0      	; 0x19f0 <_Z7pathto4v+0x110>
    19f0:	00 00       	nop
			_delay_ms(50);
			++count;
    19f2:	80 91 3b 02 	lds	r24, 0x023B
    19f6:	90 91 3c 02 	lds	r25, 0x023C
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	90 93 3c 02 	sts	0x023C, r25
    1a00:	80 93 3b 02 	sts	0x023B, r24
    1a04:	fd c0       	rjmp	.+506    	; 0x1c00 <_Z7pathto4v+0x320>
		}
		else if(count==5){
    1a06:	85 30       	cpi	r24, 0x05	; 5
    1a08:	91 05       	cpc	r25, r1
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <_Z7pathto4v+0x12e>
    1a0c:	46 c0       	rjmp	.+140    	; 0x1a9a <_Z7pathto4v+0x1ba>
			data = info_table[0][3] ;  			 
    1a0e:	d8 01       	movw	r26, r16
    1a10:	8c 91       	ld	r24, X
    1a12:	80 93 3a 02 	sts	0x023A, r24
			velocity(60,120);
    1a16:	8c e3       	ldi	r24, 0x3C	; 60
    1a18:	68 e7       	ldi	r22, 0x78	; 120
    1a1a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f ef       	ldi	r25, 0xFF	; 255
    1a2a:	a0 ee       	ldi	r26, 0xE0	; 224
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	90 40       	sbci	r25, 0x00	; 0
    1a30:	a0 40       	sbci	r26, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <_Z7pathto4v+0x14c>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <_Z7pathto4v+0x156>
    1a36:	00 00       	nop
			_delay_ms(5000);
			pickup();	
    1a38:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			left_degrees(45);
    1a3c:	8d e2       	ldi	r24, 0x2D	; 45
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	9f e3       	ldi	r25, 0x3F	; 63
    1a48:	a2 e0       	ldi	r26, 0x02	; 2
    1a4a:	81 50       	subi	r24, 0x01	; 1
    1a4c:	90 40       	sbci	r25, 0x00	; 0
    1a4e:	a0 40       	sbci	r26, 0x00	; 0
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <_Z7pathto4v+0x16a>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <_Z7pathto4v+0x174>
    1a54:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	9f e3       	ldi	r25, 0x3F	; 63
    1a62:	a2 e0       	ldi	r26, 0x02	; 2
    1a64:	81 50       	subi	r24, 0x01	; 1
    1a66:	90 40       	sbci	r25, 0x00	; 0
    1a68:	a0 40       	sbci	r26, 0x00	; 0
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <_Z7pathto4v+0x184>
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <_Z7pathto4v+0x18e>
    1a6e:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1a70:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	9f e3       	ldi	r25, 0x3F	; 63
    1a78:	a2 e0       	ldi	r26, 0x02	; 2
    1a7a:	81 50       	subi	r24, 0x01	; 1
    1a7c:	90 40       	sbci	r25, 0x00	; 0
    1a7e:	a0 40       	sbci	r26, 0x00	; 0
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <_Z7pathto4v+0x19a>
    1a82:	00 c0       	rjmp	.+0      	; 0x1a84 <_Z7pathto4v+0x1a4>
    1a84:	00 00       	nop
			_delay_ms(50);
			++count;
    1a86:	80 91 3b 02 	lds	r24, 0x023B
    1a8a:	90 91 3c 02 	lds	r25, 0x023C
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	90 93 3c 02 	sts	0x023C, r25
    1a94:	80 93 3b 02 	sts	0x023B, r24
    1a98:	b3 c0       	rjmp	.+358    	; 0x1c00 <_Z7pathto4v+0x320>
			
		}
		else if(count ==6)
    1a9a:	86 30       	cpi	r24, 0x06	; 6
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	61 f4       	brne	.+24     	; 0x1ab8 <_Z7pathto4v+0x1d8>
		{
			forward_from_node();
    1aa0:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	9f e3       	ldi	r25, 0x3F	; 63
    1aa8:	a2 e0       	ldi	r26, 0x02	; 2
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	90 40       	sbci	r25, 0x00	; 0
    1aae:	a0 40       	sbci	r26, 0x00	; 0
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <_Z7pathto4v+0x1ca>
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <_Z7pathto4v+0x1d4>
    1ab4:	00 00       	nop
    1ab6:	a4 c0       	rjmp	.+328    	; 0x1c00 <_Z7pathto4v+0x320>
			_delay_ms(50);
		}
		else if(count==7){
    1ab8:	87 30       	cpi	r24, 0x07	; 7
    1aba:	91 05       	cpc	r25, r1
    1abc:	31 f5       	brne	.+76     	; 0x1b0a <_Z7pathto4v+0x22a>
			velocity(60,120);
    1abe:	8c e3       	ldi	r24, 0x3C	; 60
    1ac0:	68 e7       	ldi	r22, 0x78	; 120
    1ac2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	9f e3       	ldi	r25, 0x3F	; 63
    1ad2:	a2 e0       	ldi	r26, 0x02	; 2
    1ad4:	81 50       	subi	r24, 0x01	; 1
    1ad6:	90 40       	sbci	r25, 0x00	; 0
    1ad8:	a0 40       	sbci	r26, 0x00	; 0
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <_Z7pathto4v+0x1f4>
    1adc:	00 c0       	rjmp	.+0      	; 0x1ade <_Z7pathto4v+0x1fe>
    1ade:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1ae0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	9f e3       	ldi	r25, 0x3F	; 63
    1ae8:	a2 e0       	ldi	r26, 0x02	; 2
    1aea:	81 50       	subi	r24, 0x01	; 1
    1aec:	90 40       	sbci	r25, 0x00	; 0
    1aee:	a0 40       	sbci	r26, 0x00	; 0
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <_Z7pathto4v+0x20a>
    1af2:	00 c0       	rjmp	.+0      	; 0x1af4 <_Z7pathto4v+0x214>
    1af4:	00 00       	nop
			_delay_ms(50);
			++count;
    1af6:	80 91 3b 02 	lds	r24, 0x023B
    1afa:	90 91 3c 02 	lds	r25, 0x023C
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	90 93 3c 02 	sts	0x023C, r25
    1b04:	80 93 3b 02 	sts	0x023B, r24
    1b08:	7b c0       	rjmp	.+246    	; 0x1c00 <_Z7pathto4v+0x320>
			
		}
		else if(count==8){
    1b0a:	88 30       	cpi	r24, 0x08	; 8
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	a9 f4       	brne	.+42     	; 0x1b3a <_Z7pathto4v+0x25a>
			forward_from_node();
    1b10:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f e3       	ldi	r25, 0x3F	; 63
    1b18:	a2 e0       	ldi	r26, 0x02	; 2
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	90 40       	sbci	r25, 0x00	; 0
    1b1e:	a0 40       	sbci	r26, 0x00	; 0
    1b20:	e1 f7       	brne	.-8      	; 0x1b1a <_Z7pathto4v+0x23a>
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <_Z7pathto4v+0x244>
    1b24:	00 00       	nop
			_delay_ms(50);
			
			++count;
    1b26:	80 91 3b 02 	lds	r24, 0x023B
    1b2a:	90 91 3c 02 	lds	r25, 0x023C
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	90 93 3c 02 	sts	0x023C, r25
    1b34:	80 93 3b 02 	sts	0x023B, r24
    1b38:	63 c0       	rjmp	.+198    	; 0x1c00 <_Z7pathto4v+0x320>
			
		}
		else if(count==9){
    1b3a:	89 30       	cpi	r24, 0x09	; 9
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	11 f5       	brne	.+68     	; 0x1b84 <_Z7pathto4v+0x2a4>
			rotation_using_blackline_right();
    1b40:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f e3       	ldi	r25, 0x3F	; 63
    1b48:	a2 e0       	ldi	r26, 0x02	; 2
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	90 40       	sbci	r25, 0x00	; 0
    1b4e:	a0 40       	sbci	r26, 0x00	; 0
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <_Z7pathto4v+0x26a>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <_Z7pathto4v+0x274>
    1b54:	00 00       	nop
			_delay_ms(50);
			turn_right();
    1b56:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z10turn_rightv>
    1b5a:	8f ef       	ldi	r24, 0xFF	; 255
    1b5c:	9f e3       	ldi	r25, 0x3F	; 63
    1b5e:	a2 e0       	ldi	r26, 0x02	; 2
    1b60:	81 50       	subi	r24, 0x01	; 1
    1b62:	90 40       	sbci	r25, 0x00	; 0
    1b64:	a0 40       	sbci	r26, 0x00	; 0
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <_Z7pathto4v+0x280>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <_Z7pathto4v+0x28a>
    1b6a:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1b6c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    1b70:	80 91 3b 02 	lds	r24, 0x023B
    1b74:	90 91 3c 02 	lds	r25, 0x023C
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	90 93 3c 02 	sts	0x023C, r25
    1b7e:	80 93 3b 02 	sts	0x023B, r24
    1b82:	3e c0       	rjmp	.+124    	; 0x1c00 <_Z7pathto4v+0x320>
			
		}
		else if(count==10){
    1b84:	8a 30       	cpi	r24, 0x0A	; 10
    1b86:	91 05       	cpc	r25, r1
    1b88:	d9 f5       	brne	.+118    	; 0x1c00 <_Z7pathto4v+0x320>
			forward_from_node();
    1b8a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	9f e3       	ldi	r25, 0x3F	; 63
    1b92:	a2 e0       	ldi	r26, 0x02	; 2
    1b94:	81 50       	subi	r24, 0x01	; 1
    1b96:	90 40       	sbci	r25, 0x00	; 0
    1b98:	a0 40       	sbci	r26, 0x00	; 0
    1b9a:	e1 f7       	brne	.-8      	; 0x1b94 <_Z7pathto4v+0x2b4>
    1b9c:	00 c0       	rjmp	.+0      	; 0x1b9e <_Z7pathto4v+0x2be>
    1b9e:	00 00       	nop
			_delay_ms(50);
			drop();
    1ba0:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][3] + 4 ; 
    1ba4:	d8 01       	movw	r26, r16
    1ba6:	8c 91       	ld	r24, X
    1ba8:	8c 5f       	subi	r24, 0xFC	; 252
    1baa:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    1bae:	8d e2       	ldi	r24, 0x2D	; 45
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
    1bb8:	9f e3       	ldi	r25, 0x3F	; 63
    1bba:	a2 e0       	ldi	r26, 0x02	; 2
    1bbc:	81 50       	subi	r24, 0x01	; 1
    1bbe:	90 40       	sbci	r25, 0x00	; 0
    1bc0:	a0 40       	sbci	r26, 0x00	; 0
    1bc2:	e1 f7       	brne	.-8      	; 0x1bbc <_Z7pathto4v+0x2dc>
    1bc4:	00 c0       	rjmp	.+0      	; 0x1bc6 <_Z7pathto4v+0x2e6>
    1bc6:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f e3       	ldi	r25, 0x3F	; 63
    1bd4:	a2 e0       	ldi	r26, 0x02	; 2
    1bd6:	81 50       	subi	r24, 0x01	; 1
    1bd8:	90 40       	sbci	r25, 0x00	; 0
    1bda:	a0 40       	sbci	r26, 0x00	; 0
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <_Z7pathto4v+0x2f6>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <_Z7pathto4v+0x300>
    1be0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1be2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	9f e3       	ldi	r25, 0x3F	; 63
    1bea:	a2 e0       	ldi	r26, 0x02	; 2
    1bec:	81 50       	subi	r24, 0x01	; 1
    1bee:	90 40       	sbci	r25, 0x00	; 0
    1bf0:	a0 40       	sbci	r26, 0x00	; 0
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <_Z7pathto4v+0x30c>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <_Z7pathto4v+0x316>
    1bf6:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    1bf8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
			
			
			reset_count();									//call count reset function to reset it to 0
    1bfc:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    1c00:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void pathto4()
{
	for( int i =0; i<11;i++){
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <_Z7pathto4v+0x326>
    1c04:	75 ce       	rjmp	.-790    	; 0x18f0 <_Z7pathto4v+0x10>
			
			reset_count();									//call count reset function to reset it to 0
		}
	}
	
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <_Z7pathto5v>:

void pathto5(){
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cc e0       	ldi	r28, 0x0C	; 12
    1c1a:	d0 e0       	ldi	r29, 0x00	; 0
			++count;
			
		}
		else if(count == 11)
		{	drop();
			data = info_table[0][4] + 4 ; 
    1c1c:	08 e0       	ldi	r16, 0x08	; 8
    1c1e:	12 e0       	ldi	r17, 0x02	; 2
	
}

void pathto5(){
	for( int i =0; i<12;i++){
		lcd_print(1,1,count,3);
    1c20:	40 91 3b 02 	lds	r20, 0x023B
    1c24:	50 91 3c 02 	lds	r21, 0x023C
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	23 e0       	ldi	r18, 0x03	; 3
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		if(count==0){
    1c34:	80 91 3b 02 	lds	r24, 0x023B
    1c38:	90 91 3c 02 	lds	r25, 0x023C
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	19 f4       	brne	.+6      	; 0x1c46 <_Z7pathto5v+0x36>
			stop();
    1c40:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    1c44:	82 c1       	rjmp	.+772    	; 0x1f4a <_Z7pathto5v+0x33a>
		}
		else if(count==1){			
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	a9 f4       	brne	.+42     	; 0x1c76 <_Z7pathto5v+0x66>
			forward_from_node();
    1c4c:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	9f e3       	ldi	r25, 0x3F	; 63
    1c54:	a2 e0       	ldi	r26, 0x02	; 2
    1c56:	81 50       	subi	r24, 0x01	; 1
    1c58:	90 40       	sbci	r25, 0x00	; 0
    1c5a:	a0 40       	sbci	r26, 0x00	; 0
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <_Z7pathto5v+0x46>
    1c5e:	00 c0       	rjmp	.+0      	; 0x1c60 <_Z7pathto5v+0x50>
    1c60:	00 00       	nop
			_delay_ms(50);
			++count;
    1c62:	80 91 3b 02 	lds	r24, 0x023B
    1c66:	90 91 3c 02 	lds	r25, 0x023C
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	90 93 3c 02 	sts	0x023C, r25
    1c70:	80 93 3b 02 	sts	0x023B, r24
    1c74:	67 c1       	rjmp	.+718    	; 0x1f44 <_Z7pathto5v+0x334>
			
		}
		else if(count==2){
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	91 05       	cpc	r25, r1
    1c7a:	a9 f4       	brne	.+42     	; 0x1ca6 <_Z7pathto5v+0x96>
			forward_from_node();
    1c7c:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	9f e3       	ldi	r25, 0x3F	; 63
    1c84:	a2 e0       	ldi	r26, 0x02	; 2
    1c86:	81 50       	subi	r24, 0x01	; 1
    1c88:	90 40       	sbci	r25, 0x00	; 0
    1c8a:	a0 40       	sbci	r26, 0x00	; 0
    1c8c:	e1 f7       	brne	.-8      	; 0x1c86 <_Z7pathto5v+0x76>
    1c8e:	00 c0       	rjmp	.+0      	; 0x1c90 <_Z7pathto5v+0x80>
    1c90:	00 00       	nop
			_delay_ms(50);
			++count;
    1c92:	80 91 3b 02 	lds	r24, 0x023B
    1c96:	90 91 3c 02 	lds	r25, 0x023C
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	90 93 3c 02 	sts	0x023C, r25
    1ca0:	80 93 3b 02 	sts	0x023B, r24
    1ca4:	4f c1       	rjmp	.+670    	; 0x1f44 <_Z7pathto5v+0x334>
			
		}
		else if(count==3){
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	c9 f4       	brne	.+50     	; 0x1cde <_Z7pathto5v+0xce>
			
			rotation_using_blackline_newleft();
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	9f e3       	ldi	r25, 0x3F	; 63
    1cb8:	a2 e0       	ldi	r26, 0x02	; 2
    1cba:	81 50       	subi	r24, 0x01	; 1
    1cbc:	90 40       	sbci	r25, 0x00	; 0
    1cbe:	a0 40       	sbci	r26, 0x00	; 0
    1cc0:	e1 f7       	brne	.-8      	; 0x1cba <_Z7pathto5v+0xaa>
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <_Z7pathto5v+0xb4>
    1cc4:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1cc6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    1cca:	80 91 3b 02 	lds	r24, 0x023B
    1cce:	90 91 3c 02 	lds	r25, 0x023C
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	90 93 3c 02 	sts	0x023C, r25
    1cd8:	80 93 3b 02 	sts	0x023B, r24
    1cdc:	33 c1       	rjmp	.+614    	; 0x1f44 <_Z7pathto5v+0x334>
		}
		else if(count==4){
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	a9 f4       	brne	.+42     	; 0x1d0e <_Z7pathto5v+0xfe>
			forward_from_node();
    1ce4:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	9f e3       	ldi	r25, 0x3F	; 63
    1cec:	a2 e0       	ldi	r26, 0x02	; 2
    1cee:	81 50       	subi	r24, 0x01	; 1
    1cf0:	90 40       	sbci	r25, 0x00	; 0
    1cf2:	a0 40       	sbci	r26, 0x00	; 0
    1cf4:	e1 f7       	brne	.-8      	; 0x1cee <_Z7pathto5v+0xde>
    1cf6:	00 c0       	rjmp	.+0      	; 0x1cf8 <_Z7pathto5v+0xe8>
    1cf8:	00 00       	nop
			_delay_ms(50);
			++count;
    1cfa:	80 91 3b 02 	lds	r24, 0x023B
    1cfe:	90 91 3c 02 	lds	r25, 0x023C
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	90 93 3c 02 	sts	0x023C, r25
    1d08:	80 93 3b 02 	sts	0x023B, r24
    1d0c:	1b c1       	rjmp	.+566    	; 0x1f44 <_Z7pathto5v+0x334>
			
		}
		else if(count==5){
    1d0e:	85 30       	cpi	r24, 0x05	; 5
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <_Z7pathto5v+0x106>
    1d14:	46 c0       	rjmp	.+140    	; 0x1da2 <_Z7pathto5v+0x192>
			
			data = info_table[0][4];   			   
    1d16:	d8 01       	movw	r26, r16
    1d18:	8c 91       	ld	r24, X
    1d1a:	80 93 3a 02 	sts	0x023A, r24
			velocity(120,60);
    1d1e:	88 e7       	ldi	r24, 0x78	; 120
    1d20:	6c e3       	ldi	r22, 0x3C	; 60
    1d22:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	a0 ee       	ldi	r26, 0xE0	; 224
    1d34:	81 50       	subi	r24, 0x01	; 1
    1d36:	90 40       	sbci	r25, 0x00	; 0
    1d38:	a0 40       	sbci	r26, 0x00	; 0
    1d3a:	e1 f7       	brne	.-8      	; 0x1d34 <_Z7pathto5v+0x124>
    1d3c:	00 c0       	rjmp	.+0      	; 0x1d3e <_Z7pathto5v+0x12e>
    1d3e:	00 00       	nop
			_delay_ms(5000);
				pickup();	
    1d40:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			right_degrees(45);
    1d44:	8d e2       	ldi	r24, 0x2D	; 45
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f e3       	ldi	r25, 0x3F	; 63
    1d50:	a2 e0       	ldi	r26, 0x02	; 2
    1d52:	81 50       	subi	r24, 0x01	; 1
    1d54:	90 40       	sbci	r25, 0x00	; 0
    1d56:	a0 40       	sbci	r26, 0x00	; 0
    1d58:	e1 f7       	brne	.-8      	; 0x1d52 <_Z7pathto5v+0x142>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <_Z7pathto5v+0x14c>
    1d5c:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_right();
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z24rotation_blackline_rightj>
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	9f e3       	ldi	r25, 0x3F	; 63
    1d6a:	a2 e0       	ldi	r26, 0x02	; 2
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	90 40       	sbci	r25, 0x00	; 0
    1d70:	a0 40       	sbci	r26, 0x00	; 0
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <_Z7pathto5v+0x15c>
    1d74:	00 c0       	rjmp	.+0      	; 0x1d76 <_Z7pathto5v+0x166>
    1d76:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1d78:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	9f e3       	ldi	r25, 0x3F	; 63
    1d80:	a2 e0       	ldi	r26, 0x02	; 2
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	90 40       	sbci	r25, 0x00	; 0
    1d86:	a0 40       	sbci	r26, 0x00	; 0
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <_Z7pathto5v+0x172>
    1d8a:	00 c0       	rjmp	.+0      	; 0x1d8c <_Z7pathto5v+0x17c>
    1d8c:	00 00       	nop
			_delay_ms(50);
			++count;
    1d8e:	80 91 3b 02 	lds	r24, 0x023B
    1d92:	90 91 3c 02 	lds	r25, 0x023C
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	90 93 3c 02 	sts	0x023C, r25
    1d9c:	80 93 3b 02 	sts	0x023B, r24
    1da0:	d1 c0       	rjmp	.+418    	; 0x1f44 <_Z7pathto5v+0x334>
		}
		else if(count==6){
    1da2:	86 30       	cpi	r24, 0x06	; 6
    1da4:	91 05       	cpc	r25, r1
    1da6:	a9 f4       	brne	.+42     	; 0x1dd2 <_Z7pathto5v+0x1c2>
			forward_from_node();
    1da8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1dac:	8f ef       	ldi	r24, 0xFF	; 255
    1dae:	9f e3       	ldi	r25, 0x3F	; 63
    1db0:	a2 e0       	ldi	r26, 0x02	; 2
    1db2:	81 50       	subi	r24, 0x01	; 1
    1db4:	90 40       	sbci	r25, 0x00	; 0
    1db6:	a0 40       	sbci	r26, 0x00	; 0
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <_Z7pathto5v+0x1a2>
    1dba:	00 c0       	rjmp	.+0      	; 0x1dbc <_Z7pathto5v+0x1ac>
    1dbc:	00 00       	nop
			_delay_ms(50);
			++count;
    1dbe:	80 91 3b 02 	lds	r24, 0x023B
    1dc2:	90 91 3c 02 	lds	r25, 0x023C
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	90 93 3c 02 	sts	0x023C, r25
    1dcc:	80 93 3b 02 	sts	0x023B, r24
    1dd0:	b9 c0       	rjmp	.+370    	; 0x1f44 <_Z7pathto5v+0x334>
		}
		else if(count==7){
    1dd2:	87 30       	cpi	r24, 0x07	; 7
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	31 f5       	brne	.+76     	; 0x1e24 <_Z7pathto5v+0x214>
			velocity(120,60);
    1dd8:	88 e7       	ldi	r24, 0x78	; 120
    1dda:	6c e3       	ldi	r22, 0x3C	; 60
    1ddc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	9f e3       	ldi	r25, 0x3F	; 63
    1dec:	a2 e0       	ldi	r26, 0x02	; 2
    1dee:	81 50       	subi	r24, 0x01	; 1
    1df0:	90 40       	sbci	r25, 0x00	; 0
    1df2:	a0 40       	sbci	r26, 0x00	; 0
    1df4:	e1 f7       	brne	.-8      	; 0x1dee <_Z7pathto5v+0x1de>
    1df6:	00 c0       	rjmp	.+0      	; 0x1df8 <_Z7pathto5v+0x1e8>
    1df8:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1dfa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	9f e3       	ldi	r25, 0x3F	; 63
    1e02:	a2 e0       	ldi	r26, 0x02	; 2
    1e04:	81 50       	subi	r24, 0x01	; 1
    1e06:	90 40       	sbci	r25, 0x00	; 0
    1e08:	a0 40       	sbci	r26, 0x00	; 0
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <_Z7pathto5v+0x1f4>
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <_Z7pathto5v+0x1fe>
    1e0e:	00 00       	nop
			_delay_ms(50);
			++count;
    1e10:	80 91 3b 02 	lds	r24, 0x023B
    1e14:	90 91 3c 02 	lds	r25, 0x023C
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	90 93 3c 02 	sts	0x023C, r25
    1e1e:	80 93 3b 02 	sts	0x023B, r24
    1e22:	90 c0       	rjmp	.+288    	; 0x1f44 <_Z7pathto5v+0x334>
			
		}
		else if(count==8){
    1e24:	88 30       	cpi	r24, 0x08	; 8
    1e26:	91 05       	cpc	r25, r1
    1e28:	a9 f4       	brne	.+42     	; 0x1e54 <_Z7pathto5v+0x244>
			forward_from_node();
    1e2a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	9f e3       	ldi	r25, 0x3F	; 63
    1e32:	a2 e0       	ldi	r26, 0x02	; 2
    1e34:	81 50       	subi	r24, 0x01	; 1
    1e36:	90 40       	sbci	r25, 0x00	; 0
    1e38:	a0 40       	sbci	r26, 0x00	; 0
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <_Z7pathto5v+0x224>
    1e3c:	00 c0       	rjmp	.+0      	; 0x1e3e <_Z7pathto5v+0x22e>
    1e3e:	00 00       	nop
			_delay_ms(50);
			++count;
    1e40:	80 91 3b 02 	lds	r24, 0x023B
    1e44:	90 91 3c 02 	lds	r25, 0x023C
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	90 93 3c 02 	sts	0x023C, r25
    1e4e:	80 93 3b 02 	sts	0x023B, r24
    1e52:	78 c0       	rjmp	.+240    	; 0x1f44 <_Z7pathto5v+0x334>
											//call count reset function to reset it to 0
		}
		else if(count==9)
    1e54:	89 30       	cpi	r24, 0x09	; 9
    1e56:	91 05       	cpc	r25, r1
    1e58:	a9 f4       	brne	.+42     	; 0x1e84 <_Z7pathto5v+0x274>
		{
			forward_from_node();
    1e5a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	9f e3       	ldi	r25, 0x3F	; 63
    1e62:	a2 e0       	ldi	r26, 0x02	; 2
    1e64:	81 50       	subi	r24, 0x01	; 1
    1e66:	90 40       	sbci	r25, 0x00	; 0
    1e68:	a0 40       	sbci	r26, 0x00	; 0
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <_Z7pathto5v+0x254>
    1e6c:	00 c0       	rjmp	.+0      	; 0x1e6e <_Z7pathto5v+0x25e>
    1e6e:	00 00       	nop
			_delay_ms(50);
			++count;
    1e70:	80 91 3b 02 	lds	r24, 0x023B
    1e74:	90 91 3c 02 	lds	r25, 0x023C
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	90 93 3c 02 	sts	0x023C, r25
    1e7e:	80 93 3b 02 	sts	0x023B, r24
    1e82:	60 c0       	rjmp	.+192    	; 0x1f44 <_Z7pathto5v+0x334>
		}
		else if(count == 10)
    1e84:	8a 30       	cpi	r24, 0x0A	; 10
    1e86:	91 05       	cpc	r25, r1
    1e88:	a9 f4       	brne	.+42     	; 0x1eb4 <_Z7pathto5v+0x2a4>
		{
			forward_from_node();
    1e8a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	9f e3       	ldi	r25, 0x3F	; 63
    1e92:	a2 e0       	ldi	r26, 0x02	; 2
    1e94:	81 50       	subi	r24, 0x01	; 1
    1e96:	90 40       	sbci	r25, 0x00	; 0
    1e98:	a0 40       	sbci	r26, 0x00	; 0
    1e9a:	e1 f7       	brne	.-8      	; 0x1e94 <_Z7pathto5v+0x284>
    1e9c:	00 c0       	rjmp	.+0      	; 0x1e9e <_Z7pathto5v+0x28e>
    1e9e:	00 00       	nop
			_delay_ms(50);
			++count;
    1ea0:	80 91 3b 02 	lds	r24, 0x023B
    1ea4:	90 91 3c 02 	lds	r25, 0x023C
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	90 93 3c 02 	sts	0x023C, r25
    1eae:	80 93 3b 02 	sts	0x023B, r24
    1eb2:	48 c0       	rjmp	.+144    	; 0x1f44 <_Z7pathto5v+0x334>
			
		}
		else if(count == 11)
    1eb4:	8b 30       	cpi	r24, 0x0B	; 11
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <_Z7pathto5v+0x2ac>
    1eba:	44 c0       	rjmp	.+136    	; 0x1f44 <_Z7pathto5v+0x334>
		{	drop();
    1ebc:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][4] + 4 ; 
    1ec0:	d8 01       	movw	r26, r16
    1ec2:	8c 91       	ld	r24, X
    1ec4:	8c 5f       	subi	r24, 0xFC	; 252
    1ec6:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    1eca:	8d e2       	ldi	r24, 0x2D	; 45
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	9f e3       	ldi	r25, 0x3F	; 63
    1ed6:	a2 e0       	ldi	r26, 0x02	; 2
    1ed8:	81 50       	subi	r24, 0x01	; 1
    1eda:	90 40       	sbci	r25, 0x00	; 0
    1edc:	a0 40       	sbci	r26, 0x00	; 0
    1ede:	e1 f7       	brne	.-8      	; 0x1ed8 <_Z7pathto5v+0x2c8>
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <_Z7pathto5v+0x2d2>
    1ee2:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	9f e3       	ldi	r25, 0x3F	; 63
    1ef0:	a2 e0       	ldi	r26, 0x02	; 2
    1ef2:	81 50       	subi	r24, 0x01	; 1
    1ef4:	90 40       	sbci	r25, 0x00	; 0
    1ef6:	a0 40       	sbci	r26, 0x00	; 0
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <_Z7pathto5v+0x2e2>
    1efa:	00 c0       	rjmp	.+0      	; 0x1efc <_Z7pathto5v+0x2ec>
    1efc:	00 00       	nop
			_delay_ms(50);
			forward_black();
    1efe:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	9f e3       	ldi	r25, 0x3F	; 63
    1f06:	a2 e0       	ldi	r26, 0x02	; 2
    1f08:	81 50       	subi	r24, 0x01	; 1
    1f0a:	90 40       	sbci	r25, 0x00	; 0
    1f0c:	a0 40       	sbci	r26, 0x00	; 0
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <_Z7pathto5v+0x2f8>
    1f10:	00 c0       	rjmp	.+0      	; 0x1f12 <_Z7pathto5v+0x302>
    1f12:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    1f14:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	9f e3       	ldi	r25, 0x3F	; 63
    1f1c:	a2 e0       	ldi	r26, 0x02	; 2
    1f1e:	81 50       	subi	r24, 0x01	; 1
    1f20:	90 40       	sbci	r25, 0x00	; 0
    1f22:	a0 40       	sbci	r26, 0x00	; 0
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <_Z7pathto5v+0x30e>
    1f26:	00 c0       	rjmp	.+0      	; 0x1f28 <_Z7pathto5v+0x318>
    1f28:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    1f2a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	9f e3       	ldi	r25, 0x3F	; 63
    1f32:	a2 e0       	ldi	r26, 0x02	; 2
    1f34:	81 50       	subi	r24, 0x01	; 1
    1f36:	90 40       	sbci	r25, 0x00	; 0
    1f38:	a0 40       	sbci	r26, 0x00	; 0
    1f3a:	e1 f7       	brne	.-8      	; 0x1f34 <_Z7pathto5v+0x324>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <_Z7pathto5v+0x32e>
    1f3e:	00 00       	nop
			_delay_ms(50);
			reset_count();
    1f40:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    1f44:	21 97       	sbiw	r28, 0x01	; 1
	}
	
}

void pathto5(){
	for( int i =0; i<12;i++){
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <_Z7pathto5v+0x33a>
    1f48:	6b ce       	rjmp	.-810    	; 0x1c20 <_Z7pathto5v+0x10>
			forward_from_node();
			_delay_ms(50);
			reset_count();
		}
	}
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <_Z7pathto6v>:

void pathto6()
{
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	ca e0       	ldi	r28, 0x0A	; 10
    1f5e:	d0 e0       	ldi	r29, 0x00	; 0
			++count;
			
		}
		else if(count == 9)
		{	drop();
			data = info_table[0][5] + 4 ; 
    1f60:	0a e0       	ldi	r16, 0x0A	; 10
    1f62:	12 e0       	ldi	r17, 0x02	; 2
}

void pathto6()
{
	for( int i =0; i<10;i++){
		lcd_print(1,1,count,3);
    1f64:	40 91 3b 02 	lds	r20, 0x023B
    1f68:	50 91 3c 02 	lds	r21, 0x023C
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	23 e0       	ldi	r18, 0x03	; 3
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    1f78:	80 91 3b 02 	lds	r24, 0x023B
    1f7c:	90 91 3c 02 	lds	r25, 0x023C
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	19 f4       	brne	.+6      	; 0x1f8a <_Z7pathto6v+0x36>
			stop();
    1f84:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    1f88:	52 c1       	rjmp	.+676    	; 0x222e <__stack+0x2f>
		}
		else if(count==1){
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	a9 f4       	brne	.+42     	; 0x1fba <_Z7pathto6v+0x66>
			forward_from_node();
    1f90:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f e3       	ldi	r25, 0x3F	; 63
    1f98:	a2 e0       	ldi	r26, 0x02	; 2
    1f9a:	81 50       	subi	r24, 0x01	; 1
    1f9c:	90 40       	sbci	r25, 0x00	; 0
    1f9e:	a0 40       	sbci	r26, 0x00	; 0
    1fa0:	e1 f7       	brne	.-8      	; 0x1f9a <_Z7pathto6v+0x46>
    1fa2:	00 c0       	rjmp	.+0      	; 0x1fa4 <_Z7pathto6v+0x50>
    1fa4:	00 00       	nop
			_delay_ms(50);
			++count;
    1fa6:	80 91 3b 02 	lds	r24, 0x023B
    1faa:	90 91 3c 02 	lds	r25, 0x023C
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	90 93 3c 02 	sts	0x023C, r25
    1fb4:	80 93 3b 02 	sts	0x023B, r24
    1fb8:	37 c1       	rjmp	.+622    	; 0x2228 <__stack+0x29>
			
		}
		else if(count==2){
    1fba:	82 30       	cpi	r24, 0x02	; 2
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	a9 f4       	brne	.+42     	; 0x1fea <_Z7pathto6v+0x96>
			forward_from_node();
    1fc0:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	9f e3       	ldi	r25, 0x3F	; 63
    1fc8:	a2 e0       	ldi	r26, 0x02	; 2
    1fca:	81 50       	subi	r24, 0x01	; 1
    1fcc:	90 40       	sbci	r25, 0x00	; 0
    1fce:	a0 40       	sbci	r26, 0x00	; 0
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <_Z7pathto6v+0x76>
    1fd2:	00 c0       	rjmp	.+0      	; 0x1fd4 <_Z7pathto6v+0x80>
    1fd4:	00 00       	nop
			_delay_ms(50);
			++count;
    1fd6:	80 91 3b 02 	lds	r24, 0x023B
    1fda:	90 91 3c 02 	lds	r25, 0x023C
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	90 93 3c 02 	sts	0x023C, r25
    1fe4:	80 93 3b 02 	sts	0x023B, r24
    1fe8:	1f c1       	rjmp	.+574    	; 0x2228 <__stack+0x29>
			
		}
		else if(count==3){
    1fea:	83 30       	cpi	r24, 0x03	; 3
    1fec:	91 05       	cpc	r25, r1
    1fee:	c9 f4       	brne	.+50     	; 0x2022 <_Z7pathto6v+0xce>
			
			rotation_using_blackline_newleft();
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	9f e3       	ldi	r25, 0x3F	; 63
    1ffc:	a2 e0       	ldi	r26, 0x02	; 2
    1ffe:	81 50       	subi	r24, 0x01	; 1
    2000:	90 40       	sbci	r25, 0x00	; 0
    2002:	a0 40       	sbci	r26, 0x00	; 0
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <_Z7pathto6v+0xaa>
    2006:	00 c0       	rjmp	.+0      	; 0x2008 <_Z7pathto6v+0xb4>
    2008:	00 00       	nop
			_delay_ms(50);
			forward_black();
    200a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    200e:	80 91 3b 02 	lds	r24, 0x023B
    2012:	90 91 3c 02 	lds	r25, 0x023C
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	90 93 3c 02 	sts	0x023C, r25
    201c:	80 93 3b 02 	sts	0x023B, r24
    2020:	03 c1       	rjmp	.+518    	; 0x2228 <__stack+0x29>
		}
	
		else if(count==4){
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	91 05       	cpc	r25, r1
    2026:	09 f0       	breq	.+2      	; 0x202a <_Z7pathto6v+0xd6>
    2028:	46 c0       	rjmp	.+140    	; 0x20b6 <_Z7pathto6v+0x162>
			
			data = info_table[0][5] ;  			   
    202a:	d8 01       	movw	r26, r16
    202c:	8c 91       	ld	r24, X
    202e:	80 93 3a 02 	sts	0x023A, r24
			velocity(120,60);
    2032:	88 e7       	ldi	r24, 0x78	; 120
    2034:	6c e3       	ldi	r22, 0x3C	; 60
    2036:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	a0 ee       	ldi	r26, 0xE0	; 224
    2048:	81 50       	subi	r24, 0x01	; 1
    204a:	90 40       	sbci	r25, 0x00	; 0
    204c:	a0 40       	sbci	r26, 0x00	; 0
    204e:	e1 f7       	brne	.-8      	; 0x2048 <_Z7pathto6v+0xf4>
    2050:	00 c0       	rjmp	.+0      	; 0x2052 <_Z7pathto6v+0xfe>
    2052:	00 00       	nop
			_delay_ms(5000);
			pickup();	
    2054:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			right_degrees(45);
    2058:	8d e2       	ldi	r24, 0x2D	; 45
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	9f e3       	ldi	r25, 0x3F	; 63
    2064:	a2 e0       	ldi	r26, 0x02	; 2
    2066:	81 50       	subi	r24, 0x01	; 1
    2068:	90 40       	sbci	r25, 0x00	; 0
    206a:	a0 40       	sbci	r26, 0x00	; 0
    206c:	e1 f7       	brne	.-8      	; 0x2066 <_Z7pathto6v+0x112>
    206e:	00 c0       	rjmp	.+0      	; 0x2070 <_Z7pathto6v+0x11c>
    2070:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_right();
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z24rotation_blackline_rightj>
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	9f e3       	ldi	r25, 0x3F	; 63
    207e:	a2 e0       	ldi	r26, 0x02	; 2
    2080:	81 50       	subi	r24, 0x01	; 1
    2082:	90 40       	sbci	r25, 0x00	; 0
    2084:	a0 40       	sbci	r26, 0x00	; 0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <_Z7pathto6v+0x12c>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <_Z7pathto6v+0x136>
    208a:	00 00       	nop
			_delay_ms(50);
			forward_black();
    208c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2090:	8f ef       	ldi	r24, 0xFF	; 255
    2092:	9f e3       	ldi	r25, 0x3F	; 63
    2094:	a2 e0       	ldi	r26, 0x02	; 2
    2096:	81 50       	subi	r24, 0x01	; 1
    2098:	90 40       	sbci	r25, 0x00	; 0
    209a:	a0 40       	sbci	r26, 0x00	; 0
    209c:	e1 f7       	brne	.-8      	; 0x2096 <_Z7pathto6v+0x142>
    209e:	00 c0       	rjmp	.+0      	; 0x20a0 <_Z7pathto6v+0x14c>
    20a0:	00 00       	nop
			_delay_ms(50);
			++count;
    20a2:	80 91 3b 02 	lds	r24, 0x023B
    20a6:	90 91 3c 02 	lds	r25, 0x023C
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	90 93 3c 02 	sts	0x023C, r25
    20b0:	80 93 3b 02 	sts	0x023B, r24
    20b4:	b9 c0       	rjmp	.+370    	; 0x2228 <__stack+0x29>
		}
		else if(count==5){
    20b6:	85 30       	cpi	r24, 0x05	; 5
    20b8:	91 05       	cpc	r25, r1
    20ba:	31 f5       	brne	.+76     	; 0x2108 <_Z7pathto6v+0x1b4>
			velocity(120,60);
    20bc:	88 e7       	ldi	r24, 0x78	; 120
    20be:	6c e3       	ldi	r22, 0x3C	; 60
    20c0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	9f e3       	ldi	r25, 0x3F	; 63
    20d0:	a2 e0       	ldi	r26, 0x02	; 2
    20d2:	81 50       	subi	r24, 0x01	; 1
    20d4:	90 40       	sbci	r25, 0x00	; 0
    20d6:	a0 40       	sbci	r26, 0x00	; 0
    20d8:	e1 f7       	brne	.-8      	; 0x20d2 <_Z7pathto6v+0x17e>
    20da:	00 c0       	rjmp	.+0      	; 0x20dc <_Z7pathto6v+0x188>
    20dc:	00 00       	nop
			_delay_ms(50);
			forward_black();
    20de:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    20e2:	8f ef       	ldi	r24, 0xFF	; 255
    20e4:	9f e3       	ldi	r25, 0x3F	; 63
    20e6:	a2 e0       	ldi	r26, 0x02	; 2
    20e8:	81 50       	subi	r24, 0x01	; 1
    20ea:	90 40       	sbci	r25, 0x00	; 0
    20ec:	a0 40       	sbci	r26, 0x00	; 0
    20ee:	e1 f7       	brne	.-8      	; 0x20e8 <_Z7pathto6v+0x194>
    20f0:	00 c0       	rjmp	.+0      	; 0x20f2 <_Z7pathto6v+0x19e>
    20f2:	00 00       	nop
			_delay_ms(50);
			++count;
    20f4:	80 91 3b 02 	lds	r24, 0x023B
    20f8:	90 91 3c 02 	lds	r25, 0x023C
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	90 93 3c 02 	sts	0x023C, r25
    2102:	80 93 3b 02 	sts	0x023B, r24
    2106:	90 c0       	rjmp	.+288    	; 0x2228 <__stack+0x29>
			
		}
		else if(count==6){
    2108:	86 30       	cpi	r24, 0x06	; 6
    210a:	91 05       	cpc	r25, r1
    210c:	a9 f4       	brne	.+42     	; 0x2138 <_Z7pathto6v+0x1e4>
			forward_from_node();
    210e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	9f e3       	ldi	r25, 0x3F	; 63
    2116:	a2 e0       	ldi	r26, 0x02	; 2
    2118:	81 50       	subi	r24, 0x01	; 1
    211a:	90 40       	sbci	r25, 0x00	; 0
    211c:	a0 40       	sbci	r26, 0x00	; 0
    211e:	e1 f7       	brne	.-8      	; 0x2118 <_Z7pathto6v+0x1c4>
    2120:	00 c0       	rjmp	.+0      	; 0x2122 <_Z7pathto6v+0x1ce>
    2122:	00 00       	nop
			_delay_ms(50);
			++count;
    2124:	80 91 3b 02 	lds	r24, 0x023B
    2128:	90 91 3c 02 	lds	r25, 0x023C
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	90 93 3c 02 	sts	0x023C, r25
    2132:	80 93 3b 02 	sts	0x023B, r24
    2136:	78 c0       	rjmp	.+240    	; 0x2228 <__stack+0x29>
			
		}
		else if(count==7)
    2138:	87 30       	cpi	r24, 0x07	; 7
    213a:	91 05       	cpc	r25, r1
    213c:	a9 f4       	brne	.+42     	; 0x2168 <_Z7pathto6v+0x214>
		{
			forward_from_node();
    213e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	9f e3       	ldi	r25, 0x3F	; 63
    2146:	a2 e0       	ldi	r26, 0x02	; 2
    2148:	81 50       	subi	r24, 0x01	; 1
    214a:	90 40       	sbci	r25, 0x00	; 0
    214c:	a0 40       	sbci	r26, 0x00	; 0
    214e:	e1 f7       	brne	.-8      	; 0x2148 <_Z7pathto6v+0x1f4>
    2150:	00 c0       	rjmp	.+0      	; 0x2152 <_Z7pathto6v+0x1fe>
    2152:	00 00       	nop
			_delay_ms(50);
			++count;
    2154:	80 91 3b 02 	lds	r24, 0x023B
    2158:	90 91 3c 02 	lds	r25, 0x023C
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	90 93 3c 02 	sts	0x023C, r25
    2162:	80 93 3b 02 	sts	0x023B, r24
    2166:	60 c0       	rjmp	.+192    	; 0x2228 <__stack+0x29>
		}
		else if(count == 8)
    2168:	88 30       	cpi	r24, 0x08	; 8
    216a:	91 05       	cpc	r25, r1
    216c:	a9 f4       	brne	.+42     	; 0x2198 <_Z7pathto6v+0x244>
		{
			forward_from_node();
    216e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2172:	8f ef       	ldi	r24, 0xFF	; 255
    2174:	9f e3       	ldi	r25, 0x3F	; 63
    2176:	a2 e0       	ldi	r26, 0x02	; 2
    2178:	81 50       	subi	r24, 0x01	; 1
    217a:	90 40       	sbci	r25, 0x00	; 0
    217c:	a0 40       	sbci	r26, 0x00	; 0
    217e:	e1 f7       	brne	.-8      	; 0x2178 <_Z7pathto6v+0x224>
    2180:	00 c0       	rjmp	.+0      	; 0x2182 <_Z7pathto6v+0x22e>
    2182:	00 00       	nop
			_delay_ms(50);
			++count;
    2184:	80 91 3b 02 	lds	r24, 0x023B
    2188:	90 91 3c 02 	lds	r25, 0x023C
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	90 93 3c 02 	sts	0x023C, r25
    2192:	80 93 3b 02 	sts	0x023B, r24
    2196:	48 c0       	rjmp	.+144    	; 0x2228 <__stack+0x29>
			
		}
		else if(count == 9)
    2198:	89 30       	cpi	r24, 0x09	; 9
    219a:	91 05       	cpc	r25, r1
    219c:	09 f0       	breq	.+2      	; 0x21a0 <_Z7pathto6v+0x24c>
    219e:	44 c0       	rjmp	.+136    	; 0x2228 <__stack+0x29>
		{	drop();
    21a0:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][5] + 4 ; 
    21a4:	d8 01       	movw	r26, r16
    21a6:	8c 91       	ld	r24, X
    21a8:	8c 5f       	subi	r24, 0xFC	; 252
    21aa:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    21ae:	8d e2       	ldi	r24, 0x2D	; 45
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	9f e3       	ldi	r25, 0x3F	; 63
    21ba:	a2 e0       	ldi	r26, 0x02	; 2
    21bc:	81 50       	subi	r24, 0x01	; 1
    21be:	90 40       	sbci	r25, 0x00	; 0
    21c0:	a0 40       	sbci	r26, 0x00	; 0
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <_Z7pathto6v+0x268>
    21c4:	00 c0       	rjmp	.+0      	; 0x21c6 <_Z7pathto6v+0x272>
    21c6:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
    21d2:	9f e3       	ldi	r25, 0x3F	; 63
    21d4:	a2 e0       	ldi	r26, 0x02	; 2
    21d6:	81 50       	subi	r24, 0x01	; 1
    21d8:	90 40       	sbci	r25, 0x00	; 0
    21da:	a0 40       	sbci	r26, 0x00	; 0
    21dc:	e1 f7       	brne	.-8      	; 0x21d6 <_Z7pathto6v+0x282>
    21de:	00 c0       	rjmp	.+0      	; 0x21e0 <_Z7pathto6v+0x28c>
    21e0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    21e2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	9f e3       	ldi	r25, 0x3F	; 63
    21ea:	a2 e0       	ldi	r26, 0x02	; 2
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	90 40       	sbci	r25, 0x00	; 0
    21f0:	a0 40       	sbci	r26, 0x00	; 0
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <_Z7pathto6v+0x298>
    21f4:	00 c0       	rjmp	.+0      	; 0x21f6 <_Z7pathto6v+0x2a2>
    21f6:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    21f8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	9f e3       	ldi	r25, 0x3F	; 63
    2200:	a2 e0       	ldi	r26, 0x02	; 2
    2202:	81 50       	subi	r24, 0x01	; 1
    2204:	90 40       	sbci	r25, 0x00	; 0
    2206:	a0 40       	sbci	r26, 0x00	; 0
    2208:	e1 f7       	brne	.-8      	; 0x2202 <__stack+0x3>
    220a:	00 c0       	rjmp	.+0      	; 0x220c <__stack+0xd>
    220c:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    220e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	9f e3       	ldi	r25, 0x3F	; 63
    2216:	a2 e0       	ldi	r26, 0x02	; 2
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	90 40       	sbci	r25, 0x00	; 0
    221c:	a0 40       	sbci	r26, 0x00	; 0
    221e:	e1 f7       	brne	.-8      	; 0x2218 <__stack+0x19>
    2220:	00 c0       	rjmp	.+0      	; 0x2222 <__stack+0x23>
    2222:	00 00       	nop
			_delay_ms(50);
			reset_count();
    2224:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    2228:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void pathto6()
{
	for( int i =0; i<10;i++){
    222a:	09 f0       	breq	.+2      	; 0x222e <__stack+0x2f>
    222c:	9b ce       	rjmp	.-714    	; 0x1f64 <_Z7pathto6v+0x10>
			_delay_ms(50);
			reset_count();
		}
	}
	
}
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	08 95       	ret

00002238 <_Z7pathto7v>:

void pathto7()
{
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	ca e0       	ldi	r28, 0x0A	; 10
    2242:	d0 e0       	ldi	r29, 0x00	; 0
			++count;
		}
		
		else if(count == 9)
		{   drop();
			data = info_table[0][6] + 4 ; 
    2244:	0c e0       	ldi	r16, 0x0C	; 12
    2246:	12 e0       	ldi	r17, 0x02	; 2

void pathto7()
{
	
	for( int i =0; i<10;i++){
		lcd_print(1,1,count,3);
    2248:	40 91 3b 02 	lds	r20, 0x023B
    224c:	50 91 3c 02 	lds	r21, 0x023C
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	23 e0       	ldi	r18, 0x03	; 3
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    225c:	80 91 3b 02 	lds	r24, 0x023B
    2260:	90 91 3c 02 	lds	r25, 0x023C
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	19 f4       	brne	.+6      	; 0x226e <_Z7pathto7v+0x36>
			stop();
    2268:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    226c:	52 c1       	rjmp	.+676    	; 0x2512 <_Z7pathto7v+0x2da>
		}
		else if(count==1){
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	a9 f4       	brne	.+42     	; 0x229e <_Z7pathto7v+0x66>
			forward_from_node();
    2274:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	9f e3       	ldi	r25, 0x3F	; 63
    227c:	a2 e0       	ldi	r26, 0x02	; 2
    227e:	81 50       	subi	r24, 0x01	; 1
    2280:	90 40       	sbci	r25, 0x00	; 0
    2282:	a0 40       	sbci	r26, 0x00	; 0
    2284:	e1 f7       	brne	.-8      	; 0x227e <_Z7pathto7v+0x46>
    2286:	00 c0       	rjmp	.+0      	; 0x2288 <_Z7pathto7v+0x50>
    2288:	00 00       	nop
			_delay_ms(50);
			++count;
    228a:	80 91 3b 02 	lds	r24, 0x023B
    228e:	90 91 3c 02 	lds	r25, 0x023C
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	90 93 3c 02 	sts	0x023C, r25
    2298:	80 93 3b 02 	sts	0x023B, r24
    229c:	37 c1       	rjmp	.+622    	; 0x250c <_Z7pathto7v+0x2d4>
			
		}
		else if(count==2){
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	91 05       	cpc	r25, r1
    22a2:	a9 f4       	brne	.+42     	; 0x22ce <_Z7pathto7v+0x96>
			forward_from_node();
    22a4:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    22a8:	8f ef       	ldi	r24, 0xFF	; 255
    22aa:	9f e3       	ldi	r25, 0x3F	; 63
    22ac:	a2 e0       	ldi	r26, 0x02	; 2
    22ae:	81 50       	subi	r24, 0x01	; 1
    22b0:	90 40       	sbci	r25, 0x00	; 0
    22b2:	a0 40       	sbci	r26, 0x00	; 0
    22b4:	e1 f7       	brne	.-8      	; 0x22ae <_Z7pathto7v+0x76>
    22b6:	00 c0       	rjmp	.+0      	; 0x22b8 <_Z7pathto7v+0x80>
    22b8:	00 00       	nop
			_delay_ms(50);
			++count;
    22ba:	80 91 3b 02 	lds	r24, 0x023B
    22be:	90 91 3c 02 	lds	r25, 0x023C
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	90 93 3c 02 	sts	0x023C, r25
    22c8:	80 93 3b 02 	sts	0x023B, r24
    22cc:	1f c1       	rjmp	.+574    	; 0x250c <_Z7pathto7v+0x2d4>
			
		}
		else if(count==3){
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	91 05       	cpc	r25, r1
    22d2:	c9 f4       	brne	.+50     	; 0x2306 <_Z7pathto7v+0xce>
			
			rotation_using_blackline_newright();
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	9f e3       	ldi	r25, 0x3F	; 63
    22e0:	a2 e0       	ldi	r26, 0x02	; 2
    22e2:	81 50       	subi	r24, 0x01	; 1
    22e4:	90 40       	sbci	r25, 0x00	; 0
    22e6:	a0 40       	sbci	r26, 0x00	; 0
    22e8:	e1 f7       	brne	.-8      	; 0x22e2 <_Z7pathto7v+0xaa>
    22ea:	00 c0       	rjmp	.+0      	; 0x22ec <_Z7pathto7v+0xb4>
    22ec:	00 00       	nop
			_delay_ms(50);
			forward_black();
    22ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    22f2:	80 91 3b 02 	lds	r24, 0x023B
    22f6:	90 91 3c 02 	lds	r25, 0x023C
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	90 93 3c 02 	sts	0x023C, r25
    2300:	80 93 3b 02 	sts	0x023B, r24
    2304:	03 c1       	rjmp	.+518    	; 0x250c <_Z7pathto7v+0x2d4>
		}
		
		else if(count==4){
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	91 05       	cpc	r25, r1
    230a:	09 f0       	breq	.+2      	; 0x230e <_Z7pathto7v+0xd6>
    230c:	46 c0       	rjmp	.+140    	; 0x239a <_Z7pathto7v+0x162>
			
			data = info_table[0][6]; 
    230e:	d8 01       	movw	r26, r16
    2310:	8c 91       	ld	r24, X
    2312:	80 93 3a 02 	sts	0x023A, r24
			velocity(60,120);
    2316:	8c e3       	ldi	r24, 0x3C	; 60
    2318:	68 e7       	ldi	r22, 0x78	; 120
    231a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	9f ef       	ldi	r25, 0xFF	; 255
    232a:	a0 ee       	ldi	r26, 0xE0	; 224
    232c:	81 50       	subi	r24, 0x01	; 1
    232e:	90 40       	sbci	r25, 0x00	; 0
    2330:	a0 40       	sbci	r26, 0x00	; 0
    2332:	e1 f7       	brne	.-8      	; 0x232c <_Z7pathto7v+0xf4>
    2334:	00 c0       	rjmp	.+0      	; 0x2336 <_Z7pathto7v+0xfe>
    2336:	00 00       	nop
			_delay_ms(5000);
			pickup();
    2338:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			
			left_degrees(45);
    233c:	8d e2       	ldi	r24, 0x2D	; 45
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	9f e3       	ldi	r25, 0x3F	; 63
    2348:	a2 e0       	ldi	r26, 0x02	; 2
    234a:	81 50       	subi	r24, 0x01	; 1
    234c:	90 40       	sbci	r25, 0x00	; 0
    234e:	a0 40       	sbci	r26, 0x00	; 0
    2350:	e1 f7       	brne	.-8      	; 0x234a <_Z7pathto7v+0x112>
    2352:	00 c0       	rjmp	.+0      	; 0x2354 <_Z7pathto7v+0x11c>
    2354:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    235e:	8f ef       	ldi	r24, 0xFF	; 255
    2360:	9f e3       	ldi	r25, 0x3F	; 63
    2362:	a2 e0       	ldi	r26, 0x02	; 2
    2364:	81 50       	subi	r24, 0x01	; 1
    2366:	90 40       	sbci	r25, 0x00	; 0
    2368:	a0 40       	sbci	r26, 0x00	; 0
    236a:	e1 f7       	brne	.-8      	; 0x2364 <_Z7pathto7v+0x12c>
    236c:	00 c0       	rjmp	.+0      	; 0x236e <_Z7pathto7v+0x136>
    236e:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2370:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	9f e3       	ldi	r25, 0x3F	; 63
    2378:	a2 e0       	ldi	r26, 0x02	; 2
    237a:	81 50       	subi	r24, 0x01	; 1
    237c:	90 40       	sbci	r25, 0x00	; 0
    237e:	a0 40       	sbci	r26, 0x00	; 0
    2380:	e1 f7       	brne	.-8      	; 0x237a <_Z7pathto7v+0x142>
    2382:	00 c0       	rjmp	.+0      	; 0x2384 <_Z7pathto7v+0x14c>
    2384:	00 00       	nop
			_delay_ms(50);
			++count;
    2386:	80 91 3b 02 	lds	r24, 0x023B
    238a:	90 91 3c 02 	lds	r25, 0x023C
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	90 93 3c 02 	sts	0x023C, r25
    2394:	80 93 3b 02 	sts	0x023B, r24
    2398:	b9 c0       	rjmp	.+370    	; 0x250c <_Z7pathto7v+0x2d4>
		}
		else if(count==5){
    239a:	85 30       	cpi	r24, 0x05	; 5
    239c:	91 05       	cpc	r25, r1
    239e:	31 f5       	brne	.+76     	; 0x23ec <_Z7pathto7v+0x1b4>
			velocity(60,120);
    23a0:	8c e3       	ldi	r24, 0x3C	; 60
    23a2:	68 e7       	ldi	r22, 0x78	; 120
    23a4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    23b0:	8f ef       	ldi	r24, 0xFF	; 255
    23b2:	9f e3       	ldi	r25, 0x3F	; 63
    23b4:	a2 e0       	ldi	r26, 0x02	; 2
    23b6:	81 50       	subi	r24, 0x01	; 1
    23b8:	90 40       	sbci	r25, 0x00	; 0
    23ba:	a0 40       	sbci	r26, 0x00	; 0
    23bc:	e1 f7       	brne	.-8      	; 0x23b6 <_Z7pathto7v+0x17e>
    23be:	00 c0       	rjmp	.+0      	; 0x23c0 <_Z7pathto7v+0x188>
    23c0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    23c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	9f e3       	ldi	r25, 0x3F	; 63
    23ca:	a2 e0       	ldi	r26, 0x02	; 2
    23cc:	81 50       	subi	r24, 0x01	; 1
    23ce:	90 40       	sbci	r25, 0x00	; 0
    23d0:	a0 40       	sbci	r26, 0x00	; 0
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <_Z7pathto7v+0x194>
    23d4:	00 c0       	rjmp	.+0      	; 0x23d6 <_Z7pathto7v+0x19e>
    23d6:	00 00       	nop
			_delay_ms(50);
			++count;
    23d8:	80 91 3b 02 	lds	r24, 0x023B
    23dc:	90 91 3c 02 	lds	r25, 0x023C
    23e0:	01 96       	adiw	r24, 0x01	; 1
    23e2:	90 93 3c 02 	sts	0x023C, r25
    23e6:	80 93 3b 02 	sts	0x023B, r24
    23ea:	90 c0       	rjmp	.+288    	; 0x250c <_Z7pathto7v+0x2d4>
			
		}
		else if(count==6){
    23ec:	86 30       	cpi	r24, 0x06	; 6
    23ee:	91 05       	cpc	r25, r1
    23f0:	a9 f4       	brne	.+42     	; 0x241c <_Z7pathto7v+0x1e4>
			forward_from_node();
    23f2:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	9f e3       	ldi	r25, 0x3F	; 63
    23fa:	a2 e0       	ldi	r26, 0x02	; 2
    23fc:	81 50       	subi	r24, 0x01	; 1
    23fe:	90 40       	sbci	r25, 0x00	; 0
    2400:	a0 40       	sbci	r26, 0x00	; 0
    2402:	e1 f7       	brne	.-8      	; 0x23fc <_Z7pathto7v+0x1c4>
    2404:	00 c0       	rjmp	.+0      	; 0x2406 <_Z7pathto7v+0x1ce>
    2406:	00 00       	nop
			_delay_ms(50);
			++count;
    2408:	80 91 3b 02 	lds	r24, 0x023B
    240c:	90 91 3c 02 	lds	r25, 0x023C
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	90 93 3c 02 	sts	0x023C, r25
    2416:	80 93 3b 02 	sts	0x023B, r24
    241a:	78 c0       	rjmp	.+240    	; 0x250c <_Z7pathto7v+0x2d4>
			
		}
		else if(count==7)
    241c:	87 30       	cpi	r24, 0x07	; 7
    241e:	91 05       	cpc	r25, r1
    2420:	a9 f4       	brne	.+42     	; 0x244c <_Z7pathto7v+0x214>
		{
		forward_from_node();
    2422:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	9f e3       	ldi	r25, 0x3F	; 63
    242a:	a2 e0       	ldi	r26, 0x02	; 2
    242c:	81 50       	subi	r24, 0x01	; 1
    242e:	90 40       	sbci	r25, 0x00	; 0
    2430:	a0 40       	sbci	r26, 0x00	; 0
    2432:	e1 f7       	brne	.-8      	; 0x242c <_Z7pathto7v+0x1f4>
    2434:	00 c0       	rjmp	.+0      	; 0x2436 <_Z7pathto7v+0x1fe>
    2436:	00 00       	nop
		_delay_ms(50);
		++count;
    2438:	80 91 3b 02 	lds	r24, 0x023B
    243c:	90 91 3c 02 	lds	r25, 0x023C
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	90 93 3c 02 	sts	0x023C, r25
    2446:	80 93 3b 02 	sts	0x023B, r24
    244a:	60 c0       	rjmp	.+192    	; 0x250c <_Z7pathto7v+0x2d4>
	}
	else if(count == 8)
    244c:	88 30       	cpi	r24, 0x08	; 8
    244e:	91 05       	cpc	r25, r1
    2450:	a9 f4       	brne	.+42     	; 0x247c <_Z7pathto7v+0x244>
	
		{
			forward_from_node();
    2452:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f e3       	ldi	r25, 0x3F	; 63
    245a:	a2 e0       	ldi	r26, 0x02	; 2
    245c:	81 50       	subi	r24, 0x01	; 1
    245e:	90 40       	sbci	r25, 0x00	; 0
    2460:	a0 40       	sbci	r26, 0x00	; 0
    2462:	e1 f7       	brne	.-8      	; 0x245c <_Z7pathto7v+0x224>
    2464:	00 c0       	rjmp	.+0      	; 0x2466 <_Z7pathto7v+0x22e>
    2466:	00 00       	nop
			_delay_ms(50);
			
			++count;
    2468:	80 91 3b 02 	lds	r24, 0x023B
    246c:	90 91 3c 02 	lds	r25, 0x023C
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	90 93 3c 02 	sts	0x023C, r25
    2476:	80 93 3b 02 	sts	0x023B, r24
    247a:	48 c0       	rjmp	.+144    	; 0x250c <_Z7pathto7v+0x2d4>
		}
		
		else if(count == 9)
    247c:	89 30       	cpi	r24, 0x09	; 9
    247e:	91 05       	cpc	r25, r1
    2480:	09 f0       	breq	.+2      	; 0x2484 <_Z7pathto7v+0x24c>
    2482:	44 c0       	rjmp	.+136    	; 0x250c <_Z7pathto7v+0x2d4>
		{   drop();
    2484:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][6] + 4 ; 
    2488:	d8 01       	movw	r26, r16
    248a:	8c 91       	ld	r24, X
    248c:	8c 5f       	subi	r24, 0xFC	; 252
    248e:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    2492:	8d e2       	ldi	r24, 0x2D	; 45
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	9f e3       	ldi	r25, 0x3F	; 63
    249e:	a2 e0       	ldi	r26, 0x02	; 2
    24a0:	81 50       	subi	r24, 0x01	; 1
    24a2:	90 40       	sbci	r25, 0x00	; 0
    24a4:	a0 40       	sbci	r26, 0x00	; 0
    24a6:	e1 f7       	brne	.-8      	; 0x24a0 <_Z7pathto7v+0x268>
    24a8:	00 c0       	rjmp	.+0      	; 0x24aa <_Z7pathto7v+0x272>
    24aa:	00 00       	nop
			_delay_ms(50);
			
			rotation_blackline_left();
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    24b4:	8f ef       	ldi	r24, 0xFF	; 255
    24b6:	9f e3       	ldi	r25, 0x3F	; 63
    24b8:	a2 e0       	ldi	r26, 0x02	; 2
    24ba:	81 50       	subi	r24, 0x01	; 1
    24bc:	90 40       	sbci	r25, 0x00	; 0
    24be:	a0 40       	sbci	r26, 0x00	; 0
    24c0:	e1 f7       	brne	.-8      	; 0x24ba <_Z7pathto7v+0x282>
    24c2:	00 c0       	rjmp	.+0      	; 0x24c4 <_Z7pathto7v+0x28c>
    24c4:	00 00       	nop
			_delay_ms(50);
			forward_black();
    24c6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	9f e3       	ldi	r25, 0x3F	; 63
    24ce:	a2 e0       	ldi	r26, 0x02	; 2
    24d0:	81 50       	subi	r24, 0x01	; 1
    24d2:	90 40       	sbci	r25, 0x00	; 0
    24d4:	a0 40       	sbci	r26, 0x00	; 0
    24d6:	e1 f7       	brne	.-8      	; 0x24d0 <_Z7pathto7v+0x298>
    24d8:	00 c0       	rjmp	.+0      	; 0x24da <_Z7pathto7v+0x2a2>
    24da:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    24dc:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	9f e3       	ldi	r25, 0x3F	; 63
    24e4:	a2 e0       	ldi	r26, 0x02	; 2
    24e6:	81 50       	subi	r24, 0x01	; 1
    24e8:	90 40       	sbci	r25, 0x00	; 0
    24ea:	a0 40       	sbci	r26, 0x00	; 0
    24ec:	e1 f7       	brne	.-8      	; 0x24e6 <_Z7pathto7v+0x2ae>
    24ee:	00 c0       	rjmp	.+0      	; 0x24f0 <_Z7pathto7v+0x2b8>
    24f0:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    24f2:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	9f e3       	ldi	r25, 0x3F	; 63
    24fa:	a2 e0       	ldi	r26, 0x02	; 2
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	90 40       	sbci	r25, 0x00	; 0
    2500:	a0 40       	sbci	r26, 0x00	; 0
    2502:	e1 f7       	brne	.-8      	; 0x24fc <_Z7pathto7v+0x2c4>
    2504:	00 c0       	rjmp	.+0      	; 0x2506 <_Z7pathto7v+0x2ce>
    2506:	00 00       	nop
			_delay_ms(50);
			reset_count();
    2508:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    250c:	21 97       	sbiw	r28, 0x01	; 1
}

void pathto7()
{
	
	for( int i =0; i<10;i++){
    250e:	09 f0       	breq	.+2      	; 0x2512 <_Z7pathto7v+0x2da>
    2510:	9b ce       	rjmp	.-714    	; 0x2248 <_Z7pathto7v+0x10>
			forward_from_node();
			_delay_ms(50);
			reset_count();
		}
	}
}
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	08 95       	ret

0000251c <_Z7pathto8v>:

void pathto8()
{
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cc e0       	ldi	r28, 0x0C	; 12
    2526:	d0 e0       	ldi	r29, 0x00	; 0
			++count;
		}
		
		else if(count == 11)
		{	drop();
			data = info_table[0][7] + 4; 
    2528:	0e e0       	ldi	r16, 0x0E	; 14
    252a:	12 e0       	ldi	r17, 0x02	; 2

void pathto8()
{
	
	for( int i =0; i<12;i++){
		lcd_print(1,1,count,3);
    252c:	40 91 3b 02 	lds	r20, 0x023B
    2530:	50 91 3c 02 	lds	r21, 0x023C
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	23 e0       	ldi	r18, 0x03	; 3
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    2540:	80 91 3b 02 	lds	r24, 0x023B
    2544:	90 91 3c 02 	lds	r25, 0x023C
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	19 f4       	brne	.+6      	; 0x2552 <_Z7pathto8v+0x36>
			stop();
    254c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    2550:	8b c1       	rjmp	.+790    	; 0x2868 <_Z7pathto8v+0x34c>
		}
		else if(count==1){
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	91 05       	cpc	r25, r1
    2556:	a9 f4       	brne	.+42     	; 0x2582 <_Z7pathto8v+0x66>
			forward_from_node();
    2558:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	9f e3       	ldi	r25, 0x3F	; 63
    2560:	a2 e0       	ldi	r26, 0x02	; 2
    2562:	81 50       	subi	r24, 0x01	; 1
    2564:	90 40       	sbci	r25, 0x00	; 0
    2566:	a0 40       	sbci	r26, 0x00	; 0
    2568:	e1 f7       	brne	.-8      	; 0x2562 <_Z7pathto8v+0x46>
    256a:	00 c0       	rjmp	.+0      	; 0x256c <_Z7pathto8v+0x50>
    256c:	00 00       	nop
			_delay_ms(50);
			++count;
    256e:	80 91 3b 02 	lds	r24, 0x023B
    2572:	90 91 3c 02 	lds	r25, 0x023C
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	90 93 3c 02 	sts	0x023C, r25
    257c:	80 93 3b 02 	sts	0x023B, r24
    2580:	70 c1       	rjmp	.+736    	; 0x2862 <_Z7pathto8v+0x346>
			
		}
		else if(count==2){
    2582:	82 30       	cpi	r24, 0x02	; 2
    2584:	91 05       	cpc	r25, r1
    2586:	a9 f4       	brne	.+42     	; 0x25b2 <_Z7pathto8v+0x96>
			forward_from_node();
    2588:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    258c:	8f ef       	ldi	r24, 0xFF	; 255
    258e:	9f e3       	ldi	r25, 0x3F	; 63
    2590:	a2 e0       	ldi	r26, 0x02	; 2
    2592:	81 50       	subi	r24, 0x01	; 1
    2594:	90 40       	sbci	r25, 0x00	; 0
    2596:	a0 40       	sbci	r26, 0x00	; 0
    2598:	e1 f7       	brne	.-8      	; 0x2592 <_Z7pathto8v+0x76>
    259a:	00 c0       	rjmp	.+0      	; 0x259c <_Z7pathto8v+0x80>
    259c:	00 00       	nop
			_delay_ms(50);
			++count;
    259e:	80 91 3b 02 	lds	r24, 0x023B
    25a2:	90 91 3c 02 	lds	r25, 0x023C
    25a6:	01 96       	adiw	r24, 0x01	; 1
    25a8:	90 93 3c 02 	sts	0x023C, r25
    25ac:	80 93 3b 02 	sts	0x023B, r24
    25b0:	58 c1       	rjmp	.+688    	; 0x2862 <_Z7pathto8v+0x346>
			
		}
		else if(count==3){
    25b2:	83 30       	cpi	r24, 0x03	; 3
    25b4:	91 05       	cpc	r25, r1
    25b6:	11 f5       	brne	.+68     	; 0x25fc <_Z7pathto8v+0xe0>
			
			rotation_using_blackline_newright();
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    25c0:	8f ef       	ldi	r24, 0xFF	; 255
    25c2:	9f e3       	ldi	r25, 0x3F	; 63
    25c4:	a2 e0       	ldi	r26, 0x02	; 2
    25c6:	81 50       	subi	r24, 0x01	; 1
    25c8:	90 40       	sbci	r25, 0x00	; 0
    25ca:	a0 40       	sbci	r26, 0x00	; 0
    25cc:	e1 f7       	brne	.-8      	; 0x25c6 <_Z7pathto8v+0xaa>
    25ce:	00 c0       	rjmp	.+0      	; 0x25d0 <_Z7pathto8v+0xb4>
    25d0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    25d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    25d6:	8f ef       	ldi	r24, 0xFF	; 255
    25d8:	9f e3       	ldi	r25, 0x3F	; 63
    25da:	a2 e0       	ldi	r26, 0x02	; 2
    25dc:	81 50       	subi	r24, 0x01	; 1
    25de:	90 40       	sbci	r25, 0x00	; 0
    25e0:	a0 40       	sbci	r26, 0x00	; 0
    25e2:	e1 f7       	brne	.-8      	; 0x25dc <_Z7pathto8v+0xc0>
    25e4:	00 c0       	rjmp	.+0      	; 0x25e6 <_Z7pathto8v+0xca>
    25e6:	00 00       	nop
			_delay_ms(50);
			++count;
    25e8:	80 91 3b 02 	lds	r24, 0x023B
    25ec:	90 91 3c 02 	lds	r25, 0x023C
    25f0:	01 96       	adiw	r24, 0x01	; 1
    25f2:	90 93 3c 02 	sts	0x023C, r25
    25f6:	80 93 3b 02 	sts	0x023B, r24
    25fa:	33 c1       	rjmp	.+614    	; 0x2862 <_Z7pathto8v+0x346>
		}
		else if(count == 4)
    25fc:	84 30       	cpi	r24, 0x04	; 4
    25fe:	91 05       	cpc	r25, r1
    2600:	a9 f4       	brne	.+42     	; 0x262c <_Z7pathto8v+0x110>
		{
			forward_from_node();
    2602:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	9f e3       	ldi	r25, 0x3F	; 63
    260a:	a2 e0       	ldi	r26, 0x02	; 2
    260c:	81 50       	subi	r24, 0x01	; 1
    260e:	90 40       	sbci	r25, 0x00	; 0
    2610:	a0 40       	sbci	r26, 0x00	; 0
    2612:	e1 f7       	brne	.-8      	; 0x260c <_Z7pathto8v+0xf0>
    2614:	00 c0       	rjmp	.+0      	; 0x2616 <_Z7pathto8v+0xfa>
    2616:	00 00       	nop
			_delay_ms(50);
			++count;
    2618:	80 91 3b 02 	lds	r24, 0x023B
    261c:	90 91 3c 02 	lds	r25, 0x023C
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	90 93 3c 02 	sts	0x023C, r25
    2626:	80 93 3b 02 	sts	0x023B, r24
    262a:	1b c1       	rjmp	.+566    	; 0x2862 <_Z7pathto8v+0x346>
		}
		
		else if(count==5){
    262c:	85 30       	cpi	r24, 0x05	; 5
    262e:	91 05       	cpc	r25, r1
    2630:	09 f0       	breq	.+2      	; 0x2634 <_Z7pathto8v+0x118>
    2632:	46 c0       	rjmp	.+140    	; 0x26c0 <_Z7pathto8v+0x1a4>
			
			data = info_table[0][7] ;  			   
    2634:	d8 01       	movw	r26, r16
    2636:	8c 91       	ld	r24, X
    2638:	80 93 3a 02 	sts	0x023A, r24
			velocity(60,120);
    263c:	8c e3       	ldi	r24, 0x3C	; 60
    263e:	68 e7       	ldi	r22, 0x78	; 120
    2640:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	9f ef       	ldi	r25, 0xFF	; 255
    2650:	a0 ee       	ldi	r26, 0xE0	; 224
    2652:	81 50       	subi	r24, 0x01	; 1
    2654:	90 40       	sbci	r25, 0x00	; 0
    2656:	a0 40       	sbci	r26, 0x00	; 0
    2658:	e1 f7       	brne	.-8      	; 0x2652 <_Z7pathto8v+0x136>
    265a:	00 c0       	rjmp	.+0      	; 0x265c <_Z7pathto8v+0x140>
    265c:	00 00       	nop
			_delay_ms(5000);
			pickup();
    265e:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			left_degrees(45);
    2662:	8d e2       	ldi	r24, 0x2D	; 45
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    266a:	8f ef       	ldi	r24, 0xFF	; 255
    266c:	9f e3       	ldi	r25, 0x3F	; 63
    266e:	a2 e0       	ldi	r26, 0x02	; 2
    2670:	81 50       	subi	r24, 0x01	; 1
    2672:	90 40       	sbci	r25, 0x00	; 0
    2674:	a0 40       	sbci	r26, 0x00	; 0
    2676:	e1 f7       	brne	.-8      	; 0x2670 <_Z7pathto8v+0x154>
    2678:	00 c0       	rjmp	.+0      	; 0x267a <_Z7pathto8v+0x15e>
    267a:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    2684:	8f ef       	ldi	r24, 0xFF	; 255
    2686:	9f e3       	ldi	r25, 0x3F	; 63
    2688:	a2 e0       	ldi	r26, 0x02	; 2
    268a:	81 50       	subi	r24, 0x01	; 1
    268c:	90 40       	sbci	r25, 0x00	; 0
    268e:	a0 40       	sbci	r26, 0x00	; 0
    2690:	e1 f7       	brne	.-8      	; 0x268a <_Z7pathto8v+0x16e>
    2692:	00 c0       	rjmp	.+0      	; 0x2694 <_Z7pathto8v+0x178>
    2694:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2696:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    269a:	8f ef       	ldi	r24, 0xFF	; 255
    269c:	9f e3       	ldi	r25, 0x3F	; 63
    269e:	a2 e0       	ldi	r26, 0x02	; 2
    26a0:	81 50       	subi	r24, 0x01	; 1
    26a2:	90 40       	sbci	r25, 0x00	; 0
    26a4:	a0 40       	sbci	r26, 0x00	; 0
    26a6:	e1 f7       	brne	.-8      	; 0x26a0 <_Z7pathto8v+0x184>
    26a8:	00 c0       	rjmp	.+0      	; 0x26aa <_Z7pathto8v+0x18e>
    26aa:	00 00       	nop
			_delay_ms(50);
			++count;
    26ac:	80 91 3b 02 	lds	r24, 0x023B
    26b0:	90 91 3c 02 	lds	r25, 0x023C
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	90 93 3c 02 	sts	0x023C, r25
    26ba:	80 93 3b 02 	sts	0x023B, r24
    26be:	d1 c0       	rjmp	.+418    	; 0x2862 <_Z7pathto8v+0x346>
		}
		else if(count == 6)
    26c0:	86 30       	cpi	r24, 0x06	; 6
    26c2:	91 05       	cpc	r25, r1
    26c4:	a9 f4       	brne	.+42     	; 0x26f0 <_Z7pathto8v+0x1d4>
		{
			forward_from_node();
    26c6:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    26ca:	8f ef       	ldi	r24, 0xFF	; 255
    26cc:	9f e3       	ldi	r25, 0x3F	; 63
    26ce:	a2 e0       	ldi	r26, 0x02	; 2
    26d0:	81 50       	subi	r24, 0x01	; 1
    26d2:	90 40       	sbci	r25, 0x00	; 0
    26d4:	a0 40       	sbci	r26, 0x00	; 0
    26d6:	e1 f7       	brne	.-8      	; 0x26d0 <_Z7pathto8v+0x1b4>
    26d8:	00 c0       	rjmp	.+0      	; 0x26da <_Z7pathto8v+0x1be>
    26da:	00 00       	nop
			_delay_ms(50);
			++count;
    26dc:	80 91 3b 02 	lds	r24, 0x023B
    26e0:	90 91 3c 02 	lds	r25, 0x023C
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	90 93 3c 02 	sts	0x023C, r25
    26ea:	80 93 3b 02 	sts	0x023B, r24
    26ee:	b9 c0       	rjmp	.+370    	; 0x2862 <_Z7pathto8v+0x346>
		}
		else if(count==7){
    26f0:	87 30       	cpi	r24, 0x07	; 7
    26f2:	91 05       	cpc	r25, r1
    26f4:	31 f5       	brne	.+76     	; 0x2742 <_Z7pathto8v+0x226>
			velocity(60,120);
    26f6:	8c e3       	ldi	r24, 0x3C	; 60
    26f8:	68 e7       	ldi	r22, 0x78	; 120
    26fa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    2708:	9f e3       	ldi	r25, 0x3F	; 63
    270a:	a2 e0       	ldi	r26, 0x02	; 2
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	90 40       	sbci	r25, 0x00	; 0
    2710:	a0 40       	sbci	r26, 0x00	; 0
    2712:	e1 f7       	brne	.-8      	; 0x270c <_Z7pathto8v+0x1f0>
    2714:	00 c0       	rjmp	.+0      	; 0x2716 <_Z7pathto8v+0x1fa>
    2716:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2718:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	9f e3       	ldi	r25, 0x3F	; 63
    2720:	a2 e0       	ldi	r26, 0x02	; 2
    2722:	81 50       	subi	r24, 0x01	; 1
    2724:	90 40       	sbci	r25, 0x00	; 0
    2726:	a0 40       	sbci	r26, 0x00	; 0
    2728:	e1 f7       	brne	.-8      	; 0x2722 <_Z7pathto8v+0x206>
    272a:	00 c0       	rjmp	.+0      	; 0x272c <_Z7pathto8v+0x210>
    272c:	00 00       	nop
			_delay_ms(50);
			++count;
    272e:	80 91 3b 02 	lds	r24, 0x023B
    2732:	90 91 3c 02 	lds	r25, 0x023C
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	90 93 3c 02 	sts	0x023C, r25
    273c:	80 93 3b 02 	sts	0x023B, r24
    2740:	90 c0       	rjmp	.+288    	; 0x2862 <_Z7pathto8v+0x346>
			
		}
		else if(count==8){
    2742:	88 30       	cpi	r24, 0x08	; 8
    2744:	91 05       	cpc	r25, r1
    2746:	a9 f4       	brne	.+42     	; 0x2772 <_Z7pathto8v+0x256>
			forward_from_node();
    2748:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    274c:	8f ef       	ldi	r24, 0xFF	; 255
    274e:	9f e3       	ldi	r25, 0x3F	; 63
    2750:	a2 e0       	ldi	r26, 0x02	; 2
    2752:	81 50       	subi	r24, 0x01	; 1
    2754:	90 40       	sbci	r25, 0x00	; 0
    2756:	a0 40       	sbci	r26, 0x00	; 0
    2758:	e1 f7       	brne	.-8      	; 0x2752 <_Z7pathto8v+0x236>
    275a:	00 c0       	rjmp	.+0      	; 0x275c <_Z7pathto8v+0x240>
    275c:	00 00       	nop
			_delay_ms(50);
			++count;
    275e:	80 91 3b 02 	lds	r24, 0x023B
    2762:	90 91 3c 02 	lds	r25, 0x023C
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	90 93 3c 02 	sts	0x023C, r25
    276c:	80 93 3b 02 	sts	0x023B, r24
    2770:	78 c0       	rjmp	.+240    	; 0x2862 <_Z7pathto8v+0x346>
			
		}
		else if(count==9){
    2772:	89 30       	cpi	r24, 0x09	; 9
    2774:	91 05       	cpc	r25, r1
    2776:	a9 f4       	brne	.+42     	; 0x27a2 <_Z7pathto8v+0x286>
		forward_from_node();
    2778:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	9f e3       	ldi	r25, 0x3F	; 63
    2780:	a2 e0       	ldi	r26, 0x02	; 2
    2782:	81 50       	subi	r24, 0x01	; 1
    2784:	90 40       	sbci	r25, 0x00	; 0
    2786:	a0 40       	sbci	r26, 0x00	; 0
    2788:	e1 f7       	brne	.-8      	; 0x2782 <_Z7pathto8v+0x266>
    278a:	00 c0       	rjmp	.+0      	; 0x278c <_Z7pathto8v+0x270>
    278c:	00 00       	nop
		_delay_ms(50);
		++count;
    278e:	80 91 3b 02 	lds	r24, 0x023B
    2792:	90 91 3c 02 	lds	r25, 0x023C
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	90 93 3c 02 	sts	0x023C, r25
    279c:	80 93 3b 02 	sts	0x023B, r24
    27a0:	60 c0       	rjmp	.+192    	; 0x2862 <_Z7pathto8v+0x346>
	}
	else if(count == 10)
    27a2:	8a 30       	cpi	r24, 0x0A	; 10
    27a4:	91 05       	cpc	r25, r1
    27a6:	a9 f4       	brne	.+42     	; 0x27d2 <_Z7pathto8v+0x2b6>
	{
		
			forward_from_node();
    27a8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	9f e3       	ldi	r25, 0x3F	; 63
    27b0:	a2 e0       	ldi	r26, 0x02	; 2
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	90 40       	sbci	r25, 0x00	; 0
    27b6:	a0 40       	sbci	r26, 0x00	; 0
    27b8:	e1 f7       	brne	.-8      	; 0x27b2 <_Z7pathto8v+0x296>
    27ba:	00 c0       	rjmp	.+0      	; 0x27bc <_Z7pathto8v+0x2a0>
    27bc:	00 00       	nop
			_delay_ms(50);
			
			++count;
    27be:	80 91 3b 02 	lds	r24, 0x023B
    27c2:	90 91 3c 02 	lds	r25, 0x023C
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	90 93 3c 02 	sts	0x023C, r25
    27cc:	80 93 3b 02 	sts	0x023B, r24
    27d0:	48 c0       	rjmp	.+144    	; 0x2862 <_Z7pathto8v+0x346>
		}
		
		else if(count == 11)
    27d2:	8b 30       	cpi	r24, 0x0B	; 11
    27d4:	91 05       	cpc	r25, r1
    27d6:	09 f0       	breq	.+2      	; 0x27da <_Z7pathto8v+0x2be>
    27d8:	44 c0       	rjmp	.+136    	; 0x2862 <_Z7pathto8v+0x346>
		{	drop();
    27da:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][7] + 4; 
    27de:	d8 01       	movw	r26, r16
    27e0:	8c 91       	ld	r24, X
    27e2:	8c 5f       	subi	r24, 0xFC	; 252
    27e4:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    27e8:	8d e2       	ldi	r24, 0x2D	; 45
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	9f e3       	ldi	r25, 0x3F	; 63
    27f4:	a2 e0       	ldi	r26, 0x02	; 2
    27f6:	81 50       	subi	r24, 0x01	; 1
    27f8:	90 40       	sbci	r25, 0x00	; 0
    27fa:	a0 40       	sbci	r26, 0x00	; 0
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <_Z7pathto8v+0x2da>
    27fe:	00 c0       	rjmp	.+0      	; 0x2800 <_Z7pathto8v+0x2e4>
    2800:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	9f e3       	ldi	r25, 0x3F	; 63
    280e:	a2 e0       	ldi	r26, 0x02	; 2
    2810:	81 50       	subi	r24, 0x01	; 1
    2812:	90 40       	sbci	r25, 0x00	; 0
    2814:	a0 40       	sbci	r26, 0x00	; 0
    2816:	e1 f7       	brne	.-8      	; 0x2810 <_Z7pathto8v+0x2f4>
    2818:	00 c0       	rjmp	.+0      	; 0x281a <_Z7pathto8v+0x2fe>
    281a:	00 00       	nop
			_delay_ms(50);
			forward_black();
    281c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	9f e3       	ldi	r25, 0x3F	; 63
    2824:	a2 e0       	ldi	r26, 0x02	; 2
    2826:	81 50       	subi	r24, 0x01	; 1
    2828:	90 40       	sbci	r25, 0x00	; 0
    282a:	a0 40       	sbci	r26, 0x00	; 0
    282c:	e1 f7       	brne	.-8      	; 0x2826 <_Z7pathto8v+0x30a>
    282e:	00 c0       	rjmp	.+0      	; 0x2830 <_Z7pathto8v+0x314>
    2830:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    2832:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2836:	8f ef       	ldi	r24, 0xFF	; 255
    2838:	9f e3       	ldi	r25, 0x3F	; 63
    283a:	a2 e0       	ldi	r26, 0x02	; 2
    283c:	81 50       	subi	r24, 0x01	; 1
    283e:	90 40       	sbci	r25, 0x00	; 0
    2840:	a0 40       	sbci	r26, 0x00	; 0
    2842:	e1 f7       	brne	.-8      	; 0x283c <_Z7pathto8v+0x320>
    2844:	00 c0       	rjmp	.+0      	; 0x2846 <_Z7pathto8v+0x32a>
    2846:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    2848:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    284c:	8f ef       	ldi	r24, 0xFF	; 255
    284e:	9f e3       	ldi	r25, 0x3F	; 63
    2850:	a2 e0       	ldi	r26, 0x02	; 2
    2852:	81 50       	subi	r24, 0x01	; 1
    2854:	90 40       	sbci	r25, 0x00	; 0
    2856:	a0 40       	sbci	r26, 0x00	; 0
    2858:	e1 f7       	brne	.-8      	; 0x2852 <_Z7pathto8v+0x336>
    285a:	00 c0       	rjmp	.+0      	; 0x285c <_Z7pathto8v+0x340>
    285c:	00 00       	nop
			_delay_ms(50);
			reset_count();
    285e:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    2862:	21 97       	sbiw	r28, 0x01	; 1
}

void pathto8()
{
	
	for( int i =0; i<12;i++){
    2864:	09 f0       	breq	.+2      	; 0x2868 <_Z7pathto8v+0x34c>
    2866:	62 ce       	rjmp	.-828    	; 0x252c <_Z7pathto8v+0x10>
			forward_from_node();
			_delay_ms(50);
			reset_count();
		}
	}
}
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	08 95       	ret

00002872 <_Z7pathto9v>:

void pathto9()
{
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	cc e0       	ldi	r28, 0x0C	; 12
    287c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==11){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][8] + 4 ; 
    287e:	00 e1       	ldi	r16, 0x10	; 16
    2880:	12 e0       	ldi	r17, 0x02	; 2
}

void pathto9()
{
	for( int i =0; i<12;i++){
		lcd_print(1,1,count,3);
    2882:	40 91 3b 02 	lds	r20, 0x023B
    2886:	50 91 3c 02 	lds	r21, 0x023C
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	23 e0       	ldi	r18, 0x03	; 3
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		//block at coordinate 2
		if(count==0){
    2896:	80 91 3b 02 	lds	r24, 0x023B
    289a:	90 91 3c 02 	lds	r25, 0x023C
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	19 f4       	brne	.+6      	; 0x28a8 <_Z7pathto9v+0x36>
			stop();
    28a2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    28a6:	a4 c1       	rjmp	.+840    	; 0x2bf0 <_Z7pathto9v+0x37e>
		}
		else if(count==1){
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	91 05       	cpc	r25, r1
    28ac:	01 f5       	brne	.+64     	; 0x28ee <_Z7pathto9v+0x7c>
			rotation_using_blackline_right();
    28ae:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	9f e3       	ldi	r25, 0x3F	; 63
    28b6:	a2 e0       	ldi	r26, 0x02	; 2
    28b8:	81 50       	subi	r24, 0x01	; 1
    28ba:	90 40       	sbci	r25, 0x00	; 0
    28bc:	a0 40       	sbci	r26, 0x00	; 0
    28be:	e1 f7       	brne	.-8      	; 0x28b8 <_Z7pathto9v+0x46>
    28c0:	00 c0       	rjmp	.+0      	; 0x28c2 <_Z7pathto9v+0x50>
    28c2:	00 00       	nop
			_delay_ms(50);
			forward_black();
    28c4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    28c8:	80 91 3b 02 	lds	r24, 0x023B
    28cc:	90 91 3c 02 	lds	r25, 0x023C
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	90 93 3c 02 	sts	0x023C, r25
    28d6:	80 93 3b 02 	sts	0x023B, r24
    28da:	8f ef       	ldi	r24, 0xFF	; 255
    28dc:	9f e3       	ldi	r25, 0x3F	; 63
    28de:	a2 e0       	ldi	r26, 0x02	; 2
    28e0:	81 50       	subi	r24, 0x01	; 1
    28e2:	90 40       	sbci	r25, 0x00	; 0
    28e4:	a0 40       	sbci	r26, 0x00	; 0
    28e6:	e1 f7       	brne	.-8      	; 0x28e0 <_Z7pathto9v+0x6e>
    28e8:	00 c0       	rjmp	.+0      	; 0x28ea <_Z7pathto9v+0x78>
    28ea:	00 00       	nop
    28ec:	7e c1       	rjmp	.+764    	; 0x2bea <_Z7pathto9v+0x378>
			_delay_ms(50);
			
		}
		else if(count==2){
    28ee:	82 30       	cpi	r24, 0x02	; 2
    28f0:	91 05       	cpc	r25, r1
    28f2:	a9 f4       	brne	.+42     	; 0x291e <_Z7pathto9v+0xac>
			forward_from_node();
    28f4:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	9f e3       	ldi	r25, 0x3F	; 63
    28fc:	a2 e0       	ldi	r26, 0x02	; 2
    28fe:	81 50       	subi	r24, 0x01	; 1
    2900:	90 40       	sbci	r25, 0x00	; 0
    2902:	a0 40       	sbci	r26, 0x00	; 0
    2904:	e1 f7       	brne	.-8      	; 0x28fe <_Z7pathto9v+0x8c>
    2906:	00 c0       	rjmp	.+0      	; 0x2908 <_Z7pathto9v+0x96>
    2908:	00 00       	nop
			_delay_ms(50);
			++count;
    290a:	80 91 3b 02 	lds	r24, 0x023B
    290e:	90 91 3c 02 	lds	r25, 0x023C
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	90 93 3c 02 	sts	0x023C, r25
    2918:	80 93 3b 02 	sts	0x023B, r24
    291c:	66 c1       	rjmp	.+716    	; 0x2bea <_Z7pathto9v+0x378>
			
		}
		else if(count==3){
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	11 f5       	brne	.+68     	; 0x2968 <_Z7pathto9v+0xf6>
			
			rotation_using_blackline_newleft();
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    292c:	8f ef       	ldi	r24, 0xFF	; 255
    292e:	9f e3       	ldi	r25, 0x3F	; 63
    2930:	a2 e0       	ldi	r26, 0x02	; 2
    2932:	81 50       	subi	r24, 0x01	; 1
    2934:	90 40       	sbci	r25, 0x00	; 0
    2936:	a0 40       	sbci	r26, 0x00	; 0
    2938:	e1 f7       	brne	.-8      	; 0x2932 <_Z7pathto9v+0xc0>
    293a:	00 c0       	rjmp	.+0      	; 0x293c <_Z7pathto9v+0xca>
    293c:	00 00       	nop
			_delay_ms(50);
			forward_black();
    293e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2942:	8f ef       	ldi	r24, 0xFF	; 255
    2944:	9f e3       	ldi	r25, 0x3F	; 63
    2946:	a2 e0       	ldi	r26, 0x02	; 2
    2948:	81 50       	subi	r24, 0x01	; 1
    294a:	90 40       	sbci	r25, 0x00	; 0
    294c:	a0 40       	sbci	r26, 0x00	; 0
    294e:	e1 f7       	brne	.-8      	; 0x2948 <_Z7pathto9v+0xd6>
    2950:	00 c0       	rjmp	.+0      	; 0x2952 <_Z7pathto9v+0xe0>
    2952:	00 00       	nop
			_delay_ms(50);
			++count;
    2954:	80 91 3b 02 	lds	r24, 0x023B
    2958:	90 91 3c 02 	lds	r25, 0x023C
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	90 93 3c 02 	sts	0x023C, r25
    2962:	80 93 3b 02 	sts	0x023B, r24
    2966:	41 c1       	rjmp	.+642    	; 0x2bea <_Z7pathto9v+0x378>
		
		}
		else if (count ==4)
    2968:	84 30       	cpi	r24, 0x04	; 4
    296a:	91 05       	cpc	r25, r1
    296c:	a9 f4       	brne	.+42     	; 0x2998 <_Z7pathto9v+0x126>
		{
			forward_from_node();
    296e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	9f e3       	ldi	r25, 0x3F	; 63
    2976:	a2 e0       	ldi	r26, 0x02	; 2
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	90 40       	sbci	r25, 0x00	; 0
    297c:	a0 40       	sbci	r26, 0x00	; 0
    297e:	e1 f7       	brne	.-8      	; 0x2978 <_Z7pathto9v+0x106>
    2980:	00 c0       	rjmp	.+0      	; 0x2982 <_Z7pathto9v+0x110>
    2982:	00 00       	nop
			_delay_ms(50);
			++count;
    2984:	80 91 3b 02 	lds	r24, 0x023B
    2988:	90 91 3c 02 	lds	r25, 0x023C
    298c:	01 96       	adiw	r24, 0x01	; 1
    298e:	90 93 3c 02 	sts	0x023C, r25
    2992:	80 93 3b 02 	sts	0x023B, r24
    2996:	29 c1       	rjmp	.+594    	; 0x2bea <_Z7pathto9v+0x378>
		}
		else if(count==5){
    2998:	85 30       	cpi	r24, 0x05	; 5
    299a:	91 05       	cpc	r25, r1
    299c:	09 f0       	breq	.+2      	; 0x29a0 <_Z7pathto9v+0x12e>
    299e:	46 c0       	rjmp	.+140    	; 0x2a2c <_Z7pathto9v+0x1ba>
			data = info_table[0][8];  			 
    29a0:	d8 01       	movw	r26, r16
    29a2:	8c 91       	ld	r24, X
    29a4:	80 93 3a 02 	sts	0x023A, r24
			velocity(120,60);
    29a8:	88 e7       	ldi	r24, 0x78	; 120
    29aa:	6c e3       	ldi	r22, 0x3C	; 60
    29ac:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    29b8:	8f ef       	ldi	r24, 0xFF	; 255
    29ba:	9f ef       	ldi	r25, 0xFF	; 255
    29bc:	a0 ee       	ldi	r26, 0xE0	; 224
    29be:	81 50       	subi	r24, 0x01	; 1
    29c0:	90 40       	sbci	r25, 0x00	; 0
    29c2:	a0 40       	sbci	r26, 0x00	; 0
    29c4:	e1 f7       	brne	.-8      	; 0x29be <_Z7pathto9v+0x14c>
    29c6:	00 c0       	rjmp	.+0      	; 0x29c8 <_Z7pathto9v+0x156>
    29c8:	00 00       	nop
			_delay_ms(5000);
			pickup();
    29ca:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			right_degrees(45);
    29ce:	8d e2       	ldi	r24, 0x2D	; 45
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	9f e3       	ldi	r25, 0x3F	; 63
    29da:	a2 e0       	ldi	r26, 0x02	; 2
    29dc:	81 50       	subi	r24, 0x01	; 1
    29de:	90 40       	sbci	r25, 0x00	; 0
    29e0:	a0 40       	sbci	r26, 0x00	; 0
    29e2:	e1 f7       	brne	.-8      	; 0x29dc <_Z7pathto9v+0x16a>
    29e4:	00 c0       	rjmp	.+0      	; 0x29e6 <_Z7pathto9v+0x174>
    29e6:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_right();
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z24rotation_blackline_rightj>
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	9f e3       	ldi	r25, 0x3F	; 63
    29f4:	a2 e0       	ldi	r26, 0x02	; 2
    29f6:	81 50       	subi	r24, 0x01	; 1
    29f8:	90 40       	sbci	r25, 0x00	; 0
    29fa:	a0 40       	sbci	r26, 0x00	; 0
    29fc:	e1 f7       	brne	.-8      	; 0x29f6 <_Z7pathto9v+0x184>
    29fe:	00 c0       	rjmp	.+0      	; 0x2a00 <_Z7pathto9v+0x18e>
    2a00:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2a02:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	9f e3       	ldi	r25, 0x3F	; 63
    2a0a:	a2 e0       	ldi	r26, 0x02	; 2
    2a0c:	81 50       	subi	r24, 0x01	; 1
    2a0e:	90 40       	sbci	r25, 0x00	; 0
    2a10:	a0 40       	sbci	r26, 0x00	; 0
    2a12:	e1 f7       	brne	.-8      	; 0x2a0c <_Z7pathto9v+0x19a>
    2a14:	00 c0       	rjmp	.+0      	; 0x2a16 <_Z7pathto9v+0x1a4>
    2a16:	00 00       	nop
			_delay_ms(50);
			++count;
    2a18:	80 91 3b 02 	lds	r24, 0x023B
    2a1c:	90 91 3c 02 	lds	r25, 0x023C
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	90 93 3c 02 	sts	0x023C, r25
    2a26:	80 93 3b 02 	sts	0x023B, r24
    2a2a:	df c0       	rjmp	.+446    	; 0x2bea <_Z7pathto9v+0x378>
			
		}
		else if(count ==6)
    2a2c:	86 30       	cpi	r24, 0x06	; 6
    2a2e:	91 05       	cpc	r25, r1
    2a30:	a9 f4       	brne	.+42     	; 0x2a5c <_Z7pathto9v+0x1ea>
		{
			forward_from_node();
    2a32:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	9f e3       	ldi	r25, 0x3F	; 63
    2a3a:	a2 e0       	ldi	r26, 0x02	; 2
    2a3c:	81 50       	subi	r24, 0x01	; 1
    2a3e:	90 40       	sbci	r25, 0x00	; 0
    2a40:	a0 40       	sbci	r26, 0x00	; 0
    2a42:	e1 f7       	brne	.-8      	; 0x2a3c <_Z7pathto9v+0x1ca>
    2a44:	00 c0       	rjmp	.+0      	; 0x2a46 <_Z7pathto9v+0x1d4>
    2a46:	00 00       	nop
			_delay_ms(50);
			++count;
    2a48:	80 91 3b 02 	lds	r24, 0x023B
    2a4c:	90 91 3c 02 	lds	r25, 0x023C
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	90 93 3c 02 	sts	0x023C, r25
    2a56:	80 93 3b 02 	sts	0x023B, r24
    2a5a:	c7 c0       	rjmp	.+398    	; 0x2bea <_Z7pathto9v+0x378>
		}
		else if(count==7){
    2a5c:	87 30       	cpi	r24, 0x07	; 7
    2a5e:	91 05       	cpc	r25, r1
    2a60:	31 f5       	brne	.+76     	; 0x2aae <_Z7pathto9v+0x23c>
			velocity(60,120);
    2a62:	8c e3       	ldi	r24, 0x3C	; 60
    2a64:	68 e7       	ldi	r22, 0x78	; 120
    2a66:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    2a72:	8f ef       	ldi	r24, 0xFF	; 255
    2a74:	9f e3       	ldi	r25, 0x3F	; 63
    2a76:	a2 e0       	ldi	r26, 0x02	; 2
    2a78:	81 50       	subi	r24, 0x01	; 1
    2a7a:	90 40       	sbci	r25, 0x00	; 0
    2a7c:	a0 40       	sbci	r26, 0x00	; 0
    2a7e:	e1 f7       	brne	.-8      	; 0x2a78 <_Z7pathto9v+0x206>
    2a80:	00 c0       	rjmp	.+0      	; 0x2a82 <_Z7pathto9v+0x210>
    2a82:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2a84:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	9f e3       	ldi	r25, 0x3F	; 63
    2a8c:	a2 e0       	ldi	r26, 0x02	; 2
    2a8e:	81 50       	subi	r24, 0x01	; 1
    2a90:	90 40       	sbci	r25, 0x00	; 0
    2a92:	a0 40       	sbci	r26, 0x00	; 0
    2a94:	e1 f7       	brne	.-8      	; 0x2a8e <_Z7pathto9v+0x21c>
    2a96:	00 c0       	rjmp	.+0      	; 0x2a98 <_Z7pathto9v+0x226>
    2a98:	00 00       	nop
			_delay_ms(50);
			++count;
    2a9a:	80 91 3b 02 	lds	r24, 0x023B
    2a9e:	90 91 3c 02 	lds	r25, 0x023C
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	90 93 3c 02 	sts	0x023C, r25
    2aa8:	80 93 3b 02 	sts	0x023B, r24
    2aac:	9e c0       	rjmp	.+316    	; 0x2bea <_Z7pathto9v+0x378>
			
		}
		else if(count==8){
    2aae:	88 30       	cpi	r24, 0x08	; 8
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	a9 f4       	brne	.+42     	; 0x2ade <_Z7pathto9v+0x26c>
			forward_from_node();
    2ab4:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2ab8:	8f ef       	ldi	r24, 0xFF	; 255
    2aba:	9f e3       	ldi	r25, 0x3F	; 63
    2abc:	a2 e0       	ldi	r26, 0x02	; 2
    2abe:	81 50       	subi	r24, 0x01	; 1
    2ac0:	90 40       	sbci	r25, 0x00	; 0
    2ac2:	a0 40       	sbci	r26, 0x00	; 0
    2ac4:	e1 f7       	brne	.-8      	; 0x2abe <_Z7pathto9v+0x24c>
    2ac6:	00 c0       	rjmp	.+0      	; 0x2ac8 <_Z7pathto9v+0x256>
    2ac8:	00 00       	nop
			_delay_ms(50);
			
			++count;
    2aca:	80 91 3b 02 	lds	r24, 0x023B
    2ace:	90 91 3c 02 	lds	r25, 0x023C
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	90 93 3c 02 	sts	0x023C, r25
    2ad8:	80 93 3b 02 	sts	0x023B, r24
    2adc:	86 c0       	rjmp	.+268    	; 0x2bea <_Z7pathto9v+0x378>
		
		}
		else if(count==9){
    2ade:	89 30       	cpi	r24, 0x09	; 9
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	69 f5       	brne	.+90     	; 0x2b3e <_Z7pathto9v+0x2cc>
			rotation_using_blackline_newleft();
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    2aec:	8f ef       	ldi	r24, 0xFF	; 255
    2aee:	9f e3       	ldi	r25, 0x3F	; 63
    2af0:	a2 e0       	ldi	r26, 0x02	; 2
    2af2:	81 50       	subi	r24, 0x01	; 1
    2af4:	90 40       	sbci	r25, 0x00	; 0
    2af6:	a0 40       	sbci	r26, 0x00	; 0
    2af8:	e1 f7       	brne	.-8      	; 0x2af2 <_Z7pathto9v+0x280>
    2afa:	00 c0       	rjmp	.+0      	; 0x2afc <_Z7pathto9v+0x28a>
    2afc:	00 00       	nop
			_delay_ms(50);
			turn_left();
    2afe:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	9f e3       	ldi	r25, 0x3F	; 63
    2b06:	a2 e0       	ldi	r26, 0x02	; 2
    2b08:	81 50       	subi	r24, 0x01	; 1
    2b0a:	90 40       	sbci	r25, 0x00	; 0
    2b0c:	a0 40       	sbci	r26, 0x00	; 0
    2b0e:	e1 f7       	brne	.-8      	; 0x2b08 <_Z7pathto9v+0x296>
    2b10:	00 c0       	rjmp	.+0      	; 0x2b12 <_Z7pathto9v+0x2a0>
    2b12:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2b14:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	9f e3       	ldi	r25, 0x3F	; 63
    2b1c:	a2 e0       	ldi	r26, 0x02	; 2
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	90 40       	sbci	r25, 0x00	; 0
    2b22:	a0 40       	sbci	r26, 0x00	; 0
    2b24:	e1 f7       	brne	.-8      	; 0x2b1e <_Z7pathto9v+0x2ac>
    2b26:	00 c0       	rjmp	.+0      	; 0x2b28 <_Z7pathto9v+0x2b6>
    2b28:	00 00       	nop
			_delay_ms(50);
			++count;
    2b2a:	80 91 3b 02 	lds	r24, 0x023B
    2b2e:	90 91 3c 02 	lds	r25, 0x023C
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	90 93 3c 02 	sts	0x023C, r25
    2b38:	80 93 3b 02 	sts	0x023B, r24
    2b3c:	56 c0       	rjmp	.+172    	; 0x2bea <_Z7pathto9v+0x378>
			
		}
		else if(count ==10)
    2b3e:	8a 30       	cpi	r24, 0x0A	; 10
    2b40:	91 05       	cpc	r25, r1
    2b42:	a9 f4       	brne	.+42     	; 0x2b6e <_Z7pathto9v+0x2fc>
		{
			forward_from_node();
    2b44:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2b48:	8f ef       	ldi	r24, 0xFF	; 255
    2b4a:	9f e3       	ldi	r25, 0x3F	; 63
    2b4c:	a2 e0       	ldi	r26, 0x02	; 2
    2b4e:	81 50       	subi	r24, 0x01	; 1
    2b50:	90 40       	sbci	r25, 0x00	; 0
    2b52:	a0 40       	sbci	r26, 0x00	; 0
    2b54:	e1 f7       	brne	.-8      	; 0x2b4e <_Z7pathto9v+0x2dc>
    2b56:	00 c0       	rjmp	.+0      	; 0x2b58 <_Z7pathto9v+0x2e6>
    2b58:	00 00       	nop
			_delay_ms(50);
			++count;
    2b5a:	80 91 3b 02 	lds	r24, 0x023B
    2b5e:	90 91 3c 02 	lds	r25, 0x023C
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	90 93 3c 02 	sts	0x023C, r25
    2b68:	80 93 3b 02 	sts	0x023B, r24
    2b6c:	3e c0       	rjmp	.+124    	; 0x2bea <_Z7pathto9v+0x378>
		}
		else if(count==11){
    2b6e:	8b 30       	cpi	r24, 0x0B	; 11
    2b70:	91 05       	cpc	r25, r1
    2b72:	d9 f5       	brne	.+118    	; 0x2bea <_Z7pathto9v+0x378>
			forward_from_node();
    2b74:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	9f e3       	ldi	r25, 0x3F	; 63
    2b7c:	a2 e0       	ldi	r26, 0x02	; 2
    2b7e:	81 50       	subi	r24, 0x01	; 1
    2b80:	90 40       	sbci	r25, 0x00	; 0
    2b82:	a0 40       	sbci	r26, 0x00	; 0
    2b84:	e1 f7       	brne	.-8      	; 0x2b7e <_Z7pathto9v+0x30c>
    2b86:	00 c0       	rjmp	.+0      	; 0x2b88 <_Z7pathto9v+0x316>
    2b88:	00 00       	nop
			_delay_ms(50);
			drop();
    2b8a:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][8] + 4 ; 
    2b8e:	d8 01       	movw	r26, r16
    2b90:	8c 91       	ld	r24, X
    2b92:	8c 5f       	subi	r24, 0xFC	; 252
    2b94:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    2b98:	8d e2       	ldi	r24, 0x2D	; 45
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    2ba0:	8f ef       	ldi	r24, 0xFF	; 255
    2ba2:	9f e3       	ldi	r25, 0x3F	; 63
    2ba4:	a2 e0       	ldi	r26, 0x02	; 2
    2ba6:	81 50       	subi	r24, 0x01	; 1
    2ba8:	90 40       	sbci	r25, 0x00	; 0
    2baa:	a0 40       	sbci	r26, 0x00	; 0
    2bac:	e1 f7       	brne	.-8      	; 0x2ba6 <_Z7pathto9v+0x334>
    2bae:	00 c0       	rjmp	.+0      	; 0x2bb0 <_Z7pathto9v+0x33e>
    2bb0:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    2bba:	8f ef       	ldi	r24, 0xFF	; 255
    2bbc:	9f e3       	ldi	r25, 0x3F	; 63
    2bbe:	a2 e0       	ldi	r26, 0x02	; 2
    2bc0:	81 50       	subi	r24, 0x01	; 1
    2bc2:	90 40       	sbci	r25, 0x00	; 0
    2bc4:	a0 40       	sbci	r26, 0x00	; 0
    2bc6:	e1 f7       	brne	.-8      	; 0x2bc0 <_Z7pathto9v+0x34e>
    2bc8:	00 c0       	rjmp	.+0      	; 0x2bca <_Z7pathto9v+0x358>
    2bca:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2bcc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2bd0:	8f ef       	ldi	r24, 0xFF	; 255
    2bd2:	9f e3       	ldi	r25, 0x3F	; 63
    2bd4:	a2 e0       	ldi	r26, 0x02	; 2
    2bd6:	81 50       	subi	r24, 0x01	; 1
    2bd8:	90 40       	sbci	r25, 0x00	; 0
    2bda:	a0 40       	sbci	r26, 0x00	; 0
    2bdc:	e1 f7       	brne	.-8      	; 0x2bd6 <_Z7pathto9v+0x364>
    2bde:	00 c0       	rjmp	.+0      	; 0x2be0 <_Z7pathto9v+0x36e>
    2be0:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    2be2:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
			
		
			reset_count();									//call count reset function to reset it to 0
    2be6:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    2bea:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void pathto9()
{
	for( int i =0; i<12;i++){
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <_Z7pathto9v+0x37e>
    2bee:	49 ce       	rjmp	.-878    	; 0x2882 <_Z7pathto9v+0x10>
			
		
			reset_count();									//call count reset function to reset it to 0
		}
	}
}
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	08 95       	ret

00002bfa <_Z8pathto10v>:

void pathto10()
{
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	ca e0       	ldi	r28, 0x0A	; 10
    2c04:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==9){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][9]; 
    2c06:	02 e1       	ldi	r16, 0x12	; 18
    2c08:	12 e0       	ldi	r17, 0x02	; 2

void pathto10()
{
	
	for( int i =0; i<10;i++){
		lcd_print(1,1,count,3);
    2c0a:	40 91 3b 02 	lds	r20, 0x023B
    2c0e:	50 91 3c 02 	lds	r21, 0x023C
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	23 e0       	ldi	r18, 0x03	; 3
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    2c1e:	80 91 3b 02 	lds	r24, 0x023B
    2c22:	90 91 3c 02 	lds	r25, 0x023C
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	19 f4       	brne	.+6      	; 0x2c30 <_Z8pathto10v+0x36>
			stop();
    2c2a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    2c2e:	73 c1       	rjmp	.+742    	; 0x2f16 <_Z8pathto10v+0x31c>
		}
		else if(count==1){
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	91 05       	cpc	r25, r1
    2c34:	01 f5       	brne	.+64     	; 0x2c76 <_Z8pathto10v+0x7c>
			rotation_using_blackline_right();
    2c36:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	9f e3       	ldi	r25, 0x3F	; 63
    2c3e:	a2 e0       	ldi	r26, 0x02	; 2
    2c40:	81 50       	subi	r24, 0x01	; 1
    2c42:	90 40       	sbci	r25, 0x00	; 0
    2c44:	a0 40       	sbci	r26, 0x00	; 0
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <_Z8pathto10v+0x46>
    2c48:	00 c0       	rjmp	.+0      	; 0x2c4a <_Z8pathto10v+0x50>
    2c4a:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2c4c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    2c50:	80 91 3b 02 	lds	r24, 0x023B
    2c54:	90 91 3c 02 	lds	r25, 0x023C
    2c58:	01 96       	adiw	r24, 0x01	; 1
    2c5a:	90 93 3c 02 	sts	0x023C, r25
    2c5e:	80 93 3b 02 	sts	0x023B, r24
    2c62:	8f ef       	ldi	r24, 0xFF	; 255
    2c64:	9f e3       	ldi	r25, 0x3F	; 63
    2c66:	a2 e0       	ldi	r26, 0x02	; 2
    2c68:	81 50       	subi	r24, 0x01	; 1
    2c6a:	90 40       	sbci	r25, 0x00	; 0
    2c6c:	a0 40       	sbci	r26, 0x00	; 0
    2c6e:	e1 f7       	brne	.-8      	; 0x2c68 <_Z8pathto10v+0x6e>
    2c70:	00 c0       	rjmp	.+0      	; 0x2c72 <_Z8pathto10v+0x78>
    2c72:	00 00       	nop
    2c74:	4d c1       	rjmp	.+666    	; 0x2f10 <_Z8pathto10v+0x316>
			_delay_ms(50);
			
		}
		else if(count==2){
    2c76:	82 30       	cpi	r24, 0x02	; 2
    2c78:	91 05       	cpc	r25, r1
    2c7a:	a9 f4       	brne	.+42     	; 0x2ca6 <_Z8pathto10v+0xac>
			forward_from_node();
    2c7c:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2c80:	8f ef       	ldi	r24, 0xFF	; 255
    2c82:	9f e3       	ldi	r25, 0x3F	; 63
    2c84:	a2 e0       	ldi	r26, 0x02	; 2
    2c86:	81 50       	subi	r24, 0x01	; 1
    2c88:	90 40       	sbci	r25, 0x00	; 0
    2c8a:	a0 40       	sbci	r26, 0x00	; 0
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <_Z8pathto10v+0x8c>
    2c8e:	00 c0       	rjmp	.+0      	; 0x2c90 <_Z8pathto10v+0x96>
    2c90:	00 00       	nop
			_delay_ms(50);
			++count;
    2c92:	80 91 3b 02 	lds	r24, 0x023B
    2c96:	90 91 3c 02 	lds	r25, 0x023C
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	90 93 3c 02 	sts	0x023C, r25
    2ca0:	80 93 3b 02 	sts	0x023B, r24
    2ca4:	35 c1       	rjmp	.+618    	; 0x2f10 <_Z8pathto10v+0x316>
			
		}
		else if(count==3){
    2ca6:	83 30       	cpi	r24, 0x03	; 3
    2ca8:	91 05       	cpc	r25, r1
    2caa:	11 f5       	brne	.+68     	; 0x2cf0 <_Z8pathto10v+0xf6>
			
			rotation_using_blackline_newleft();
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    2cb4:	8f ef       	ldi	r24, 0xFF	; 255
    2cb6:	9f e3       	ldi	r25, 0x3F	; 63
    2cb8:	a2 e0       	ldi	r26, 0x02	; 2
    2cba:	81 50       	subi	r24, 0x01	; 1
    2cbc:	90 40       	sbci	r25, 0x00	; 0
    2cbe:	a0 40       	sbci	r26, 0x00	; 0
    2cc0:	e1 f7       	brne	.-8      	; 0x2cba <_Z8pathto10v+0xc0>
    2cc2:	00 c0       	rjmp	.+0      	; 0x2cc4 <_Z8pathto10v+0xca>
    2cc4:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2cc6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2cca:	8f ef       	ldi	r24, 0xFF	; 255
    2ccc:	9f e3       	ldi	r25, 0x3F	; 63
    2cce:	a2 e0       	ldi	r26, 0x02	; 2
    2cd0:	81 50       	subi	r24, 0x01	; 1
    2cd2:	90 40       	sbci	r25, 0x00	; 0
    2cd4:	a0 40       	sbci	r26, 0x00	; 0
    2cd6:	e1 f7       	brne	.-8      	; 0x2cd0 <_Z8pathto10v+0xd6>
    2cd8:	00 c0       	rjmp	.+0      	; 0x2cda <_Z8pathto10v+0xe0>
    2cda:	00 00       	nop
			_delay_ms(50);
			++count;
    2cdc:	80 91 3b 02 	lds	r24, 0x023B
    2ce0:	90 91 3c 02 	lds	r25, 0x023C
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	90 93 3c 02 	sts	0x023C, r25
    2cea:	80 93 3b 02 	sts	0x023B, r24
    2cee:	10 c1       	rjmp	.+544    	; 0x2f10 <_Z8pathto10v+0x316>
			
		}
		else if(count==4){
    2cf0:	84 30       	cpi	r24, 0x04	; 4
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <_Z8pathto10v+0xfe>
    2cf6:	46 c0       	rjmp	.+140    	; 0x2d84 <_Z8pathto10v+0x18a>
			data = info_table[0][9] ;  			   
    2cf8:	d8 01       	movw	r26, r16
    2cfa:	8c 91       	ld	r24, X
    2cfc:	80 93 3a 02 	sts	0x023A, r24
			velocity(120,60);
    2d00:	88 e7       	ldi	r24, 0x78	; 120
    2d02:	6c e3       	ldi	r22, 0x3C	; 60
    2d04:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	9f ef       	ldi	r25, 0xFF	; 255
    2d14:	a0 ee       	ldi	r26, 0xE0	; 224
    2d16:	81 50       	subi	r24, 0x01	; 1
    2d18:	90 40       	sbci	r25, 0x00	; 0
    2d1a:	a0 40       	sbci	r26, 0x00	; 0
    2d1c:	e1 f7       	brne	.-8      	; 0x2d16 <_Z8pathto10v+0x11c>
    2d1e:	00 c0       	rjmp	.+0      	; 0x2d20 <_Z8pathto10v+0x126>
    2d20:	00 00       	nop
			_delay_ms(5000);
			pickup();
    2d22:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			right_degrees(45);
    2d26:	8d e2       	ldi	r24, 0x2D	; 45
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 48 04 	call	0x890	; 0x890 <_Z13right_degreesj>
    2d2e:	8f ef       	ldi	r24, 0xFF	; 255
    2d30:	9f e3       	ldi	r25, 0x3F	; 63
    2d32:	a2 e0       	ldi	r26, 0x02	; 2
    2d34:	81 50       	subi	r24, 0x01	; 1
    2d36:	90 40       	sbci	r25, 0x00	; 0
    2d38:	a0 40       	sbci	r26, 0x00	; 0
    2d3a:	e1 f7       	brne	.-8      	; 0x2d34 <_Z8pathto10v+0x13a>
    2d3c:	00 c0       	rjmp	.+0      	; 0x2d3e <_Z8pathto10v+0x144>
    2d3e:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_right();
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z24rotation_blackline_rightj>
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	9f e3       	ldi	r25, 0x3F	; 63
    2d4c:	a2 e0       	ldi	r26, 0x02	; 2
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	90 40       	sbci	r25, 0x00	; 0
    2d52:	a0 40       	sbci	r26, 0x00	; 0
    2d54:	e1 f7       	brne	.-8      	; 0x2d4e <_Z8pathto10v+0x154>
    2d56:	00 c0       	rjmp	.+0      	; 0x2d58 <_Z8pathto10v+0x15e>
    2d58:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2d5a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2d5e:	8f ef       	ldi	r24, 0xFF	; 255
    2d60:	9f e3       	ldi	r25, 0x3F	; 63
    2d62:	a2 e0       	ldi	r26, 0x02	; 2
    2d64:	81 50       	subi	r24, 0x01	; 1
    2d66:	90 40       	sbci	r25, 0x00	; 0
    2d68:	a0 40       	sbci	r26, 0x00	; 0
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <_Z8pathto10v+0x16a>
    2d6c:	00 c0       	rjmp	.+0      	; 0x2d6e <_Z8pathto10v+0x174>
    2d6e:	00 00       	nop
			_delay_ms(50);
			++count;
    2d70:	80 91 3b 02 	lds	r24, 0x023B
    2d74:	90 91 3c 02 	lds	r25, 0x023C
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	90 93 3c 02 	sts	0x023C, r25
    2d7e:	80 93 3b 02 	sts	0x023B, r24
    2d82:	c6 c0       	rjmp	.+396    	; 0x2f10 <_Z8pathto10v+0x316>
		
		}
		else if(count==5){
    2d84:	85 30       	cpi	r24, 0x05	; 5
    2d86:	91 05       	cpc	r25, r1
    2d88:	31 f5       	brne	.+76     	; 0x2dd6 <_Z8pathto10v+0x1dc>
			velocity(60,120);
    2d8a:	8c e3       	ldi	r24, 0x3C	; 60
    2d8c:	68 e7       	ldi	r22, 0x78	; 120
    2d8e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	9f e3       	ldi	r25, 0x3F	; 63
    2d9e:	a2 e0       	ldi	r26, 0x02	; 2
    2da0:	81 50       	subi	r24, 0x01	; 1
    2da2:	90 40       	sbci	r25, 0x00	; 0
    2da4:	a0 40       	sbci	r26, 0x00	; 0
    2da6:	e1 f7       	brne	.-8      	; 0x2da0 <_Z8pathto10v+0x1a6>
    2da8:	00 c0       	rjmp	.+0      	; 0x2daa <_Z8pathto10v+0x1b0>
    2daa:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2dac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	9f e3       	ldi	r25, 0x3F	; 63
    2db4:	a2 e0       	ldi	r26, 0x02	; 2
    2db6:	81 50       	subi	r24, 0x01	; 1
    2db8:	90 40       	sbci	r25, 0x00	; 0
    2dba:	a0 40       	sbci	r26, 0x00	; 0
    2dbc:	e1 f7       	brne	.-8      	; 0x2db6 <_Z8pathto10v+0x1bc>
    2dbe:	00 c0       	rjmp	.+0      	; 0x2dc0 <_Z8pathto10v+0x1c6>
    2dc0:	00 00       	nop
			_delay_ms(50);
			++count;
    2dc2:	80 91 3b 02 	lds	r24, 0x023B
    2dc6:	90 91 3c 02 	lds	r25, 0x023C
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	90 93 3c 02 	sts	0x023C, r25
    2dd0:	80 93 3b 02 	sts	0x023B, r24
    2dd4:	9d c0       	rjmp	.+314    	; 0x2f10 <_Z8pathto10v+0x316>
			
		}
		else if(count==6){
    2dd6:	86 30       	cpi	r24, 0x06	; 6
    2dd8:	91 05       	cpc	r25, r1
    2dda:	a9 f4       	brne	.+42     	; 0x2e06 <_Z8pathto10v+0x20c>
			forward_from_node();
    2ddc:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2de0:	8f ef       	ldi	r24, 0xFF	; 255
    2de2:	9f e3       	ldi	r25, 0x3F	; 63
    2de4:	a2 e0       	ldi	r26, 0x02	; 2
    2de6:	81 50       	subi	r24, 0x01	; 1
    2de8:	90 40       	sbci	r25, 0x00	; 0
    2dea:	a0 40       	sbci	r26, 0x00	; 0
    2dec:	e1 f7       	brne	.-8      	; 0x2de6 <_Z8pathto10v+0x1ec>
    2dee:	00 c0       	rjmp	.+0      	; 0x2df0 <_Z8pathto10v+0x1f6>
    2df0:	00 00       	nop
			_delay_ms(50);
			
			++count;
    2df2:	80 91 3b 02 	lds	r24, 0x023B
    2df6:	90 91 3c 02 	lds	r25, 0x023C
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	90 93 3c 02 	sts	0x023C, r25
    2e00:	80 93 3b 02 	sts	0x023B, r24
    2e04:	85 c0       	rjmp	.+266    	; 0x2f10 <_Z8pathto10v+0x316>
			
		}
		else if(count==7){
    2e06:	87 30       	cpi	r24, 0x07	; 7
    2e08:	91 05       	cpc	r25, r1
    2e0a:	69 f5       	brne	.+90     	; 0x2e66 <_Z8pathto10v+0x26c>
			rotation_using_blackline_newleft();
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	9f e3       	ldi	r25, 0x3F	; 63
    2e18:	a2 e0       	ldi	r26, 0x02	; 2
    2e1a:	81 50       	subi	r24, 0x01	; 1
    2e1c:	90 40       	sbci	r25, 0x00	; 0
    2e1e:	a0 40       	sbci	r26, 0x00	; 0
    2e20:	e1 f7       	brne	.-8      	; 0x2e1a <_Z8pathto10v+0x220>
    2e22:	00 c0       	rjmp	.+0      	; 0x2e24 <_Z8pathto10v+0x22a>
    2e24:	00 00       	nop
			_delay_ms(50);
			turn_left();
    2e26:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
    2e2a:	8f ef       	ldi	r24, 0xFF	; 255
    2e2c:	9f e3       	ldi	r25, 0x3F	; 63
    2e2e:	a2 e0       	ldi	r26, 0x02	; 2
    2e30:	81 50       	subi	r24, 0x01	; 1
    2e32:	90 40       	sbci	r25, 0x00	; 0
    2e34:	a0 40       	sbci	r26, 0x00	; 0
    2e36:	e1 f7       	brne	.-8      	; 0x2e30 <_Z8pathto10v+0x236>
    2e38:	00 c0       	rjmp	.+0      	; 0x2e3a <_Z8pathto10v+0x240>
    2e3a:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2e3c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	9f e3       	ldi	r25, 0x3F	; 63
    2e44:	a2 e0       	ldi	r26, 0x02	; 2
    2e46:	81 50       	subi	r24, 0x01	; 1
    2e48:	90 40       	sbci	r25, 0x00	; 0
    2e4a:	a0 40       	sbci	r26, 0x00	; 0
    2e4c:	e1 f7       	brne	.-8      	; 0x2e46 <_Z8pathto10v+0x24c>
    2e4e:	00 c0       	rjmp	.+0      	; 0x2e50 <_Z8pathto10v+0x256>
    2e50:	00 00       	nop
			_delay_ms(50);
			++count;
    2e52:	80 91 3b 02 	lds	r24, 0x023B
    2e56:	90 91 3c 02 	lds	r25, 0x023C
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	90 93 3c 02 	sts	0x023C, r25
    2e60:	80 93 3b 02 	sts	0x023B, r24
    2e64:	55 c0       	rjmp	.+170    	; 0x2f10 <_Z8pathto10v+0x316>
			
		}
		else if(count ==8)
    2e66:	88 30       	cpi	r24, 0x08	; 8
    2e68:	91 05       	cpc	r25, r1
    2e6a:	a9 f4       	brne	.+42     	; 0x2e96 <_Z8pathto10v+0x29c>
		{
			forward_from_node();
    2e6c:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2e70:	8f ef       	ldi	r24, 0xFF	; 255
    2e72:	9f e3       	ldi	r25, 0x3F	; 63
    2e74:	a2 e0       	ldi	r26, 0x02	; 2
    2e76:	81 50       	subi	r24, 0x01	; 1
    2e78:	90 40       	sbci	r25, 0x00	; 0
    2e7a:	a0 40       	sbci	r26, 0x00	; 0
    2e7c:	e1 f7       	brne	.-8      	; 0x2e76 <_Z8pathto10v+0x27c>
    2e7e:	00 c0       	rjmp	.+0      	; 0x2e80 <_Z8pathto10v+0x286>
    2e80:	00 00       	nop
			_delay_ms(50);
			++count;
    2e82:	80 91 3b 02 	lds	r24, 0x023B
    2e86:	90 91 3c 02 	lds	r25, 0x023C
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	90 93 3c 02 	sts	0x023C, r25
    2e90:	80 93 3b 02 	sts	0x023B, r24
    2e94:	3d c0       	rjmp	.+122    	; 0x2f10 <_Z8pathto10v+0x316>
		}
		else if(count==9){
    2e96:	89 30       	cpi	r24, 0x09	; 9
    2e98:	91 05       	cpc	r25, r1
    2e9a:	d1 f5       	brne	.+116    	; 0x2f10 <_Z8pathto10v+0x316>
			forward_from_node();
    2e9c:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	9f e3       	ldi	r25, 0x3F	; 63
    2ea4:	a2 e0       	ldi	r26, 0x02	; 2
    2ea6:	81 50       	subi	r24, 0x01	; 1
    2ea8:	90 40       	sbci	r25, 0x00	; 0
    2eaa:	a0 40       	sbci	r26, 0x00	; 0
    2eac:	e1 f7       	brne	.-8      	; 0x2ea6 <_Z8pathto10v+0x2ac>
    2eae:	00 c0       	rjmp	.+0      	; 0x2eb0 <_Z8pathto10v+0x2b6>
    2eb0:	00 00       	nop
			_delay_ms(50);
			drop();
    2eb2:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][9]; 
    2eb6:	d8 01       	movw	r26, r16
    2eb8:	8c 91       	ld	r24, X
    2eba:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    2ebe:	8d e2       	ldi	r24, 0x2D	; 45
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    2ec6:	8f ef       	ldi	r24, 0xFF	; 255
    2ec8:	9f e3       	ldi	r25, 0x3F	; 63
    2eca:	a2 e0       	ldi	r26, 0x02	; 2
    2ecc:	81 50       	subi	r24, 0x01	; 1
    2ece:	90 40       	sbci	r25, 0x00	; 0
    2ed0:	a0 40       	sbci	r26, 0x00	; 0
    2ed2:	e1 f7       	brne	.-8      	; 0x2ecc <_Z8pathto10v+0x2d2>
    2ed4:	00 c0       	rjmp	.+0      	; 0x2ed6 <_Z8pathto10v+0x2dc>
    2ed6:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    2ee0:	8f ef       	ldi	r24, 0xFF	; 255
    2ee2:	9f e3       	ldi	r25, 0x3F	; 63
    2ee4:	a2 e0       	ldi	r26, 0x02	; 2
    2ee6:	81 50       	subi	r24, 0x01	; 1
    2ee8:	90 40       	sbci	r25, 0x00	; 0
    2eea:	a0 40       	sbci	r26, 0x00	; 0
    2eec:	e1 f7       	brne	.-8      	; 0x2ee6 <_Z8pathto10v+0x2ec>
    2eee:	00 c0       	rjmp	.+0      	; 0x2ef0 <_Z8pathto10v+0x2f6>
    2ef0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2ef2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	9f e3       	ldi	r25, 0x3F	; 63
    2efa:	a2 e0       	ldi	r26, 0x02	; 2
    2efc:	81 50       	subi	r24, 0x01	; 1
    2efe:	90 40       	sbci	r25, 0x00	; 0
    2f00:	a0 40       	sbci	r26, 0x00	; 0
    2f02:	e1 f7       	brne	.-8      	; 0x2efc <_Z8pathto10v+0x302>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <_Z8pathto10v+0x30c>
    2f06:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    2f08:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
			
			reset_count();									//call count reset function to reset it to 0
    2f0c:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    2f10:	21 97       	sbiw	r28, 0x01	; 1
}

void pathto10()
{
	
	for( int i =0; i<10;i++){
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <_Z8pathto10v+0x31c>
    2f14:	7a ce       	rjmp	.-780    	; 0x2c0a <_Z8pathto10v+0x10>
			
			reset_count();									//call count reset function to reset it to 0
		}
	}
	
}
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <_Z8pathto11v>:

void pathto11()
{
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	ca e0       	ldi	r28, 0x0A	; 10
    2f2a:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==9){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][10]+ 4; 
    2f2c:	04 e1       	ldi	r16, 0x14	; 20
    2f2e:	12 e0       	ldi	r17, 0x02	; 2

void pathto11()
{
	
	for( int i =0; i<10;i++){
		lcd_print(1,1,count,3);
    2f30:	40 91 3b 02 	lds	r20, 0x023B
    2f34:	50 91 3c 02 	lds	r21, 0x023C
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	61 e0       	ldi	r22, 0x01	; 1
    2f3c:	23 e0       	ldi	r18, 0x03	; 3
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    2f44:	80 91 3b 02 	lds	r24, 0x023B
    2f48:	90 91 3c 02 	lds	r25, 0x023C
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	19 f4       	brne	.+6      	; 0x2f56 <_Z8pathto11v+0x36>
			stop();
    2f50:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    2f54:	74 c1       	rjmp	.+744    	; 0x323e <_Z8pathto11v+0x31e>
		}
		else if(count==1){
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	91 05       	cpc	r25, r1
    2f5a:	01 f5       	brne	.+64     	; 0x2f9c <_Z8pathto11v+0x7c>
			rotation_using_blackline_right();
    2f5c:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	9f e3       	ldi	r25, 0x3F	; 63
    2f64:	a2 e0       	ldi	r26, 0x02	; 2
    2f66:	81 50       	subi	r24, 0x01	; 1
    2f68:	90 40       	sbci	r25, 0x00	; 0
    2f6a:	a0 40       	sbci	r26, 0x00	; 0
    2f6c:	e1 f7       	brne	.-8      	; 0x2f66 <_Z8pathto11v+0x46>
    2f6e:	00 c0       	rjmp	.+0      	; 0x2f70 <_Z8pathto11v+0x50>
    2f70:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2f72:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    2f76:	80 91 3b 02 	lds	r24, 0x023B
    2f7a:	90 91 3c 02 	lds	r25, 0x023C
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	90 93 3c 02 	sts	0x023C, r25
    2f84:	80 93 3b 02 	sts	0x023B, r24
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	9f e3       	ldi	r25, 0x3F	; 63
    2f8c:	a2 e0       	ldi	r26, 0x02	; 2
    2f8e:	81 50       	subi	r24, 0x01	; 1
    2f90:	90 40       	sbci	r25, 0x00	; 0
    2f92:	a0 40       	sbci	r26, 0x00	; 0
    2f94:	e1 f7       	brne	.-8      	; 0x2f8e <_Z8pathto11v+0x6e>
    2f96:	00 c0       	rjmp	.+0      	; 0x2f98 <_Z8pathto11v+0x78>
    2f98:	00 00       	nop
    2f9a:	4e c1       	rjmp	.+668    	; 0x3238 <_Z8pathto11v+0x318>
			_delay_ms(50);
			
		}
		else if(count==2){
    2f9c:	82 30       	cpi	r24, 0x02	; 2
    2f9e:	91 05       	cpc	r25, r1
    2fa0:	a9 f4       	brne	.+42     	; 0x2fcc <_Z8pathto11v+0xac>
			forward_from_node();
    2fa2:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    2fa6:	8f ef       	ldi	r24, 0xFF	; 255
    2fa8:	9f e3       	ldi	r25, 0x3F	; 63
    2faa:	a2 e0       	ldi	r26, 0x02	; 2
    2fac:	81 50       	subi	r24, 0x01	; 1
    2fae:	90 40       	sbci	r25, 0x00	; 0
    2fb0:	a0 40       	sbci	r26, 0x00	; 0
    2fb2:	e1 f7       	brne	.-8      	; 0x2fac <_Z8pathto11v+0x8c>
    2fb4:	00 c0       	rjmp	.+0      	; 0x2fb6 <_Z8pathto11v+0x96>
    2fb6:	00 00       	nop
			_delay_ms(50);
			++count;
    2fb8:	80 91 3b 02 	lds	r24, 0x023B
    2fbc:	90 91 3c 02 	lds	r25, 0x023C
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	90 93 3c 02 	sts	0x023C, r25
    2fc6:	80 93 3b 02 	sts	0x023B, r24
    2fca:	36 c1       	rjmp	.+620    	; 0x3238 <_Z8pathto11v+0x318>
			
		}
		else if(count==3){
    2fcc:	83 30       	cpi	r24, 0x03	; 3
    2fce:	91 05       	cpc	r25, r1
    2fd0:	11 f5       	brne	.+68     	; 0x3016 <_Z8pathto11v+0xf6>
			
			rotation_using_blackline_newright();
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    2fda:	8f ef       	ldi	r24, 0xFF	; 255
    2fdc:	9f e3       	ldi	r25, 0x3F	; 63
    2fde:	a2 e0       	ldi	r26, 0x02	; 2
    2fe0:	81 50       	subi	r24, 0x01	; 1
    2fe2:	90 40       	sbci	r25, 0x00	; 0
    2fe4:	a0 40       	sbci	r26, 0x00	; 0
    2fe6:	e1 f7       	brne	.-8      	; 0x2fe0 <_Z8pathto11v+0xc0>
    2fe8:	00 c0       	rjmp	.+0      	; 0x2fea <_Z8pathto11v+0xca>
    2fea:	00 00       	nop
			_delay_ms(50);
			forward_black();
    2fec:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    2ff0:	8f ef       	ldi	r24, 0xFF	; 255
    2ff2:	9f e3       	ldi	r25, 0x3F	; 63
    2ff4:	a2 e0       	ldi	r26, 0x02	; 2
    2ff6:	81 50       	subi	r24, 0x01	; 1
    2ff8:	90 40       	sbci	r25, 0x00	; 0
    2ffa:	a0 40       	sbci	r26, 0x00	; 0
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <_Z8pathto11v+0xd6>
    2ffe:	00 c0       	rjmp	.+0      	; 0x3000 <_Z8pathto11v+0xe0>
    3000:	00 00       	nop
			_delay_ms(50);
			++count;
    3002:	80 91 3b 02 	lds	r24, 0x023B
    3006:	90 91 3c 02 	lds	r25, 0x023C
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	90 93 3c 02 	sts	0x023C, r25
    3010:	80 93 3b 02 	sts	0x023B, r24
    3014:	11 c1       	rjmp	.+546    	; 0x3238 <_Z8pathto11v+0x318>
		
		}
		else if(count==4){
    3016:	84 30       	cpi	r24, 0x04	; 4
    3018:	91 05       	cpc	r25, r1
    301a:	09 f0       	breq	.+2      	; 0x301e <_Z8pathto11v+0xfe>
    301c:	46 c0       	rjmp	.+140    	; 0x30aa <_Z8pathto11v+0x18a>
			data = info_table[0][10] ;  			  
    301e:	d8 01       	movw	r26, r16
    3020:	8c 91       	ld	r24, X
    3022:	80 93 3a 02 	sts	0x023A, r24
			velocity(120,60);
    3026:	88 e7       	ldi	r24, 0x78	; 120
    3028:	6c e3       	ldi	r22, 0x3C	; 60
    302a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    3036:	8f ef       	ldi	r24, 0xFF	; 255
    3038:	9f ef       	ldi	r25, 0xFF	; 255
    303a:	a0 ee       	ldi	r26, 0xE0	; 224
    303c:	81 50       	subi	r24, 0x01	; 1
    303e:	90 40       	sbci	r25, 0x00	; 0
    3040:	a0 40       	sbci	r26, 0x00	; 0
    3042:	e1 f7       	brne	.-8      	; 0x303c <_Z8pathto11v+0x11c>
    3044:	00 c0       	rjmp	.+0      	; 0x3046 <_Z8pathto11v+0x126>
    3046:	00 00       	nop
			_delay_ms(5000);
			pickup();
    3048:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			left_degrees(45);
    304c:	8d e2       	ldi	r24, 0x2D	; 45
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    3054:	8f ef       	ldi	r24, 0xFF	; 255
    3056:	9f e3       	ldi	r25, 0x3F	; 63
    3058:	a2 e0       	ldi	r26, 0x02	; 2
    305a:	81 50       	subi	r24, 0x01	; 1
    305c:	90 40       	sbci	r25, 0x00	; 0
    305e:	a0 40       	sbci	r26, 0x00	; 0
    3060:	e1 f7       	brne	.-8      	; 0x305a <_Z8pathto11v+0x13a>
    3062:	00 c0       	rjmp	.+0      	; 0x3064 <_Z8pathto11v+0x144>
    3064:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    306e:	8f ef       	ldi	r24, 0xFF	; 255
    3070:	9f e3       	ldi	r25, 0x3F	; 63
    3072:	a2 e0       	ldi	r26, 0x02	; 2
    3074:	81 50       	subi	r24, 0x01	; 1
    3076:	90 40       	sbci	r25, 0x00	; 0
    3078:	a0 40       	sbci	r26, 0x00	; 0
    307a:	e1 f7       	brne	.-8      	; 0x3074 <_Z8pathto11v+0x154>
    307c:	00 c0       	rjmp	.+0      	; 0x307e <_Z8pathto11v+0x15e>
    307e:	00 00       	nop
			_delay_ms(50);
			forward_black();
    3080:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    3084:	8f ef       	ldi	r24, 0xFF	; 255
    3086:	9f e3       	ldi	r25, 0x3F	; 63
    3088:	a2 e0       	ldi	r26, 0x02	; 2
    308a:	81 50       	subi	r24, 0x01	; 1
    308c:	90 40       	sbci	r25, 0x00	; 0
    308e:	a0 40       	sbci	r26, 0x00	; 0
    3090:	e1 f7       	brne	.-8      	; 0x308a <_Z8pathto11v+0x16a>
    3092:	00 c0       	rjmp	.+0      	; 0x3094 <_Z8pathto11v+0x174>
    3094:	00 00       	nop
			_delay_ms(50);
			++count;
    3096:	80 91 3b 02 	lds	r24, 0x023B
    309a:	90 91 3c 02 	lds	r25, 0x023C
    309e:	01 96       	adiw	r24, 0x01	; 1
    30a0:	90 93 3c 02 	sts	0x023C, r25
    30a4:	80 93 3b 02 	sts	0x023B, r24
    30a8:	c7 c0       	rjmp	.+398    	; 0x3238 <_Z8pathto11v+0x318>
			
		}
		else if(count==5){
    30aa:	85 30       	cpi	r24, 0x05	; 5
    30ac:	91 05       	cpc	r25, r1
    30ae:	31 f5       	brne	.+76     	; 0x30fc <_Z8pathto11v+0x1dc>
			velocity(60,120);
    30b0:	8c e3       	ldi	r24, 0x3C	; 60
    30b2:	68 e7       	ldi	r22, 0x78	; 120
    30b4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    30c0:	8f ef       	ldi	r24, 0xFF	; 255
    30c2:	9f e3       	ldi	r25, 0x3F	; 63
    30c4:	a2 e0       	ldi	r26, 0x02	; 2
    30c6:	81 50       	subi	r24, 0x01	; 1
    30c8:	90 40       	sbci	r25, 0x00	; 0
    30ca:	a0 40       	sbci	r26, 0x00	; 0
    30cc:	e1 f7       	brne	.-8      	; 0x30c6 <_Z8pathto11v+0x1a6>
    30ce:	00 c0       	rjmp	.+0      	; 0x30d0 <_Z8pathto11v+0x1b0>
    30d0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    30d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    30d6:	8f ef       	ldi	r24, 0xFF	; 255
    30d8:	9f e3       	ldi	r25, 0x3F	; 63
    30da:	a2 e0       	ldi	r26, 0x02	; 2
    30dc:	81 50       	subi	r24, 0x01	; 1
    30de:	90 40       	sbci	r25, 0x00	; 0
    30e0:	a0 40       	sbci	r26, 0x00	; 0
    30e2:	e1 f7       	brne	.-8      	; 0x30dc <_Z8pathto11v+0x1bc>
    30e4:	00 c0       	rjmp	.+0      	; 0x30e6 <_Z8pathto11v+0x1c6>
    30e6:	00 00       	nop
			_delay_ms(50);
			++count;
    30e8:	80 91 3b 02 	lds	r24, 0x023B
    30ec:	90 91 3c 02 	lds	r25, 0x023C
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	90 93 3c 02 	sts	0x023C, r25
    30f6:	80 93 3b 02 	sts	0x023B, r24
    30fa:	9e c0       	rjmp	.+316    	; 0x3238 <_Z8pathto11v+0x318>
			
		}
		else if(count==6){
    30fc:	86 30       	cpi	r24, 0x06	; 6
    30fe:	91 05       	cpc	r25, r1
    3100:	a9 f4       	brne	.+42     	; 0x312c <_Z8pathto11v+0x20c>
			forward_from_node();
    3102:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    3106:	8f ef       	ldi	r24, 0xFF	; 255
    3108:	9f e3       	ldi	r25, 0x3F	; 63
    310a:	a2 e0       	ldi	r26, 0x02	; 2
    310c:	81 50       	subi	r24, 0x01	; 1
    310e:	90 40       	sbci	r25, 0x00	; 0
    3110:	a0 40       	sbci	r26, 0x00	; 0
    3112:	e1 f7       	brne	.-8      	; 0x310c <_Z8pathto11v+0x1ec>
    3114:	00 c0       	rjmp	.+0      	; 0x3116 <_Z8pathto11v+0x1f6>
    3116:	00 00       	nop
			_delay_ms(50);
			
			++count;
    3118:	80 91 3b 02 	lds	r24, 0x023B
    311c:	90 91 3c 02 	lds	r25, 0x023C
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	90 93 3c 02 	sts	0x023C, r25
    3126:	80 93 3b 02 	sts	0x023B, r24
    312a:	86 c0       	rjmp	.+268    	; 0x3238 <_Z8pathto11v+0x318>
		
		}
		else if(count==7){
    312c:	87 30       	cpi	r24, 0x07	; 7
    312e:	91 05       	cpc	r25, r1
    3130:	69 f5       	brne	.+90     	; 0x318c <_Z8pathto11v+0x26c>
			rotation_using_blackline_newleft();
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    313a:	8f ef       	ldi	r24, 0xFF	; 255
    313c:	9f e3       	ldi	r25, 0x3F	; 63
    313e:	a2 e0       	ldi	r26, 0x02	; 2
    3140:	81 50       	subi	r24, 0x01	; 1
    3142:	90 40       	sbci	r25, 0x00	; 0
    3144:	a0 40       	sbci	r26, 0x00	; 0
    3146:	e1 f7       	brne	.-8      	; 0x3140 <_Z8pathto11v+0x220>
    3148:	00 c0       	rjmp	.+0      	; 0x314a <_Z8pathto11v+0x22a>
    314a:	00 00       	nop
			_delay_ms(50);
			turn_left();
    314c:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
    3150:	8f ef       	ldi	r24, 0xFF	; 255
    3152:	9f e3       	ldi	r25, 0x3F	; 63
    3154:	a2 e0       	ldi	r26, 0x02	; 2
    3156:	81 50       	subi	r24, 0x01	; 1
    3158:	90 40       	sbci	r25, 0x00	; 0
    315a:	a0 40       	sbci	r26, 0x00	; 0
    315c:	e1 f7       	brne	.-8      	; 0x3156 <_Z8pathto11v+0x236>
    315e:	00 c0       	rjmp	.+0      	; 0x3160 <_Z8pathto11v+0x240>
    3160:	00 00       	nop
			_delay_ms(50);
			forward_black();
    3162:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    3166:	8f ef       	ldi	r24, 0xFF	; 255
    3168:	9f e3       	ldi	r25, 0x3F	; 63
    316a:	a2 e0       	ldi	r26, 0x02	; 2
    316c:	81 50       	subi	r24, 0x01	; 1
    316e:	90 40       	sbci	r25, 0x00	; 0
    3170:	a0 40       	sbci	r26, 0x00	; 0
    3172:	e1 f7       	brne	.-8      	; 0x316c <_Z8pathto11v+0x24c>
    3174:	00 c0       	rjmp	.+0      	; 0x3176 <_Z8pathto11v+0x256>
    3176:	00 00       	nop
			_delay_ms(50);
			++count;
    3178:	80 91 3b 02 	lds	r24, 0x023B
    317c:	90 91 3c 02 	lds	r25, 0x023C
    3180:	01 96       	adiw	r24, 0x01	; 1
    3182:	90 93 3c 02 	sts	0x023C, r25
    3186:	80 93 3b 02 	sts	0x023B, r24
    318a:	56 c0       	rjmp	.+172    	; 0x3238 <_Z8pathto11v+0x318>
			
		}
		else if(count ==8)
    318c:	88 30       	cpi	r24, 0x08	; 8
    318e:	91 05       	cpc	r25, r1
    3190:	a9 f4       	brne	.+42     	; 0x31bc <_Z8pathto11v+0x29c>
		{
			forward_from_node();
    3192:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    3196:	8f ef       	ldi	r24, 0xFF	; 255
    3198:	9f e3       	ldi	r25, 0x3F	; 63
    319a:	a2 e0       	ldi	r26, 0x02	; 2
    319c:	81 50       	subi	r24, 0x01	; 1
    319e:	90 40       	sbci	r25, 0x00	; 0
    31a0:	a0 40       	sbci	r26, 0x00	; 0
    31a2:	e1 f7       	brne	.-8      	; 0x319c <_Z8pathto11v+0x27c>
    31a4:	00 c0       	rjmp	.+0      	; 0x31a6 <_Z8pathto11v+0x286>
    31a6:	00 00       	nop
			_delay_ms(50);
			++count;
    31a8:	80 91 3b 02 	lds	r24, 0x023B
    31ac:	90 91 3c 02 	lds	r25, 0x023C
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	90 93 3c 02 	sts	0x023C, r25
    31b6:	80 93 3b 02 	sts	0x023B, r24
    31ba:	3e c0       	rjmp	.+124    	; 0x3238 <_Z8pathto11v+0x318>
		}
		else if(count==9){
    31bc:	89 30       	cpi	r24, 0x09	; 9
    31be:	91 05       	cpc	r25, r1
    31c0:	d9 f5       	brne	.+118    	; 0x3238 <_Z8pathto11v+0x318>
			forward_from_node();
    31c2:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	9f e3       	ldi	r25, 0x3F	; 63
    31ca:	a2 e0       	ldi	r26, 0x02	; 2
    31cc:	81 50       	subi	r24, 0x01	; 1
    31ce:	90 40       	sbci	r25, 0x00	; 0
    31d0:	a0 40       	sbci	r26, 0x00	; 0
    31d2:	e1 f7       	brne	.-8      	; 0x31cc <_Z8pathto11v+0x2ac>
    31d4:	00 c0       	rjmp	.+0      	; 0x31d6 <_Z8pathto11v+0x2b6>
    31d6:	00 00       	nop
			_delay_ms(50);
			drop();
    31d8:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][10]+ 4; 
    31dc:	d8 01       	movw	r26, r16
    31de:	8c 91       	ld	r24, X
    31e0:	8c 5f       	subi	r24, 0xFC	; 252
    31e2:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    31e6:	8d e2       	ldi	r24, 0x2D	; 45
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    31ee:	8f ef       	ldi	r24, 0xFF	; 255
    31f0:	9f e3       	ldi	r25, 0x3F	; 63
    31f2:	a2 e0       	ldi	r26, 0x02	; 2
    31f4:	81 50       	subi	r24, 0x01	; 1
    31f6:	90 40       	sbci	r25, 0x00	; 0
    31f8:	a0 40       	sbci	r26, 0x00	; 0
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <_Z8pathto11v+0x2d4>
    31fc:	00 c0       	rjmp	.+0      	; 0x31fe <_Z8pathto11v+0x2de>
    31fe:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	9f e3       	ldi	r25, 0x3F	; 63
    320c:	a2 e0       	ldi	r26, 0x02	; 2
    320e:	81 50       	subi	r24, 0x01	; 1
    3210:	90 40       	sbci	r25, 0x00	; 0
    3212:	a0 40       	sbci	r26, 0x00	; 0
    3214:	e1 f7       	brne	.-8      	; 0x320e <_Z8pathto11v+0x2ee>
    3216:	00 c0       	rjmp	.+0      	; 0x3218 <_Z8pathto11v+0x2f8>
    3218:	00 00       	nop
			_delay_ms(50);
			forward_black();
    321a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    321e:	8f ef       	ldi	r24, 0xFF	; 255
    3220:	9f e3       	ldi	r25, 0x3F	; 63
    3222:	a2 e0       	ldi	r26, 0x02	; 2
    3224:	81 50       	subi	r24, 0x01	; 1
    3226:	90 40       	sbci	r25, 0x00	; 0
    3228:	a0 40       	sbci	r26, 0x00	; 0
    322a:	e1 f7       	brne	.-8      	; 0x3224 <_Z8pathto11v+0x304>
    322c:	00 c0       	rjmp	.+0      	; 0x322e <_Z8pathto11v+0x30e>
    322e:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    3230:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
		
			reset_count();									//call count reset function to reset it to 0
    3234:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    3238:	21 97       	sbiw	r28, 0x01	; 1
}

void pathto11()
{
	
	for( int i =0; i<10;i++){
    323a:	09 f0       	breq	.+2      	; 0x323e <_Z8pathto11v+0x31e>
    323c:	79 ce       	rjmp	.-782    	; 0x2f30 <_Z8pathto11v+0x10>
		
			reset_count();									//call count reset function to reset it to 0
		}
	}
	
}
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	08 95       	ret

00003248 <_Z8pathto12v>:

void pathto12()
{
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	cc e0       	ldi	r28, 0x0C	; 12
    3252:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(count==11){
			forward_from_node();
			_delay_ms(50);
			drop();
			data = info_table[0][11] + 4;
    3254:	06 e1       	ldi	r16, 0x16	; 22
    3256:	12 e0       	ldi	r17, 0x02	; 2
}

void pathto12()
{
	for( int i =0; i<12;i++){
		lcd_print(1,1,count,3);
    3258:	40 91 3b 02 	lds	r20, 0x023B
    325c:	50 91 3c 02 	lds	r21, 0x023C
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	23 e0       	ldi	r18, 0x03	; 3
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		
		if(count==0){
    326c:	80 91 3b 02 	lds	r24, 0x023B
    3270:	90 91 3c 02 	lds	r25, 0x023C
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	19 f4       	brne	.+6      	; 0x327e <_Z8pathto12v+0x36>
			stop();
    3278:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z4stopv>
			break;
    327c:	a4 c1       	rjmp	.+840    	; 0x35c6 <_Z8pathto12v+0x37e>
		}
		else if(count==1){
    327e:	81 30       	cpi	r24, 0x01	; 1
    3280:	91 05       	cpc	r25, r1
    3282:	01 f5       	brne	.+64     	; 0x32c4 <_Z8pathto12v+0x7c>
			rotation_using_blackline_right();
    3284:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z30rotation_using_blackline_rightv>
    3288:	8f ef       	ldi	r24, 0xFF	; 255
    328a:	9f e3       	ldi	r25, 0x3F	; 63
    328c:	a2 e0       	ldi	r26, 0x02	; 2
    328e:	81 50       	subi	r24, 0x01	; 1
    3290:	90 40       	sbci	r25, 0x00	; 0
    3292:	a0 40       	sbci	r26, 0x00	; 0
    3294:	e1 f7       	brne	.-8      	; 0x328e <_Z8pathto12v+0x46>
    3296:	00 c0       	rjmp	.+0      	; 0x3298 <_Z8pathto12v+0x50>
    3298:	00 00       	nop
			_delay_ms(50);
			forward_black();
    329a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
			++count;
    329e:	80 91 3b 02 	lds	r24, 0x023B
    32a2:	90 91 3c 02 	lds	r25, 0x023C
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	90 93 3c 02 	sts	0x023C, r25
    32ac:	80 93 3b 02 	sts	0x023B, r24
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	9f e3       	ldi	r25, 0x3F	; 63
    32b4:	a2 e0       	ldi	r26, 0x02	; 2
    32b6:	81 50       	subi	r24, 0x01	; 1
    32b8:	90 40       	sbci	r25, 0x00	; 0
    32ba:	a0 40       	sbci	r26, 0x00	; 0
    32bc:	e1 f7       	brne	.-8      	; 0x32b6 <_Z8pathto12v+0x6e>
    32be:	00 c0       	rjmp	.+0      	; 0x32c0 <_Z8pathto12v+0x78>
    32c0:	00 00       	nop
    32c2:	7e c1       	rjmp	.+764    	; 0x35c0 <_Z8pathto12v+0x378>
			_delay_ms(50);
			
		}
		else if(count==2){
    32c4:	82 30       	cpi	r24, 0x02	; 2
    32c6:	91 05       	cpc	r25, r1
    32c8:	a9 f4       	brne	.+42     	; 0x32f4 <_Z8pathto12v+0xac>
			forward_from_node();
    32ca:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    32ce:	8f ef       	ldi	r24, 0xFF	; 255
    32d0:	9f e3       	ldi	r25, 0x3F	; 63
    32d2:	a2 e0       	ldi	r26, 0x02	; 2
    32d4:	81 50       	subi	r24, 0x01	; 1
    32d6:	90 40       	sbci	r25, 0x00	; 0
    32d8:	a0 40       	sbci	r26, 0x00	; 0
    32da:	e1 f7       	brne	.-8      	; 0x32d4 <_Z8pathto12v+0x8c>
    32dc:	00 c0       	rjmp	.+0      	; 0x32de <_Z8pathto12v+0x96>
    32de:	00 00       	nop
			_delay_ms(50);
			++count;
    32e0:	80 91 3b 02 	lds	r24, 0x023B
    32e4:	90 91 3c 02 	lds	r25, 0x023C
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	90 93 3c 02 	sts	0x023C, r25
    32ee:	80 93 3b 02 	sts	0x023B, r24
    32f2:	66 c1       	rjmp	.+716    	; 0x35c0 <_Z8pathto12v+0x378>
			
		}
		else if(count==3){
    32f4:	83 30       	cpi	r24, 0x03	; 3
    32f6:	91 05       	cpc	r25, r1
    32f8:	11 f5       	brne	.+68     	; 0x333e <_Z8pathto12v+0xf6>
			
			rotation_using_blackline_newright();
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	9f e3       	ldi	r25, 0x3F	; 63
    3306:	a2 e0       	ldi	r26, 0x02	; 2
    3308:	81 50       	subi	r24, 0x01	; 1
    330a:	90 40       	sbci	r25, 0x00	; 0
    330c:	a0 40       	sbci	r26, 0x00	; 0
    330e:	e1 f7       	brne	.-8      	; 0x3308 <_Z8pathto12v+0xc0>
    3310:	00 c0       	rjmp	.+0      	; 0x3312 <_Z8pathto12v+0xca>
    3312:	00 00       	nop
			_delay_ms(50);
			forward_black();
    3314:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    3318:	8f ef       	ldi	r24, 0xFF	; 255
    331a:	9f e3       	ldi	r25, 0x3F	; 63
    331c:	a2 e0       	ldi	r26, 0x02	; 2
    331e:	81 50       	subi	r24, 0x01	; 1
    3320:	90 40       	sbci	r25, 0x00	; 0
    3322:	a0 40       	sbci	r26, 0x00	; 0
    3324:	e1 f7       	brne	.-8      	; 0x331e <_Z8pathto12v+0xd6>
    3326:	00 c0       	rjmp	.+0      	; 0x3328 <_Z8pathto12v+0xe0>
    3328:	00 00       	nop
			_delay_ms(50);
			++count;
    332a:	80 91 3b 02 	lds	r24, 0x023B
    332e:	90 91 3c 02 	lds	r25, 0x023C
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	90 93 3c 02 	sts	0x023C, r25
    3338:	80 93 3b 02 	sts	0x023B, r24
    333c:	41 c1       	rjmp	.+642    	; 0x35c0 <_Z8pathto12v+0x378>
			
		}
		else if (count ==4)
    333e:	84 30       	cpi	r24, 0x04	; 4
    3340:	91 05       	cpc	r25, r1
    3342:	a9 f4       	brne	.+42     	; 0x336e <_Z8pathto12v+0x126>
		{
			forward_from_node();
    3344:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    3348:	8f ef       	ldi	r24, 0xFF	; 255
    334a:	9f e3       	ldi	r25, 0x3F	; 63
    334c:	a2 e0       	ldi	r26, 0x02	; 2
    334e:	81 50       	subi	r24, 0x01	; 1
    3350:	90 40       	sbci	r25, 0x00	; 0
    3352:	a0 40       	sbci	r26, 0x00	; 0
    3354:	e1 f7       	brne	.-8      	; 0x334e <_Z8pathto12v+0x106>
    3356:	00 c0       	rjmp	.+0      	; 0x3358 <_Z8pathto12v+0x110>
    3358:	00 00       	nop
			_delay_ms(50);
			++count;
    335a:	80 91 3b 02 	lds	r24, 0x023B
    335e:	90 91 3c 02 	lds	r25, 0x023C
    3362:	01 96       	adiw	r24, 0x01	; 1
    3364:	90 93 3c 02 	sts	0x023C, r25
    3368:	80 93 3b 02 	sts	0x023B, r24
    336c:	29 c1       	rjmp	.+594    	; 0x35c0 <_Z8pathto12v+0x378>
		}
		else if(count==5){
    336e:	85 30       	cpi	r24, 0x05	; 5
    3370:	91 05       	cpc	r25, r1
    3372:	09 f0       	breq	.+2      	; 0x3376 <_Z8pathto12v+0x12e>
    3374:	46 c0       	rjmp	.+140    	; 0x3402 <_Z8pathto12v+0x1ba>
			data = info_table[0][11];  			  
    3376:	d8 01       	movw	r26, r16
    3378:	8c 91       	ld	r24, X
    337a:	80 93 3a 02 	sts	0x023A, r24
			velocity(120,60);
    337e:	88 e7       	ldi	r24, 0x78	; 120
    3380:	6c e3       	ldi	r22, 0x3C	; 60
    3382:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newleft();
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    338e:	8f ef       	ldi	r24, 0xFF	; 255
    3390:	9f ef       	ldi	r25, 0xFF	; 255
    3392:	a0 ee       	ldi	r26, 0xE0	; 224
    3394:	81 50       	subi	r24, 0x01	; 1
    3396:	90 40       	sbci	r25, 0x00	; 0
    3398:	a0 40       	sbci	r26, 0x00	; 0
    339a:	e1 f7       	brne	.-8      	; 0x3394 <_Z8pathto12v+0x14c>
    339c:	00 c0       	rjmp	.+0      	; 0x339e <_Z8pathto12v+0x156>
    339e:	00 00       	nop
			_delay_ms(5000);
			pickup();
    33a0:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z6pickupv>
			left_degrees(45);
    33a4:	8d e2       	ldi	r24, 0x2D	; 45
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	9f e3       	ldi	r25, 0x3F	; 63
    33b0:	a2 e0       	ldi	r26, 0x02	; 2
    33b2:	81 50       	subi	r24, 0x01	; 1
    33b4:	90 40       	sbci	r25, 0x00	; 0
    33b6:	a0 40       	sbci	r26, 0x00	; 0
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <_Z8pathto12v+0x16a>
    33ba:	00 c0       	rjmp	.+0      	; 0x33bc <_Z8pathto12v+0x174>
    33bc:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    33c6:	8f ef       	ldi	r24, 0xFF	; 255
    33c8:	9f e3       	ldi	r25, 0x3F	; 63
    33ca:	a2 e0       	ldi	r26, 0x02	; 2
    33cc:	81 50       	subi	r24, 0x01	; 1
    33ce:	90 40       	sbci	r25, 0x00	; 0
    33d0:	a0 40       	sbci	r26, 0x00	; 0
    33d2:	e1 f7       	brne	.-8      	; 0x33cc <_Z8pathto12v+0x184>
    33d4:	00 c0       	rjmp	.+0      	; 0x33d6 <_Z8pathto12v+0x18e>
    33d6:	00 00       	nop
			_delay_ms(50);
			forward_black();
    33d8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    33dc:	8f ef       	ldi	r24, 0xFF	; 255
    33de:	9f e3       	ldi	r25, 0x3F	; 63
    33e0:	a2 e0       	ldi	r26, 0x02	; 2
    33e2:	81 50       	subi	r24, 0x01	; 1
    33e4:	90 40       	sbci	r25, 0x00	; 0
    33e6:	a0 40       	sbci	r26, 0x00	; 0
    33e8:	e1 f7       	brne	.-8      	; 0x33e2 <_Z8pathto12v+0x19a>
    33ea:	00 c0       	rjmp	.+0      	; 0x33ec <_Z8pathto12v+0x1a4>
    33ec:	00 00       	nop
			_delay_ms(50);
			++count;
    33ee:	80 91 3b 02 	lds	r24, 0x023B
    33f2:	90 91 3c 02 	lds	r25, 0x023C
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	90 93 3c 02 	sts	0x023C, r25
    33fc:	80 93 3b 02 	sts	0x023B, r24
    3400:	df c0       	rjmp	.+446    	; 0x35c0 <_Z8pathto12v+0x378>
			
		}
		else if(count ==6)
    3402:	86 30       	cpi	r24, 0x06	; 6
    3404:	91 05       	cpc	r25, r1
    3406:	a9 f4       	brne	.+42     	; 0x3432 <_Z8pathto12v+0x1ea>
		{
			forward_from_node();
    3408:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    340c:	8f ef       	ldi	r24, 0xFF	; 255
    340e:	9f e3       	ldi	r25, 0x3F	; 63
    3410:	a2 e0       	ldi	r26, 0x02	; 2
    3412:	81 50       	subi	r24, 0x01	; 1
    3414:	90 40       	sbci	r25, 0x00	; 0
    3416:	a0 40       	sbci	r26, 0x00	; 0
    3418:	e1 f7       	brne	.-8      	; 0x3412 <_Z8pathto12v+0x1ca>
    341a:	00 c0       	rjmp	.+0      	; 0x341c <_Z8pathto12v+0x1d4>
    341c:	00 00       	nop
			_delay_ms(50);
			++count;
    341e:	80 91 3b 02 	lds	r24, 0x023B
    3422:	90 91 3c 02 	lds	r25, 0x023C
    3426:	01 96       	adiw	r24, 0x01	; 1
    3428:	90 93 3c 02 	sts	0x023C, r25
    342c:	80 93 3b 02 	sts	0x023B, r24
    3430:	c7 c0       	rjmp	.+398    	; 0x35c0 <_Z8pathto12v+0x378>
		}
		else if(count==7){
    3432:	87 30       	cpi	r24, 0x07	; 7
    3434:	91 05       	cpc	r25, r1
    3436:	31 f5       	brne	.+76     	; 0x3484 <_Z8pathto12v+0x23c>
			velocity(60,120);
    3438:	8c e3       	ldi	r24, 0x3C	; 60
    343a:	68 e7       	ldi	r22, 0x78	; 120
    343c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8velocityhh>
			rotation_using_blackline_newright();
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z33rotation_using_blackline_newrightj>
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	9f e3       	ldi	r25, 0x3F	; 63
    344c:	a2 e0       	ldi	r26, 0x02	; 2
    344e:	81 50       	subi	r24, 0x01	; 1
    3450:	90 40       	sbci	r25, 0x00	; 0
    3452:	a0 40       	sbci	r26, 0x00	; 0
    3454:	e1 f7       	brne	.-8      	; 0x344e <_Z8pathto12v+0x206>
    3456:	00 c0       	rjmp	.+0      	; 0x3458 <_Z8pathto12v+0x210>
    3458:	00 00       	nop
			_delay_ms(50);
			forward_black();
    345a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	9f e3       	ldi	r25, 0x3F	; 63
    3462:	a2 e0       	ldi	r26, 0x02	; 2
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	90 40       	sbci	r25, 0x00	; 0
    3468:	a0 40       	sbci	r26, 0x00	; 0
    346a:	e1 f7       	brne	.-8      	; 0x3464 <_Z8pathto12v+0x21c>
    346c:	00 c0       	rjmp	.+0      	; 0x346e <_Z8pathto12v+0x226>
    346e:	00 00       	nop
			_delay_ms(50);
			++count;
    3470:	80 91 3b 02 	lds	r24, 0x023B
    3474:	90 91 3c 02 	lds	r25, 0x023C
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	90 93 3c 02 	sts	0x023C, r25
    347e:	80 93 3b 02 	sts	0x023B, r24
    3482:	9e c0       	rjmp	.+316    	; 0x35c0 <_Z8pathto12v+0x378>
			
		}
		else if(count==8){
    3484:	88 30       	cpi	r24, 0x08	; 8
    3486:	91 05       	cpc	r25, r1
    3488:	a9 f4       	brne	.+42     	; 0x34b4 <_Z8pathto12v+0x26c>
			forward_from_node();
    348a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	9f e3       	ldi	r25, 0x3F	; 63
    3492:	a2 e0       	ldi	r26, 0x02	; 2
    3494:	81 50       	subi	r24, 0x01	; 1
    3496:	90 40       	sbci	r25, 0x00	; 0
    3498:	a0 40       	sbci	r26, 0x00	; 0
    349a:	e1 f7       	brne	.-8      	; 0x3494 <_Z8pathto12v+0x24c>
    349c:	00 c0       	rjmp	.+0      	; 0x349e <_Z8pathto12v+0x256>
    349e:	00 00       	nop
			_delay_ms(50);
			
			++count;
    34a0:	80 91 3b 02 	lds	r24, 0x023B
    34a4:	90 91 3c 02 	lds	r25, 0x023C
    34a8:	01 96       	adiw	r24, 0x01	; 1
    34aa:	90 93 3c 02 	sts	0x023C, r25
    34ae:	80 93 3b 02 	sts	0x023B, r24
    34b2:	86 c0       	rjmp	.+268    	; 0x35c0 <_Z8pathto12v+0x378>
			
		}
		else if(count==9){
    34b4:	89 30       	cpi	r24, 0x09	; 9
    34b6:	91 05       	cpc	r25, r1
    34b8:	69 f5       	brne	.+90     	; 0x3514 <_Z8pathto12v+0x2cc>
			rotation_using_blackline_newleft();
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z32rotation_using_blackline_newleftj>
    34c2:	8f ef       	ldi	r24, 0xFF	; 255
    34c4:	9f e3       	ldi	r25, 0x3F	; 63
    34c6:	a2 e0       	ldi	r26, 0x02	; 2
    34c8:	81 50       	subi	r24, 0x01	; 1
    34ca:	90 40       	sbci	r25, 0x00	; 0
    34cc:	a0 40       	sbci	r26, 0x00	; 0
    34ce:	e1 f7       	brne	.-8      	; 0x34c8 <_Z8pathto12v+0x280>
    34d0:	00 c0       	rjmp	.+0      	; 0x34d2 <_Z8pathto12v+0x28a>
    34d2:	00 00       	nop
			_delay_ms(50);
			turn_left();
    34d4:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z9turn_leftv>
    34d8:	8f ef       	ldi	r24, 0xFF	; 255
    34da:	9f e3       	ldi	r25, 0x3F	; 63
    34dc:	a2 e0       	ldi	r26, 0x02	; 2
    34de:	81 50       	subi	r24, 0x01	; 1
    34e0:	90 40       	sbci	r25, 0x00	; 0
    34e2:	a0 40       	sbci	r26, 0x00	; 0
    34e4:	e1 f7       	brne	.-8      	; 0x34de <_Z8pathto12v+0x296>
    34e6:	00 c0       	rjmp	.+0      	; 0x34e8 <_Z8pathto12v+0x2a0>
    34e8:	00 00       	nop
			_delay_ms(50);
			forward_black();
    34ea:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    34ee:	8f ef       	ldi	r24, 0xFF	; 255
    34f0:	9f e3       	ldi	r25, 0x3F	; 63
    34f2:	a2 e0       	ldi	r26, 0x02	; 2
    34f4:	81 50       	subi	r24, 0x01	; 1
    34f6:	90 40       	sbci	r25, 0x00	; 0
    34f8:	a0 40       	sbci	r26, 0x00	; 0
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <_Z8pathto12v+0x2ac>
    34fc:	00 c0       	rjmp	.+0      	; 0x34fe <_Z8pathto12v+0x2b6>
    34fe:	00 00       	nop
			_delay_ms(50);
			++count;
    3500:	80 91 3b 02 	lds	r24, 0x023B
    3504:	90 91 3c 02 	lds	r25, 0x023C
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	90 93 3c 02 	sts	0x023C, r25
    350e:	80 93 3b 02 	sts	0x023B, r24
    3512:	56 c0       	rjmp	.+172    	; 0x35c0 <_Z8pathto12v+0x378>
		
		}
		else if(count ==10)
    3514:	8a 30       	cpi	r24, 0x0A	; 10
    3516:	91 05       	cpc	r25, r1
    3518:	a9 f4       	brne	.+42     	; 0x3544 <_Z8pathto12v+0x2fc>
		{
			forward_from_node();
    351a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    351e:	8f ef       	ldi	r24, 0xFF	; 255
    3520:	9f e3       	ldi	r25, 0x3F	; 63
    3522:	a2 e0       	ldi	r26, 0x02	; 2
    3524:	81 50       	subi	r24, 0x01	; 1
    3526:	90 40       	sbci	r25, 0x00	; 0
    3528:	a0 40       	sbci	r26, 0x00	; 0
    352a:	e1 f7       	brne	.-8      	; 0x3524 <_Z8pathto12v+0x2dc>
    352c:	00 c0       	rjmp	.+0      	; 0x352e <_Z8pathto12v+0x2e6>
    352e:	00 00       	nop
			_delay_ms(50);
			++count;
    3530:	80 91 3b 02 	lds	r24, 0x023B
    3534:	90 91 3c 02 	lds	r25, 0x023C
    3538:	01 96       	adiw	r24, 0x01	; 1
    353a:	90 93 3c 02 	sts	0x023C, r25
    353e:	80 93 3b 02 	sts	0x023B, r24
    3542:	3e c0       	rjmp	.+124    	; 0x35c0 <_Z8pathto12v+0x378>
		}
		else if(count==11){
    3544:	8b 30       	cpi	r24, 0x0B	; 11
    3546:	91 05       	cpc	r25, r1
    3548:	d9 f5       	brne	.+118    	; 0x35c0 <_Z8pathto12v+0x378>
			forward_from_node();
    354a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
    354e:	8f ef       	ldi	r24, 0xFF	; 255
    3550:	9f e3       	ldi	r25, 0x3F	; 63
    3552:	a2 e0       	ldi	r26, 0x02	; 2
    3554:	81 50       	subi	r24, 0x01	; 1
    3556:	90 40       	sbci	r25, 0x00	; 0
    3558:	a0 40       	sbci	r26, 0x00	; 0
    355a:	e1 f7       	brne	.-8      	; 0x3554 <_Z8pathto12v+0x30c>
    355c:	00 c0       	rjmp	.+0      	; 0x355e <_Z8pathto12v+0x316>
    355e:	00 00       	nop
			_delay_ms(50);
			drop();
    3560:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z4dropv>
			data = info_table[0][11] + 4;
    3564:	d8 01       	movw	r26, r16
    3566:	8c 91       	ld	r24, X
    3568:	8c 5f       	subi	r24, 0xFC	; 252
    356a:	80 93 3a 02 	sts	0x023A, r24
			left_degrees(45);
    356e:	8d e2       	ldi	r24, 0x2D	; 45
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 39 04 	call	0x872	; 0x872 <_Z12left_degreesj>
    3576:	8f ef       	ldi	r24, 0xFF	; 255
    3578:	9f e3       	ldi	r25, 0x3F	; 63
    357a:	a2 e0       	ldi	r26, 0x02	; 2
    357c:	81 50       	subi	r24, 0x01	; 1
    357e:	90 40       	sbci	r25, 0x00	; 0
    3580:	a0 40       	sbci	r26, 0x00	; 0
    3582:	e1 f7       	brne	.-8      	; 0x357c <_Z8pathto12v+0x334>
    3584:	00 c0       	rjmp	.+0      	; 0x3586 <_Z8pathto12v+0x33e>
    3586:	00 00       	nop
			_delay_ms(50);
			rotation_blackline_left();
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z23rotation_blackline_leftj>
    3590:	8f ef       	ldi	r24, 0xFF	; 255
    3592:	9f e3       	ldi	r25, 0x3F	; 63
    3594:	a2 e0       	ldi	r26, 0x02	; 2
    3596:	81 50       	subi	r24, 0x01	; 1
    3598:	90 40       	sbci	r25, 0x00	; 0
    359a:	a0 40       	sbci	r26, 0x00	; 0
    359c:	e1 f7       	brne	.-8      	; 0x3596 <_Z8pathto12v+0x34e>
    359e:	00 c0       	rjmp	.+0      	; 0x35a0 <_Z8pathto12v+0x358>
    35a0:	00 00       	nop
			_delay_ms(50);
			forward_black();
    35a2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z13forward_blackv>
    35a6:	8f ef       	ldi	r24, 0xFF	; 255
    35a8:	9f e3       	ldi	r25, 0x3F	; 63
    35aa:	a2 e0       	ldi	r26, 0x02	; 2
    35ac:	81 50       	subi	r24, 0x01	; 1
    35ae:	90 40       	sbci	r25, 0x00	; 0
    35b0:	a0 40       	sbci	r26, 0x00	; 0
    35b2:	e1 f7       	brne	.-8      	; 0x35ac <_Z8pathto12v+0x364>
    35b4:	00 c0       	rjmp	.+0      	; 0x35b6 <_Z8pathto12v+0x36e>
    35b6:	00 00       	nop
			_delay_ms(50);
			forward_from_node();
    35b8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z17forward_from_nodev>
			
			reset_count();									//call count reset function to reset it to 0
    35bc:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z11reset_countv>
    35c0:	21 97       	sbiw	r28, 0x01	; 1
	
}

void pathto12()
{
	for( int i =0; i<12;i++){
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <_Z8pathto12v+0x37e>
    35c4:	49 ce       	rjmp	.-878    	; 0x3258 <_Z8pathto12v+0x10>
			forward_from_node();
			
			reset_count();									//call count reset function to reset it to 0
		}
	}
}
    35c6:	df 91       	pop	r29
    35c8:	cf 91       	pop	r28
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	08 95       	ret

000035d0 <main>:

int main(void)
{
    35d0:	2f 92       	push	r2
    35d2:	3f 92       	push	r3
    35d4:	4f 92       	push	r4
    35d6:	5f 92       	push	r5
    35d8:	6f 92       	push	r6
    35da:	7f 92       	push	r7
    35dc:	8f 92       	push	r8
    35de:	9f 92       	push	r9
    35e0:	af 92       	push	r10
    35e2:	bf 92       	push	r11
    35e4:	cf 92       	push	r12
    35e6:	df 92       	push	r13
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
	//initializing the required functions or ports etc //
        
		init_devices();
    35f4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z12init_devicesv>
		lcd_set_4bit();
    35f8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z12lcd_set_4bitv>
		lcd_init();
    35fc:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z8lcd_initv>
		servo_1(25);
    3600:	89 e1       	ldi	r24, 0x19	; 25
    3602:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z7servo_1h>
		servo_2(30);
    3606:	8e e1       	ldi	r24, 0x1E	; 30
    3608:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z7servo_2h>
		
		
            Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    360c:	83 e0       	ldi	r24, 0x03	; 3
    360e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
    3612:	80 93 32 02 	sts	0x0232, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
    361c:	80 93 31 02 	sts	0x0231, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z14ADC_Conversionh>
    3626:	80 93 30 02 	sts	0x0230, r24
            if(Left_white_line>0x20 && Center_white_line>0x20 && Right_white_line > 0x20 )
    362a:	90 91 32 02 	lds	r25, 0x0232
    362e:	91 32       	cpi	r25, 0x21	; 33
    3630:	08 f4       	brcc	.+2      	; 0x3634 <main+0x64>
    3632:	01 c1       	rjmp	.+514    	; 0x3836 <main+0x266>
    3634:	90 91 31 02 	lds	r25, 0x0231
    3638:	91 32       	cpi	r25, 0x21	; 33
    363a:	08 f4       	brcc	.+2      	; 0x363e <main+0x6e>
    363c:	fc c0       	rjmp	.+504    	; 0x3836 <main+0x266>
    363e:	81 32       	cpi	r24, 0x21	; 33
    3640:	28 f4       	brcc	.+10     	; 0x364c <main+0x7c>
    3642:	f9 c0       	rjmp	.+498    	; 0x3836 <main+0x266>
    3644:	21 96       	adiw	r28, 0x01	; 1
    3646:	0f 5f       	subi	r16, 0xFF	; 255
    3648:	1f 4f       	sbci	r17, 0xFF	; 255
    364a:	2b c0       	rjmp	.+86     	; 0x36a2 <main+0xd2>
    364c:	01 e0       	ldi	r16, 0x01	; 1
    364e:	10 e0       	ldi	r17, 0x00	; 0
    3650:	c0 e0       	ldi	r28, 0x00	; 0
    3652:	d0 e0       	ldi	r29, 0x00	; 0
				   count = 1;
				   pathto10();
			   }
			   else if(i ==10 && info_table[i][0])
			   {
				   count = 1;
    3654:	ee 24       	eor	r14, r14
    3656:	ff 24       	eor	r15, r15
    3658:	e3 94       	inc	r14
			   else if(i ==4 && info_table[i][0])
			   {
				   count = 1;
				   pathto5();
			   }
			   else if(i ==5 && info_table[i][0])
    365a:	0f 2e       	mov	r0, r31
    365c:	f4 e1       	ldi	r31, 0x14	; 20
    365e:	2f 2e       	mov	r2, r31
    3660:	f2 e0       	ldi	r31, 0x02	; 2
    3662:	3f 2e       	mov	r3, r31
    3664:	f0 2d       	mov	r31, r0
			   else if(i ==3 && info_table[i][0])
			   {
				   count = 1;
				   pathto4();
			   }
			   else if(i ==4 && info_table[i][0])
    3666:	0f 2e       	mov	r0, r31
    3668:	f0 e1       	ldi	r31, 0x10	; 16
    366a:	4f 2e       	mov	r4, r31
    366c:	f2 e0       	ldi	r31, 0x02	; 2
    366e:	5f 2e       	mov	r5, r31
    3670:	f0 2d       	mov	r31, r0
			   else if (i ==2 && info_table[i][0])
			   {
				   count = 1;
				   pathto3();
			   }
			   else if(i ==3 && info_table[i][0])
    3672:	0f 2e       	mov	r0, r31
    3674:	fc e0       	ldi	r31, 0x0C	; 12
    3676:	6f 2e       	mov	r6, r31
    3678:	f2 e0       	ldi	r31, 0x02	; 2
    367a:	7f 2e       	mov	r7, r31
    367c:	f0 2d       	mov	r31, r0
				else if(i ==1 && info_table[i][0])
				{
					count = 1;
					pathto2();
				}					
			   else if (i ==2 && info_table[i][0])
    367e:	0f 2e       	mov	r0, r31
    3680:	f8 e0       	ldi	r31, 0x08	; 8
    3682:	8f 2e       	mov	r8, r31
    3684:	f2 e0       	ldi	r31, 0x02	; 2
    3686:	9f 2e       	mov	r9, r31
    3688:	f0 2d       	mov	r31, r0
			    if(i==0 && info_table[i][0])				
				{
				count = 1;
				pathto1();
				}
				else if(i ==1 && info_table[i][0])
    368a:	0f 2e       	mov	r0, r31
    368c:	f4 e0       	ldi	r31, 0x04	; 4
    368e:	af 2e       	mov	r10, r31
    3690:	f2 e0       	ldi	r31, 0x02	; 2
    3692:	bf 2e       	mov	r11, r31
    3694:	f0 2d       	mov	r31, r0
            if(Left_white_line>0x20 && Center_white_line>0x20 && Right_white_line > 0x20 )
           {
			   int i,j;
			   for(i =0;i<12;++i)
			   {
			    if(i==0 && info_table[i][0])				
    3696:	0f 2e       	mov	r0, r31
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	cf 2e       	mov	r12, r31
    369c:	f2 e0       	ldi	r31, 0x02	; 2
    369e:	df 2e       	mov	r13, r31
    36a0:	f0 2d       	mov	r31, r0
		
		
            Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
            if(Left_white_line>0x20 && Center_white_line>0x20 && Right_white_line > 0x20 )
    36a2:	ce 01       	movw	r24, r28
           {
			   int i,j;
			   for(i =0;i<12;++i)
			   {
			    if(i==0 && info_table[i][0])				
    36a4:	20 97       	sbiw	r28, 0x00	; 0
    36a6:	69 f4       	brne	.+26     	; 0x36c2 <main+0xf2>
    36a8:	f6 01       	movw	r30, r12
    36aa:	20 81       	ld	r18, Z
    36ac:	31 81       	ldd	r19, Z+1	; 0x01
    36ae:	21 15       	cp	r18, r1
    36b0:	31 05       	cpc	r19, r1
    36b2:	b9 f0       	breq	.+46     	; 0x36e2 <main+0x112>
				{
				count = 1;
    36b4:	f0 92 3c 02 	sts	0x023C, r15
    36b8:	e0 92 3b 02 	sts	0x023B, r14
				pathto1();
    36bc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_Z7pathto1v>
    36c0:	c1 cf       	rjmp	.-126    	; 0x3644 <main+0x74>
				}
				else if(i ==1 && info_table[i][0])
    36c2:	c1 30       	cpi	r28, 0x01	; 1
    36c4:	d1 05       	cpc	r29, r1
    36c6:	69 f4       	brne	.+26     	; 0x36e2 <main+0x112>
    36c8:	f5 01       	movw	r30, r10
    36ca:	20 81       	ld	r18, Z
    36cc:	31 81       	ldd	r19, Z+1	; 0x01
    36ce:	21 15       	cp	r18, r1
    36d0:	31 05       	cpc	r19, r1
    36d2:	b9 f0       	breq	.+46     	; 0x3702 <main+0x132>
				{
					count = 1;
    36d4:	f0 92 3c 02 	sts	0x023C, r15
    36d8:	e0 92 3b 02 	sts	0x023B, r14
					pathto2();
    36dc:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z7pathto2v>
    36e0:	b1 cf       	rjmp	.-158    	; 0x3644 <main+0x74>
				}					
			   else if (i ==2 && info_table[i][0])
    36e2:	82 30       	cpi	r24, 0x02	; 2
    36e4:	91 05       	cpc	r25, r1
    36e6:	69 f4       	brne	.+26     	; 0x3702 <main+0x132>
    36e8:	f4 01       	movw	r30, r8
    36ea:	20 81       	ld	r18, Z
    36ec:	31 81       	ldd	r19, Z+1	; 0x01
    36ee:	21 15       	cp	r18, r1
    36f0:	31 05       	cpc	r19, r1
    36f2:	b9 f0       	breq	.+46     	; 0x3722 <main+0x152>
			   {
				   count = 1;
    36f4:	f0 92 3c 02 	sts	0x023C, r15
    36f8:	e0 92 3b 02 	sts	0x023B, r14
				   pathto3();
    36fc:	0e 94 11 0b 	call	0x1622	; 0x1622 <_Z7pathto3v>
    3700:	a1 cf       	rjmp	.-190    	; 0x3644 <main+0x74>
			   }
			   else if(i ==3 && info_table[i][0])
    3702:	83 30       	cpi	r24, 0x03	; 3
    3704:	91 05       	cpc	r25, r1
    3706:	69 f4       	brne	.+26     	; 0x3722 <main+0x152>
    3708:	f3 01       	movw	r30, r6
    370a:	20 81       	ld	r18, Z
    370c:	31 81       	ldd	r19, Z+1	; 0x01
    370e:	21 15       	cp	r18, r1
    3710:	31 05       	cpc	r19, r1
    3712:	b9 f0       	breq	.+46     	; 0x3742 <main+0x172>
			   {
				   count = 1;
    3714:	f0 92 3c 02 	sts	0x023C, r15
    3718:	e0 92 3b 02 	sts	0x023B, r14
				   pathto4();
    371c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_Z7pathto4v>
    3720:	91 cf       	rjmp	.-222    	; 0x3644 <main+0x74>
			   }
			   else if(i ==4 && info_table[i][0])
    3722:	84 30       	cpi	r24, 0x04	; 4
    3724:	91 05       	cpc	r25, r1
    3726:	69 f4       	brne	.+26     	; 0x3742 <main+0x172>
    3728:	f2 01       	movw	r30, r4
    372a:	20 81       	ld	r18, Z
    372c:	31 81       	ldd	r19, Z+1	; 0x01
    372e:	21 15       	cp	r18, r1
    3730:	31 05       	cpc	r19, r1
    3732:	b9 f0       	breq	.+46     	; 0x3762 <main+0x192>
			   {
				   count = 1;
    3734:	f0 92 3c 02 	sts	0x023C, r15
    3738:	e0 92 3b 02 	sts	0x023B, r14
				   pathto5();
    373c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_Z7pathto5v>
    3740:	81 cf       	rjmp	.-254    	; 0x3644 <main+0x74>
			   }
			   else if(i ==5 && info_table[i][0])
    3742:	85 30       	cpi	r24, 0x05	; 5
    3744:	91 05       	cpc	r25, r1
    3746:	69 f4       	brne	.+26     	; 0x3762 <main+0x192>
    3748:	f1 01       	movw	r30, r2
    374a:	20 81       	ld	r18, Z
    374c:	31 81       	ldd	r19, Z+1	; 0x01
    374e:	21 15       	cp	r18, r1
    3750:	31 05       	cpc	r19, r1
    3752:	c1 f0       	breq	.+48     	; 0x3784 <main+0x1b4>
			   {
				   count = 1;
    3754:	f0 92 3c 02 	sts	0x023C, r15
    3758:	e0 92 3b 02 	sts	0x023B, r14
				   pathto6();
    375c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_Z7pathto6v>
    3760:	71 cf       	rjmp	.-286    	; 0x3644 <main+0x74>
			   }
			   else if(i ==6 && info_table[i][0])
    3762:	86 30       	cpi	r24, 0x06	; 6
    3764:	91 05       	cpc	r25, r1
    3766:	71 f4       	brne	.+28     	; 0x3784 <main+0x1b4>
    3768:	e8 e1       	ldi	r30, 0x18	; 24
    376a:	f2 e0       	ldi	r31, 0x02	; 2
    376c:	20 81       	ld	r18, Z
    376e:	31 81       	ldd	r19, Z+1	; 0x01
    3770:	21 15       	cp	r18, r1
    3772:	31 05       	cpc	r19, r1
    3774:	c1 f0       	breq	.+48     	; 0x37a6 <main+0x1d6>
			   {
				    count = 1;
    3776:	f0 92 3c 02 	sts	0x023C, r15
    377a:	e0 92 3b 02 	sts	0x023B, r14
				    pathto7();
    377e:	0e 94 1c 11 	call	0x2238	; 0x2238 <_Z7pathto7v>
    3782:	60 cf       	rjmp	.-320    	; 0x3644 <main+0x74>
			   }
			   else if(i ==7 && info_table[i][0])
    3784:	87 30       	cpi	r24, 0x07	; 7
    3786:	91 05       	cpc	r25, r1
    3788:	71 f4       	brne	.+28     	; 0x37a6 <main+0x1d6>
    378a:	ec e1       	ldi	r30, 0x1C	; 28
    378c:	f2 e0       	ldi	r31, 0x02	; 2
    378e:	20 81       	ld	r18, Z
    3790:	31 81       	ldd	r19, Z+1	; 0x01
    3792:	21 15       	cp	r18, r1
    3794:	31 05       	cpc	r19, r1
    3796:	c1 f0       	breq	.+48     	; 0x37c8 <main+0x1f8>
			   {
				   count = 1;
    3798:	f0 92 3c 02 	sts	0x023C, r15
    379c:	e0 92 3b 02 	sts	0x023B, r14
				   pathto8();
    37a0:	0e 94 8e 12 	call	0x251c	; 0x251c <_Z7pathto8v>
    37a4:	4f cf       	rjmp	.-354    	; 0x3644 <main+0x74>
			   }
			   else if(i ==8 && info_table[i][0])
    37a6:	88 30       	cpi	r24, 0x08	; 8
    37a8:	91 05       	cpc	r25, r1
    37aa:	71 f4       	brne	.+28     	; 0x37c8 <main+0x1f8>
    37ac:	e0 e2       	ldi	r30, 0x20	; 32
    37ae:	f2 e0       	ldi	r31, 0x02	; 2
    37b0:	20 81       	ld	r18, Z
    37b2:	31 81       	ldd	r19, Z+1	; 0x01
    37b4:	21 15       	cp	r18, r1
    37b6:	31 05       	cpc	r19, r1
    37b8:	c1 f0       	breq	.+48     	; 0x37ea <main+0x21a>
			   {
				    count = 1;
    37ba:	f0 92 3c 02 	sts	0x023C, r15
    37be:	e0 92 3b 02 	sts	0x023B, r14
				    pathto9();
    37c2:	0e 94 39 14 	call	0x2872	; 0x2872 <_Z7pathto9v>
    37c6:	3e cf       	rjmp	.-388    	; 0x3644 <main+0x74>
			   }
			   else if(i ==9 && info_table[i][0])
    37c8:	89 30       	cpi	r24, 0x09	; 9
    37ca:	91 05       	cpc	r25, r1
    37cc:	71 f4       	brne	.+28     	; 0x37ea <main+0x21a>
    37ce:	e4 e2       	ldi	r30, 0x24	; 36
    37d0:	f2 e0       	ldi	r31, 0x02	; 2
    37d2:	20 81       	ld	r18, Z
    37d4:	31 81       	ldd	r19, Z+1	; 0x01
    37d6:	21 15       	cp	r18, r1
    37d8:	31 05       	cpc	r19, r1
    37da:	b9 f0       	breq	.+46     	; 0x380a <main+0x23a>
			   {
				   count = 1;
    37dc:	f0 92 3c 02 	sts	0x023C, r15
    37e0:	e0 92 3b 02 	sts	0x023B, r14
				   pathto10();
    37e4:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <_Z8pathto10v>
    37e8:	2d cf       	rjmp	.-422    	; 0x3644 <main+0x74>
			   }
			   else if(i ==10 && info_table[i][0])
    37ea:	8a 30       	cpi	r24, 0x0A	; 10
    37ec:	91 05       	cpc	r25, r1
    37ee:	69 f4       	brne	.+26     	; 0x380a <main+0x23a>
    37f0:	e8 e2       	ldi	r30, 0x28	; 40
    37f2:	f2 e0       	ldi	r31, 0x02	; 2
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	c9 f0       	breq	.+50     	; 0x382e <main+0x25e>
			   {
				   count = 1;
    37fc:	f0 92 3c 02 	sts	0x023C, r15
    3800:	e0 92 3b 02 	sts	0x023B, r14
				   pathto11();
    3804:	0e 94 90 17 	call	0x2f20	; 0x2f20 <_Z8pathto11v>
    3808:	1d cf       	rjmp	.-454    	; 0x3644 <main+0x74>
			   }
			   else if(i ==11 && info_table[i][0])
    380a:	8b 30       	cpi	r24, 0x0B	; 11
    380c:	91 05       	cpc	r25, r1
    380e:	79 f4       	brne	.+30     	; 0x382e <main+0x25e>
    3810:	ec e2       	ldi	r30, 0x2C	; 44
    3812:	f2 e0       	ldi	r31, 0x02	; 2
    3814:	80 81       	ld	r24, Z
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	49 f0       	breq	.+18     	; 0x382e <main+0x25e>
			   {
				   count = 1;
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	90 93 3c 02 	sts	0x023C, r25
    3824:	80 93 3b 02 	sts	0x023B, r24
				   pathto12();
    3828:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z8pathto12v>
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <main+0x266>
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
            if(Left_white_line>0x20 && Center_white_line>0x20 && Right_white_line > 0x20 )
           {
			   int i,j;
			   for(i =0;i<12;++i)
    382e:	0c 30       	cpi	r16, 0x0C	; 12
    3830:	11 05       	cpc	r17, r1
    3832:	0c f4       	brge	.+2      	; 0x3836 <main+0x266>
    3834:	07 cf       	rjmp	.-498    	; 0x3644 <main+0x74>
			   }
			   
			   
			   
			   }
				buzzer_on();
    3836:	0e 94 c4 05 	call	0xb88	; 0xb88 <_Z9buzzer_onv>
            }
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	ff 90       	pop	r15
    3848:	ef 90       	pop	r14
    384a:	df 90       	pop	r13
    384c:	cf 90       	pop	r12
    384e:	bf 90       	pop	r11
    3850:	af 90       	pop	r10
    3852:	9f 90       	pop	r9
    3854:	8f 90       	pop	r8
    3856:	7f 90       	pop	r7
    3858:	6f 90       	pop	r6
    385a:	5f 90       	pop	r5
    385c:	4f 90       	pop	r4
    385e:	3f 90       	pop	r3
    3860:	2f 90       	pop	r2
    3862:	08 95       	ret

00003864 <__subsf3>:
    3864:	50 58       	subi	r21, 0x80	; 128

00003866 <__addsf3>:
    3866:	bb 27       	eor	r27, r27
    3868:	aa 27       	eor	r26, r26
    386a:	0e d0       	rcall	.+28     	; 0x3888 <__addsf3x>
    386c:	4d c1       	rjmp	.+666    	; 0x3b08 <__fp_round>
    386e:	3e d1       	rcall	.+636    	; 0x3aec <__fp_pscA>
    3870:	30 f0       	brcs	.+12     	; 0x387e <__addsf3+0x18>
    3872:	43 d1       	rcall	.+646    	; 0x3afa <__fp_pscB>
    3874:	20 f0       	brcs	.+8      	; 0x387e <__addsf3+0x18>
    3876:	31 f4       	brne	.+12     	; 0x3884 <__addsf3+0x1e>
    3878:	9f 3f       	cpi	r25, 0xFF	; 255
    387a:	11 f4       	brne	.+4      	; 0x3880 <__addsf3+0x1a>
    387c:	1e f4       	brtc	.+6      	; 0x3884 <__addsf3+0x1e>
    387e:	33 c1       	rjmp	.+614    	; 0x3ae6 <__fp_nan>
    3880:	0e f4       	brtc	.+2      	; 0x3884 <__addsf3+0x1e>
    3882:	e0 95       	com	r30
    3884:	e7 fb       	bst	r30, 7
    3886:	29 c1       	rjmp	.+594    	; 0x3ada <__fp_inf>

00003888 <__addsf3x>:
    3888:	e9 2f       	mov	r30, r25
    388a:	4f d1       	rcall	.+670    	; 0x3b2a <__fp_split3>
    388c:	80 f3       	brcs	.-32     	; 0x386e <__addsf3+0x8>
    388e:	ba 17       	cp	r27, r26
    3890:	62 07       	cpc	r22, r18
    3892:	73 07       	cpc	r23, r19
    3894:	84 07       	cpc	r24, r20
    3896:	95 07       	cpc	r25, r21
    3898:	18 f0       	brcs	.+6      	; 0x38a0 <__addsf3x+0x18>
    389a:	71 f4       	brne	.+28     	; 0x38b8 <__addsf3x+0x30>
    389c:	9e f5       	brtc	.+102    	; 0x3904 <__addsf3x+0x7c>
    389e:	67 c1       	rjmp	.+718    	; 0x3b6e <__fp_zero>
    38a0:	0e f4       	brtc	.+2      	; 0x38a4 <__addsf3x+0x1c>
    38a2:	e0 95       	com	r30
    38a4:	0b 2e       	mov	r0, r27
    38a6:	ba 2f       	mov	r27, r26
    38a8:	a0 2d       	mov	r26, r0
    38aa:	0b 01       	movw	r0, r22
    38ac:	b9 01       	movw	r22, r18
    38ae:	90 01       	movw	r18, r0
    38b0:	0c 01       	movw	r0, r24
    38b2:	ca 01       	movw	r24, r20
    38b4:	a0 01       	movw	r20, r0
    38b6:	11 24       	eor	r1, r1
    38b8:	ff 27       	eor	r31, r31
    38ba:	59 1b       	sub	r21, r25
    38bc:	99 f0       	breq	.+38     	; 0x38e4 <__addsf3x+0x5c>
    38be:	59 3f       	cpi	r21, 0xF9	; 249
    38c0:	50 f4       	brcc	.+20     	; 0x38d6 <__addsf3x+0x4e>
    38c2:	50 3e       	cpi	r21, 0xE0	; 224
    38c4:	68 f1       	brcs	.+90     	; 0x3920 <__addsf3x+0x98>
    38c6:	1a 16       	cp	r1, r26
    38c8:	f0 40       	sbci	r31, 0x00	; 0
    38ca:	a2 2f       	mov	r26, r18
    38cc:	23 2f       	mov	r18, r19
    38ce:	34 2f       	mov	r19, r20
    38d0:	44 27       	eor	r20, r20
    38d2:	58 5f       	subi	r21, 0xF8	; 248
    38d4:	f3 cf       	rjmp	.-26     	; 0x38bc <__addsf3x+0x34>
    38d6:	46 95       	lsr	r20
    38d8:	37 95       	ror	r19
    38da:	27 95       	ror	r18
    38dc:	a7 95       	ror	r26
    38de:	f0 40       	sbci	r31, 0x00	; 0
    38e0:	53 95       	inc	r21
    38e2:	c9 f7       	brne	.-14     	; 0x38d6 <__addsf3x+0x4e>
    38e4:	7e f4       	brtc	.+30     	; 0x3904 <__addsf3x+0x7c>
    38e6:	1f 16       	cp	r1, r31
    38e8:	ba 0b       	sbc	r27, r26
    38ea:	62 0b       	sbc	r22, r18
    38ec:	73 0b       	sbc	r23, r19
    38ee:	84 0b       	sbc	r24, r20
    38f0:	ba f0       	brmi	.+46     	; 0x3920 <__addsf3x+0x98>
    38f2:	91 50       	subi	r25, 0x01	; 1
    38f4:	a1 f0       	breq	.+40     	; 0x391e <__addsf3x+0x96>
    38f6:	ff 0f       	add	r31, r31
    38f8:	bb 1f       	adc	r27, r27
    38fa:	66 1f       	adc	r22, r22
    38fc:	77 1f       	adc	r23, r23
    38fe:	88 1f       	adc	r24, r24
    3900:	c2 f7       	brpl	.-16     	; 0x38f2 <__addsf3x+0x6a>
    3902:	0e c0       	rjmp	.+28     	; 0x3920 <__addsf3x+0x98>
    3904:	ba 0f       	add	r27, r26
    3906:	62 1f       	adc	r22, r18
    3908:	73 1f       	adc	r23, r19
    390a:	84 1f       	adc	r24, r20
    390c:	48 f4       	brcc	.+18     	; 0x3920 <__addsf3x+0x98>
    390e:	87 95       	ror	r24
    3910:	77 95       	ror	r23
    3912:	67 95       	ror	r22
    3914:	b7 95       	ror	r27
    3916:	f7 95       	ror	r31
    3918:	9e 3f       	cpi	r25, 0xFE	; 254
    391a:	08 f0       	brcs	.+2      	; 0x391e <__addsf3x+0x96>
    391c:	b3 cf       	rjmp	.-154    	; 0x3884 <__addsf3+0x1e>
    391e:	93 95       	inc	r25
    3920:	88 0f       	add	r24, r24
    3922:	08 f0       	brcs	.+2      	; 0x3926 <__addsf3x+0x9e>
    3924:	99 27       	eor	r25, r25
    3926:	ee 0f       	add	r30, r30
    3928:	97 95       	ror	r25
    392a:	87 95       	ror	r24
    392c:	08 95       	ret

0000392e <__divsf3>:
    392e:	0c d0       	rcall	.+24     	; 0x3948 <__divsf3x>
    3930:	eb c0       	rjmp	.+470    	; 0x3b08 <__fp_round>
    3932:	e3 d0       	rcall	.+454    	; 0x3afa <__fp_pscB>
    3934:	40 f0       	brcs	.+16     	; 0x3946 <__divsf3+0x18>
    3936:	da d0       	rcall	.+436    	; 0x3aec <__fp_pscA>
    3938:	30 f0       	brcs	.+12     	; 0x3946 <__divsf3+0x18>
    393a:	21 f4       	brne	.+8      	; 0x3944 <__divsf3+0x16>
    393c:	5f 3f       	cpi	r21, 0xFF	; 255
    393e:	19 f0       	breq	.+6      	; 0x3946 <__divsf3+0x18>
    3940:	cc c0       	rjmp	.+408    	; 0x3ada <__fp_inf>
    3942:	51 11       	cpse	r21, r1
    3944:	15 c1       	rjmp	.+554    	; 0x3b70 <__fp_szero>
    3946:	cf c0       	rjmp	.+414    	; 0x3ae6 <__fp_nan>

00003948 <__divsf3x>:
    3948:	f0 d0       	rcall	.+480    	; 0x3b2a <__fp_split3>
    394a:	98 f3       	brcs	.-26     	; 0x3932 <__divsf3+0x4>

0000394c <__divsf3_pse>:
    394c:	99 23       	and	r25, r25
    394e:	c9 f3       	breq	.-14     	; 0x3942 <__divsf3+0x14>
    3950:	55 23       	and	r21, r21
    3952:	b1 f3       	breq	.-20     	; 0x3940 <__divsf3+0x12>
    3954:	95 1b       	sub	r25, r21
    3956:	55 0b       	sbc	r21, r21
    3958:	bb 27       	eor	r27, r27
    395a:	aa 27       	eor	r26, r26
    395c:	62 17       	cp	r22, r18
    395e:	73 07       	cpc	r23, r19
    3960:	84 07       	cpc	r24, r20
    3962:	38 f0       	brcs	.+14     	; 0x3972 <__divsf3_pse+0x26>
    3964:	9f 5f       	subi	r25, 0xFF	; 255
    3966:	5f 4f       	sbci	r21, 0xFF	; 255
    3968:	22 0f       	add	r18, r18
    396a:	33 1f       	adc	r19, r19
    396c:	44 1f       	adc	r20, r20
    396e:	aa 1f       	adc	r26, r26
    3970:	a9 f3       	breq	.-22     	; 0x395c <__divsf3_pse+0x10>
    3972:	33 d0       	rcall	.+102    	; 0x39da <__divsf3_pse+0x8e>
    3974:	0e 2e       	mov	r0, r30
    3976:	3a f0       	brmi	.+14     	; 0x3986 <__divsf3_pse+0x3a>
    3978:	e0 e8       	ldi	r30, 0x80	; 128
    397a:	30 d0       	rcall	.+96     	; 0x39dc <__divsf3_pse+0x90>
    397c:	91 50       	subi	r25, 0x01	; 1
    397e:	50 40       	sbci	r21, 0x00	; 0
    3980:	e6 95       	lsr	r30
    3982:	00 1c       	adc	r0, r0
    3984:	ca f7       	brpl	.-14     	; 0x3978 <__divsf3_pse+0x2c>
    3986:	29 d0       	rcall	.+82     	; 0x39da <__divsf3_pse+0x8e>
    3988:	fe 2f       	mov	r31, r30
    398a:	27 d0       	rcall	.+78     	; 0x39da <__divsf3_pse+0x8e>
    398c:	66 0f       	add	r22, r22
    398e:	77 1f       	adc	r23, r23
    3990:	88 1f       	adc	r24, r24
    3992:	bb 1f       	adc	r27, r27
    3994:	26 17       	cp	r18, r22
    3996:	37 07       	cpc	r19, r23
    3998:	48 07       	cpc	r20, r24
    399a:	ab 07       	cpc	r26, r27
    399c:	b0 e8       	ldi	r27, 0x80	; 128
    399e:	09 f0       	breq	.+2      	; 0x39a2 <__divsf3_pse+0x56>
    39a0:	bb 0b       	sbc	r27, r27
    39a2:	80 2d       	mov	r24, r0
    39a4:	bf 01       	movw	r22, r30
    39a6:	ff 27       	eor	r31, r31
    39a8:	93 58       	subi	r25, 0x83	; 131
    39aa:	5f 4f       	sbci	r21, 0xFF	; 255
    39ac:	2a f0       	brmi	.+10     	; 0x39b8 <__divsf3_pse+0x6c>
    39ae:	9e 3f       	cpi	r25, 0xFE	; 254
    39b0:	51 05       	cpc	r21, r1
    39b2:	68 f0       	brcs	.+26     	; 0x39ce <__divsf3_pse+0x82>
    39b4:	92 c0       	rjmp	.+292    	; 0x3ada <__fp_inf>
    39b6:	dc c0       	rjmp	.+440    	; 0x3b70 <__fp_szero>
    39b8:	5f 3f       	cpi	r21, 0xFF	; 255
    39ba:	ec f3       	brlt	.-6      	; 0x39b6 <__divsf3_pse+0x6a>
    39bc:	98 3e       	cpi	r25, 0xE8	; 232
    39be:	dc f3       	brlt	.-10     	; 0x39b6 <__divsf3_pse+0x6a>
    39c0:	86 95       	lsr	r24
    39c2:	77 95       	ror	r23
    39c4:	67 95       	ror	r22
    39c6:	b7 95       	ror	r27
    39c8:	f7 95       	ror	r31
    39ca:	9f 5f       	subi	r25, 0xFF	; 255
    39cc:	c9 f7       	brne	.-14     	; 0x39c0 <__divsf3_pse+0x74>
    39ce:	88 0f       	add	r24, r24
    39d0:	91 1d       	adc	r25, r1
    39d2:	96 95       	lsr	r25
    39d4:	87 95       	ror	r24
    39d6:	97 f9       	bld	r25, 7
    39d8:	08 95       	ret
    39da:	e1 e0       	ldi	r30, 0x01	; 1
    39dc:	66 0f       	add	r22, r22
    39de:	77 1f       	adc	r23, r23
    39e0:	88 1f       	adc	r24, r24
    39e2:	bb 1f       	adc	r27, r27
    39e4:	62 17       	cp	r22, r18
    39e6:	73 07       	cpc	r23, r19
    39e8:	84 07       	cpc	r24, r20
    39ea:	ba 07       	cpc	r27, r26
    39ec:	20 f0       	brcs	.+8      	; 0x39f6 <__divsf3_pse+0xaa>
    39ee:	62 1b       	sub	r22, r18
    39f0:	73 0b       	sbc	r23, r19
    39f2:	84 0b       	sbc	r24, r20
    39f4:	ba 0b       	sbc	r27, r26
    39f6:	ee 1f       	adc	r30, r30
    39f8:	88 f7       	brcc	.-30     	; 0x39dc <__divsf3_pse+0x90>
    39fa:	e0 95       	com	r30
    39fc:	08 95       	ret

000039fe <__fixsfsi>:
    39fe:	04 d0       	rcall	.+8      	; 0x3a08 <__fixunssfsi>
    3a00:	68 94       	set
    3a02:	b1 11       	cpse	r27, r1
    3a04:	b5 c0       	rjmp	.+362    	; 0x3b70 <__fp_szero>
    3a06:	08 95       	ret

00003a08 <__fixunssfsi>:
    3a08:	98 d0       	rcall	.+304    	; 0x3b3a <__fp_splitA>
    3a0a:	88 f0       	brcs	.+34     	; 0x3a2e <__fixunssfsi+0x26>
    3a0c:	9f 57       	subi	r25, 0x7F	; 127
    3a0e:	90 f0       	brcs	.+36     	; 0x3a34 <__fixunssfsi+0x2c>
    3a10:	b9 2f       	mov	r27, r25
    3a12:	99 27       	eor	r25, r25
    3a14:	b7 51       	subi	r27, 0x17	; 23
    3a16:	a0 f0       	brcs	.+40     	; 0x3a40 <__fixunssfsi+0x38>
    3a18:	d1 f0       	breq	.+52     	; 0x3a4e <__fixunssfsi+0x46>
    3a1a:	66 0f       	add	r22, r22
    3a1c:	77 1f       	adc	r23, r23
    3a1e:	88 1f       	adc	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	1a f0       	brmi	.+6      	; 0x3a2a <__fixunssfsi+0x22>
    3a24:	ba 95       	dec	r27
    3a26:	c9 f7       	brne	.-14     	; 0x3a1a <__fixunssfsi+0x12>
    3a28:	12 c0       	rjmp	.+36     	; 0x3a4e <__fixunssfsi+0x46>
    3a2a:	b1 30       	cpi	r27, 0x01	; 1
    3a2c:	81 f0       	breq	.+32     	; 0x3a4e <__fixunssfsi+0x46>
    3a2e:	9f d0       	rcall	.+318    	; 0x3b6e <__fp_zero>
    3a30:	b1 e0       	ldi	r27, 0x01	; 1
    3a32:	08 95       	ret
    3a34:	9c c0       	rjmp	.+312    	; 0x3b6e <__fp_zero>
    3a36:	67 2f       	mov	r22, r23
    3a38:	78 2f       	mov	r23, r24
    3a3a:	88 27       	eor	r24, r24
    3a3c:	b8 5f       	subi	r27, 0xF8	; 248
    3a3e:	39 f0       	breq	.+14     	; 0x3a4e <__fixunssfsi+0x46>
    3a40:	b9 3f       	cpi	r27, 0xF9	; 249
    3a42:	cc f3       	brlt	.-14     	; 0x3a36 <__fixunssfsi+0x2e>
    3a44:	86 95       	lsr	r24
    3a46:	77 95       	ror	r23
    3a48:	67 95       	ror	r22
    3a4a:	b3 95       	inc	r27
    3a4c:	d9 f7       	brne	.-10     	; 0x3a44 <__fixunssfsi+0x3c>
    3a4e:	3e f4       	brtc	.+14     	; 0x3a5e <__fixunssfsi+0x56>
    3a50:	90 95       	com	r25
    3a52:	80 95       	com	r24
    3a54:	70 95       	com	r23
    3a56:	61 95       	neg	r22
    3a58:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5e:	08 95       	ret

00003a60 <__floatunsisf>:
    3a60:	e8 94       	clt
    3a62:	09 c0       	rjmp	.+18     	; 0x3a76 <__floatsisf+0x12>

00003a64 <__floatsisf>:
    3a64:	97 fb       	bst	r25, 7
    3a66:	3e f4       	brtc	.+14     	; 0x3a76 <__floatsisf+0x12>
    3a68:	90 95       	com	r25
    3a6a:	80 95       	com	r24
    3a6c:	70 95       	com	r23
    3a6e:	61 95       	neg	r22
    3a70:	7f 4f       	sbci	r23, 0xFF	; 255
    3a72:	8f 4f       	sbci	r24, 0xFF	; 255
    3a74:	9f 4f       	sbci	r25, 0xFF	; 255
    3a76:	99 23       	and	r25, r25
    3a78:	a9 f0       	breq	.+42     	; 0x3aa4 <__floatsisf+0x40>
    3a7a:	f9 2f       	mov	r31, r25
    3a7c:	96 e9       	ldi	r25, 0x96	; 150
    3a7e:	bb 27       	eor	r27, r27
    3a80:	93 95       	inc	r25
    3a82:	f6 95       	lsr	r31
    3a84:	87 95       	ror	r24
    3a86:	77 95       	ror	r23
    3a88:	67 95       	ror	r22
    3a8a:	b7 95       	ror	r27
    3a8c:	f1 11       	cpse	r31, r1
    3a8e:	f8 cf       	rjmp	.-16     	; 0x3a80 <__floatsisf+0x1c>
    3a90:	fa f4       	brpl	.+62     	; 0x3ad0 <__floatsisf+0x6c>
    3a92:	bb 0f       	add	r27, r27
    3a94:	11 f4       	brne	.+4      	; 0x3a9a <__floatsisf+0x36>
    3a96:	60 ff       	sbrs	r22, 0
    3a98:	1b c0       	rjmp	.+54     	; 0x3ad0 <__floatsisf+0x6c>
    3a9a:	6f 5f       	subi	r22, 0xFF	; 255
    3a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa2:	16 c0       	rjmp	.+44     	; 0x3ad0 <__floatsisf+0x6c>
    3aa4:	88 23       	and	r24, r24
    3aa6:	11 f0       	breq	.+4      	; 0x3aac <__floatsisf+0x48>
    3aa8:	96 e9       	ldi	r25, 0x96	; 150
    3aaa:	11 c0       	rjmp	.+34     	; 0x3ace <__floatsisf+0x6a>
    3aac:	77 23       	and	r23, r23
    3aae:	21 f0       	breq	.+8      	; 0x3ab8 <__floatsisf+0x54>
    3ab0:	9e e8       	ldi	r25, 0x8E	; 142
    3ab2:	87 2f       	mov	r24, r23
    3ab4:	76 2f       	mov	r23, r22
    3ab6:	05 c0       	rjmp	.+10     	; 0x3ac2 <__floatsisf+0x5e>
    3ab8:	66 23       	and	r22, r22
    3aba:	71 f0       	breq	.+28     	; 0x3ad8 <__floatsisf+0x74>
    3abc:	96 e8       	ldi	r25, 0x86	; 134
    3abe:	86 2f       	mov	r24, r22
    3ac0:	70 e0       	ldi	r23, 0x00	; 0
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	2a f0       	brmi	.+10     	; 0x3ad0 <__floatsisf+0x6c>
    3ac6:	9a 95       	dec	r25
    3ac8:	66 0f       	add	r22, r22
    3aca:	77 1f       	adc	r23, r23
    3acc:	88 1f       	adc	r24, r24
    3ace:	da f7       	brpl	.-10     	; 0x3ac6 <__floatsisf+0x62>
    3ad0:	88 0f       	add	r24, r24
    3ad2:	96 95       	lsr	r25
    3ad4:	87 95       	ror	r24
    3ad6:	97 f9       	bld	r25, 7
    3ad8:	08 95       	ret

00003ada <__fp_inf>:
    3ada:	97 f9       	bld	r25, 7
    3adc:	9f 67       	ori	r25, 0x7F	; 127
    3ade:	80 e8       	ldi	r24, 0x80	; 128
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	08 95       	ret

00003ae6 <__fp_nan>:
    3ae6:	9f ef       	ldi	r25, 0xFF	; 255
    3ae8:	80 ec       	ldi	r24, 0xC0	; 192
    3aea:	08 95       	ret

00003aec <__fp_pscA>:
    3aec:	00 24       	eor	r0, r0
    3aee:	0a 94       	dec	r0
    3af0:	16 16       	cp	r1, r22
    3af2:	17 06       	cpc	r1, r23
    3af4:	18 06       	cpc	r1, r24
    3af6:	09 06       	cpc	r0, r25
    3af8:	08 95       	ret

00003afa <__fp_pscB>:
    3afa:	00 24       	eor	r0, r0
    3afc:	0a 94       	dec	r0
    3afe:	12 16       	cp	r1, r18
    3b00:	13 06       	cpc	r1, r19
    3b02:	14 06       	cpc	r1, r20
    3b04:	05 06       	cpc	r0, r21
    3b06:	08 95       	ret

00003b08 <__fp_round>:
    3b08:	09 2e       	mov	r0, r25
    3b0a:	03 94       	inc	r0
    3b0c:	00 0c       	add	r0, r0
    3b0e:	11 f4       	brne	.+4      	; 0x3b14 <__fp_round+0xc>
    3b10:	88 23       	and	r24, r24
    3b12:	52 f0       	brmi	.+20     	; 0x3b28 <__fp_round+0x20>
    3b14:	bb 0f       	add	r27, r27
    3b16:	40 f4       	brcc	.+16     	; 0x3b28 <__fp_round+0x20>
    3b18:	bf 2b       	or	r27, r31
    3b1a:	11 f4       	brne	.+4      	; 0x3b20 <__fp_round+0x18>
    3b1c:	60 ff       	sbrs	r22, 0
    3b1e:	04 c0       	rjmp	.+8      	; 0x3b28 <__fp_round+0x20>
    3b20:	6f 5f       	subi	r22, 0xFF	; 255
    3b22:	7f 4f       	sbci	r23, 0xFF	; 255
    3b24:	8f 4f       	sbci	r24, 0xFF	; 255
    3b26:	9f 4f       	sbci	r25, 0xFF	; 255
    3b28:	08 95       	ret

00003b2a <__fp_split3>:
    3b2a:	57 fd       	sbrc	r21, 7
    3b2c:	90 58       	subi	r25, 0x80	; 128
    3b2e:	44 0f       	add	r20, r20
    3b30:	55 1f       	adc	r21, r21
    3b32:	59 f0       	breq	.+22     	; 0x3b4a <__fp_splitA+0x10>
    3b34:	5f 3f       	cpi	r21, 0xFF	; 255
    3b36:	71 f0       	breq	.+28     	; 0x3b54 <__fp_splitA+0x1a>
    3b38:	47 95       	ror	r20

00003b3a <__fp_splitA>:
    3b3a:	88 0f       	add	r24, r24
    3b3c:	97 fb       	bst	r25, 7
    3b3e:	99 1f       	adc	r25, r25
    3b40:	61 f0       	breq	.+24     	; 0x3b5a <__fp_splitA+0x20>
    3b42:	9f 3f       	cpi	r25, 0xFF	; 255
    3b44:	79 f0       	breq	.+30     	; 0x3b64 <__fp_splitA+0x2a>
    3b46:	87 95       	ror	r24
    3b48:	08 95       	ret
    3b4a:	12 16       	cp	r1, r18
    3b4c:	13 06       	cpc	r1, r19
    3b4e:	14 06       	cpc	r1, r20
    3b50:	55 1f       	adc	r21, r21
    3b52:	f2 cf       	rjmp	.-28     	; 0x3b38 <__fp_split3+0xe>
    3b54:	46 95       	lsr	r20
    3b56:	f1 df       	rcall	.-30     	; 0x3b3a <__fp_splitA>
    3b58:	08 c0       	rjmp	.+16     	; 0x3b6a <__fp_splitA+0x30>
    3b5a:	16 16       	cp	r1, r22
    3b5c:	17 06       	cpc	r1, r23
    3b5e:	18 06       	cpc	r1, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	f1 cf       	rjmp	.-30     	; 0x3b46 <__fp_splitA+0xc>
    3b64:	86 95       	lsr	r24
    3b66:	71 05       	cpc	r23, r1
    3b68:	61 05       	cpc	r22, r1
    3b6a:	08 94       	sec
    3b6c:	08 95       	ret

00003b6e <__fp_zero>:
    3b6e:	e8 94       	clt

00003b70 <__fp_szero>:
    3b70:	bb 27       	eor	r27, r27
    3b72:	66 27       	eor	r22, r22
    3b74:	77 27       	eor	r23, r23
    3b76:	cb 01       	movw	r24, r22
    3b78:	97 f9       	bld	r25, 7
    3b7a:	08 95       	ret

00003b7c <__mulsf3>:
    3b7c:	0b d0       	rcall	.+22     	; 0x3b94 <__mulsf3x>
    3b7e:	c4 cf       	rjmp	.-120    	; 0x3b08 <__fp_round>
    3b80:	b5 df       	rcall	.-150    	; 0x3aec <__fp_pscA>
    3b82:	28 f0       	brcs	.+10     	; 0x3b8e <__mulsf3+0x12>
    3b84:	ba df       	rcall	.-140    	; 0x3afa <__fp_pscB>
    3b86:	18 f0       	brcs	.+6      	; 0x3b8e <__mulsf3+0x12>
    3b88:	95 23       	and	r25, r21
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <__mulsf3+0x12>
    3b8c:	a6 cf       	rjmp	.-180    	; 0x3ada <__fp_inf>
    3b8e:	ab cf       	rjmp	.-170    	; 0x3ae6 <__fp_nan>
    3b90:	11 24       	eor	r1, r1
    3b92:	ee cf       	rjmp	.-36     	; 0x3b70 <__fp_szero>

00003b94 <__mulsf3x>:
    3b94:	ca df       	rcall	.-108    	; 0x3b2a <__fp_split3>
    3b96:	a0 f3       	brcs	.-24     	; 0x3b80 <__mulsf3+0x4>

00003b98 <__mulsf3_pse>:
    3b98:	95 9f       	mul	r25, r21
    3b9a:	d1 f3       	breq	.-12     	; 0x3b90 <__mulsf3+0x14>
    3b9c:	95 0f       	add	r25, r21
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	55 1f       	adc	r21, r21
    3ba2:	62 9f       	mul	r22, r18
    3ba4:	f0 01       	movw	r30, r0
    3ba6:	72 9f       	mul	r23, r18
    3ba8:	bb 27       	eor	r27, r27
    3baa:	f0 0d       	add	r31, r0
    3bac:	b1 1d       	adc	r27, r1
    3bae:	63 9f       	mul	r22, r19
    3bb0:	aa 27       	eor	r26, r26
    3bb2:	f0 0d       	add	r31, r0
    3bb4:	b1 1d       	adc	r27, r1
    3bb6:	aa 1f       	adc	r26, r26
    3bb8:	64 9f       	mul	r22, r20
    3bba:	66 27       	eor	r22, r22
    3bbc:	b0 0d       	add	r27, r0
    3bbe:	a1 1d       	adc	r26, r1
    3bc0:	66 1f       	adc	r22, r22
    3bc2:	82 9f       	mul	r24, r18
    3bc4:	22 27       	eor	r18, r18
    3bc6:	b0 0d       	add	r27, r0
    3bc8:	a1 1d       	adc	r26, r1
    3bca:	62 1f       	adc	r22, r18
    3bcc:	73 9f       	mul	r23, r19
    3bce:	b0 0d       	add	r27, r0
    3bd0:	a1 1d       	adc	r26, r1
    3bd2:	62 1f       	adc	r22, r18
    3bd4:	83 9f       	mul	r24, r19
    3bd6:	a0 0d       	add	r26, r0
    3bd8:	61 1d       	adc	r22, r1
    3bda:	22 1f       	adc	r18, r18
    3bdc:	74 9f       	mul	r23, r20
    3bde:	33 27       	eor	r19, r19
    3be0:	a0 0d       	add	r26, r0
    3be2:	61 1d       	adc	r22, r1
    3be4:	23 1f       	adc	r18, r19
    3be6:	84 9f       	mul	r24, r20
    3be8:	60 0d       	add	r22, r0
    3bea:	21 1d       	adc	r18, r1
    3bec:	82 2f       	mov	r24, r18
    3bee:	76 2f       	mov	r23, r22
    3bf0:	6a 2f       	mov	r22, r26
    3bf2:	11 24       	eor	r1, r1
    3bf4:	9f 57       	subi	r25, 0x7F	; 127
    3bf6:	50 40       	sbci	r21, 0x00	; 0
    3bf8:	8a f0       	brmi	.+34     	; 0x3c1c <__mulsf3_pse+0x84>
    3bfa:	e1 f0       	breq	.+56     	; 0x3c34 <__mulsf3_pse+0x9c>
    3bfc:	88 23       	and	r24, r24
    3bfe:	4a f0       	brmi	.+18     	; 0x3c12 <__mulsf3_pse+0x7a>
    3c00:	ee 0f       	add	r30, r30
    3c02:	ff 1f       	adc	r31, r31
    3c04:	bb 1f       	adc	r27, r27
    3c06:	66 1f       	adc	r22, r22
    3c08:	77 1f       	adc	r23, r23
    3c0a:	88 1f       	adc	r24, r24
    3c0c:	91 50       	subi	r25, 0x01	; 1
    3c0e:	50 40       	sbci	r21, 0x00	; 0
    3c10:	a9 f7       	brne	.-22     	; 0x3bfc <__mulsf3_pse+0x64>
    3c12:	9e 3f       	cpi	r25, 0xFE	; 254
    3c14:	51 05       	cpc	r21, r1
    3c16:	70 f0       	brcs	.+28     	; 0x3c34 <__mulsf3_pse+0x9c>
    3c18:	60 cf       	rjmp	.-320    	; 0x3ada <__fp_inf>
    3c1a:	aa cf       	rjmp	.-172    	; 0x3b70 <__fp_szero>
    3c1c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c1e:	ec f3       	brlt	.-6      	; 0x3c1a <__mulsf3_pse+0x82>
    3c20:	98 3e       	cpi	r25, 0xE8	; 232
    3c22:	dc f3       	brlt	.-10     	; 0x3c1a <__mulsf3_pse+0x82>
    3c24:	86 95       	lsr	r24
    3c26:	77 95       	ror	r23
    3c28:	67 95       	ror	r22
    3c2a:	b7 95       	ror	r27
    3c2c:	f7 95       	ror	r31
    3c2e:	e7 95       	ror	r30
    3c30:	9f 5f       	subi	r25, 0xFF	; 255
    3c32:	c1 f7       	brne	.-16     	; 0x3c24 <__mulsf3_pse+0x8c>
    3c34:	fe 2b       	or	r31, r30
    3c36:	88 0f       	add	r24, r24
    3c38:	91 1d       	adc	r25, r1
    3c3a:	96 95       	lsr	r25
    3c3c:	87 95       	ror	r24
    3c3e:	97 f9       	bld	r25, 7
    3c40:	08 95       	ret

00003c42 <pow>:
    3c42:	fa 01       	movw	r30, r20
    3c44:	ee 0f       	add	r30, r30
    3c46:	ff 1f       	adc	r31, r31
    3c48:	30 96       	adiw	r30, 0x00	; 0
    3c4a:	21 05       	cpc	r18, r1
    3c4c:	31 05       	cpc	r19, r1
    3c4e:	99 f1       	breq	.+102    	; 0x3cb6 <pow+0x74>
    3c50:	61 15       	cp	r22, r1
    3c52:	71 05       	cpc	r23, r1
    3c54:	61 f4       	brne	.+24     	; 0x3c6e <pow+0x2c>
    3c56:	80 38       	cpi	r24, 0x80	; 128
    3c58:	bf e3       	ldi	r27, 0x3F	; 63
    3c5a:	9b 07       	cpc	r25, r27
    3c5c:	49 f1       	breq	.+82     	; 0x3cb0 <pow+0x6e>
    3c5e:	68 94       	set
    3c60:	90 38       	cpi	r25, 0x80	; 128
    3c62:	81 05       	cpc	r24, r1
    3c64:	61 f0       	breq	.+24     	; 0x3c7e <pow+0x3c>
    3c66:	80 38       	cpi	r24, 0x80	; 128
    3c68:	bf ef       	ldi	r27, 0xFF	; 255
    3c6a:	9b 07       	cpc	r25, r27
    3c6c:	41 f0       	breq	.+16     	; 0x3c7e <pow+0x3c>
    3c6e:	99 23       	and	r25, r25
    3c70:	42 f5       	brpl	.+80     	; 0x3cc2 <pow+0x80>
    3c72:	ff 3f       	cpi	r31, 0xFF	; 255
    3c74:	e1 05       	cpc	r30, r1
    3c76:	31 05       	cpc	r19, r1
    3c78:	21 05       	cpc	r18, r1
    3c7a:	11 f1       	breq	.+68     	; 0x3cc0 <pow+0x7e>
    3c7c:	e8 94       	clt
    3c7e:	08 94       	sec
    3c80:	e7 95       	ror	r30
    3c82:	d9 01       	movw	r26, r18
    3c84:	aa 23       	and	r26, r26
    3c86:	29 f4       	brne	.+10     	; 0x3c92 <pow+0x50>
    3c88:	ab 2f       	mov	r26, r27
    3c8a:	be 2f       	mov	r27, r30
    3c8c:	f8 5f       	subi	r31, 0xF8	; 248
    3c8e:	d0 f3       	brcs	.-12     	; 0x3c84 <pow+0x42>
    3c90:	10 c0       	rjmp	.+32     	; 0x3cb2 <pow+0x70>
    3c92:	ff 5f       	subi	r31, 0xFF	; 255
    3c94:	70 f4       	brcc	.+28     	; 0x3cb2 <pow+0x70>
    3c96:	a6 95       	lsr	r26
    3c98:	e0 f7       	brcc	.-8      	; 0x3c92 <pow+0x50>
    3c9a:	f7 39       	cpi	r31, 0x97	; 151
    3c9c:	50 f0       	brcs	.+20     	; 0x3cb2 <pow+0x70>
    3c9e:	19 f0       	breq	.+6      	; 0x3ca6 <pow+0x64>
    3ca0:	ff 3a       	cpi	r31, 0xAF	; 175
    3ca2:	38 f4       	brcc	.+14     	; 0x3cb2 <pow+0x70>
    3ca4:	9f 77       	andi	r25, 0x7F	; 127
    3ca6:	9f 93       	push	r25
    3ca8:	0c d0       	rcall	.+24     	; 0x3cc2 <pow+0x80>
    3caa:	0f 90       	pop	r0
    3cac:	07 fc       	sbrc	r0, 7
    3cae:	90 58       	subi	r25, 0x80	; 128
    3cb0:	08 95       	ret
    3cb2:	3e f0       	brts	.+14     	; 0x3cc2 <pow+0x80>
    3cb4:	18 cf       	rjmp	.-464    	; 0x3ae6 <__fp_nan>
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	80 e8       	ldi	r24, 0x80	; 128
    3cbc:	9f e3       	ldi	r25, 0x3F	; 63
    3cbe:	08 95       	ret
    3cc0:	4f e7       	ldi	r20, 0x7F	; 127
    3cc2:	9f 77       	andi	r25, 0x7F	; 127
    3cc4:	5f 93       	push	r21
    3cc6:	4f 93       	push	r20
    3cc8:	3f 93       	push	r19
    3cca:	2f 93       	push	r18
    3ccc:	9e d0       	rcall	.+316    	; 0x3e0a <log>
    3cce:	2f 91       	pop	r18
    3cd0:	3f 91       	pop	r19
    3cd2:	4f 91       	pop	r20
    3cd4:	5f 91       	pop	r21
    3cd6:	52 df       	rcall	.-348    	; 0x3b7c <__mulsf3>
    3cd8:	05 c0       	rjmp	.+10     	; 0x3ce4 <exp>
    3cda:	19 f4       	brne	.+6      	; 0x3ce2 <pow+0xa0>
    3cdc:	0e f0       	brts	.+2      	; 0x3ce0 <pow+0x9e>
    3cde:	fd ce       	rjmp	.-518    	; 0x3ada <__fp_inf>
    3ce0:	46 cf       	rjmp	.-372    	; 0x3b6e <__fp_zero>
    3ce2:	01 cf       	rjmp	.-510    	; 0x3ae6 <__fp_nan>

00003ce4 <exp>:
    3ce4:	2a df       	rcall	.-428    	; 0x3b3a <__fp_splitA>
    3ce6:	c8 f3       	brcs	.-14     	; 0x3cda <pow+0x98>
    3ce8:	96 38       	cpi	r25, 0x86	; 134
    3cea:	c0 f7       	brcc	.-16     	; 0x3cdc <pow+0x9a>
    3cec:	07 f8       	bld	r0, 7
    3cee:	0f 92       	push	r0
    3cf0:	e8 94       	clt
    3cf2:	2b e3       	ldi	r18, 0x3B	; 59
    3cf4:	3a ea       	ldi	r19, 0xAA	; 170
    3cf6:	48 eb       	ldi	r20, 0xB8	; 184
    3cf8:	5f e7       	ldi	r21, 0x7F	; 127
    3cfa:	4e df       	rcall	.-356    	; 0x3b98 <__mulsf3_pse>
    3cfc:	0f 92       	push	r0
    3cfe:	0f 92       	push	r0
    3d00:	0f 92       	push	r0
    3d02:	4d b7       	in	r20, 0x3d	; 61
    3d04:	5e b7       	in	r21, 0x3e	; 62
    3d06:	0f 92       	push	r0
    3d08:	c0 d0       	rcall	.+384    	; 0x3e8a <modf>
    3d0a:	e4 ee       	ldi	r30, 0xE4	; 228
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	16 d0       	rcall	.+44     	; 0x3d3c <__fp_powser>
    3d10:	4f 91       	pop	r20
    3d12:	5f 91       	pop	r21
    3d14:	ef 91       	pop	r30
    3d16:	ff 91       	pop	r31
    3d18:	e5 95       	asr	r30
    3d1a:	ee 1f       	adc	r30, r30
    3d1c:	ff 1f       	adc	r31, r31
    3d1e:	49 f0       	breq	.+18     	; 0x3d32 <exp+0x4e>
    3d20:	fe 57       	subi	r31, 0x7E	; 126
    3d22:	e0 68       	ori	r30, 0x80	; 128
    3d24:	44 27       	eor	r20, r20
    3d26:	ee 0f       	add	r30, r30
    3d28:	44 1f       	adc	r20, r20
    3d2a:	fa 95       	dec	r31
    3d2c:	e1 f7       	brne	.-8      	; 0x3d26 <exp+0x42>
    3d2e:	41 95       	neg	r20
    3d30:	55 0b       	sbc	r21, r21
    3d32:	32 d0       	rcall	.+100    	; 0x3d98 <ldexp>
    3d34:	0f 90       	pop	r0
    3d36:	07 fe       	sbrs	r0, 7
    3d38:	26 c0       	rjmp	.+76     	; 0x3d86 <inverse>
    3d3a:	08 95       	ret

00003d3c <__fp_powser>:
    3d3c:	df 93       	push	r29
    3d3e:	cf 93       	push	r28
    3d40:	1f 93       	push	r17
    3d42:	0f 93       	push	r16
    3d44:	ff 92       	push	r15
    3d46:	ef 92       	push	r14
    3d48:	df 92       	push	r13
    3d4a:	7b 01       	movw	r14, r22
    3d4c:	8c 01       	movw	r16, r24
    3d4e:	68 94       	set
    3d50:	05 c0       	rjmp	.+10     	; 0x3d5c <__fp_powser+0x20>
    3d52:	da 2e       	mov	r13, r26
    3d54:	ef 01       	movw	r28, r30
    3d56:	1e df       	rcall	.-452    	; 0x3b94 <__mulsf3x>
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e8 94       	clt
    3d5c:	a5 91       	lpm	r26, Z+
    3d5e:	25 91       	lpm	r18, Z+
    3d60:	35 91       	lpm	r19, Z+
    3d62:	45 91       	lpm	r20, Z+
    3d64:	55 91       	lpm	r21, Z+
    3d66:	ae f3       	brts	.-22     	; 0x3d52 <__fp_powser+0x16>
    3d68:	ef 01       	movw	r28, r30
    3d6a:	8e dd       	rcall	.-1252   	; 0x3888 <__addsf3x>
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	97 01       	movw	r18, r14
    3d70:	a8 01       	movw	r20, r16
    3d72:	da 94       	dec	r13
    3d74:	79 f7       	brne	.-34     	; 0x3d54 <__fp_powser+0x18>
    3d76:	df 90       	pop	r13
    3d78:	ef 90       	pop	r14
    3d7a:	ff 90       	pop	r15
    3d7c:	0f 91       	pop	r16
    3d7e:	1f 91       	pop	r17
    3d80:	cf 91       	pop	r28
    3d82:	df 91       	pop	r29
    3d84:	08 95       	ret

00003d86 <inverse>:
    3d86:	9b 01       	movw	r18, r22
    3d88:	ac 01       	movw	r20, r24
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	80 e8       	ldi	r24, 0x80	; 128
    3d90:	9f e3       	ldi	r25, 0x3F	; 63
    3d92:	cd cd       	rjmp	.-1126   	; 0x392e <__divsf3>
    3d94:	a2 ce       	rjmp	.-700    	; 0x3ada <__fp_inf>
    3d96:	ac c0       	rjmp	.+344    	; 0x3ef0 <__fp_mpack>

00003d98 <ldexp>:
    3d98:	d0 de       	rcall	.-608    	; 0x3b3a <__fp_splitA>
    3d9a:	e8 f3       	brcs	.-6      	; 0x3d96 <inverse+0x10>
    3d9c:	99 23       	and	r25, r25
    3d9e:	d9 f3       	breq	.-10     	; 0x3d96 <inverse+0x10>
    3da0:	94 0f       	add	r25, r20
    3da2:	51 1d       	adc	r21, r1
    3da4:	bb f3       	brvs	.-18     	; 0x3d94 <inverse+0xe>
    3da6:	91 50       	subi	r25, 0x01	; 1
    3da8:	50 40       	sbci	r21, 0x00	; 0
    3daa:	94 f0       	brlt	.+36     	; 0x3dd0 <ldexp+0x38>
    3dac:	59 f0       	breq	.+22     	; 0x3dc4 <ldexp+0x2c>
    3dae:	88 23       	and	r24, r24
    3db0:	32 f0       	brmi	.+12     	; 0x3dbe <ldexp+0x26>
    3db2:	66 0f       	add	r22, r22
    3db4:	77 1f       	adc	r23, r23
    3db6:	88 1f       	adc	r24, r24
    3db8:	91 50       	subi	r25, 0x01	; 1
    3dba:	50 40       	sbci	r21, 0x00	; 0
    3dbc:	c1 f7       	brne	.-16     	; 0x3dae <ldexp+0x16>
    3dbe:	9e 3f       	cpi	r25, 0xFE	; 254
    3dc0:	51 05       	cpc	r21, r1
    3dc2:	44 f7       	brge	.-48     	; 0x3d94 <inverse+0xe>
    3dc4:	88 0f       	add	r24, r24
    3dc6:	91 1d       	adc	r25, r1
    3dc8:	96 95       	lsr	r25
    3dca:	87 95       	ror	r24
    3dcc:	97 f9       	bld	r25, 7
    3dce:	08 95       	ret
    3dd0:	5f 3f       	cpi	r21, 0xFF	; 255
    3dd2:	ac f0       	brlt	.+42     	; 0x3dfe <ldexp+0x66>
    3dd4:	98 3e       	cpi	r25, 0xE8	; 232
    3dd6:	9c f0       	brlt	.+38     	; 0x3dfe <ldexp+0x66>
    3dd8:	bb 27       	eor	r27, r27
    3dda:	86 95       	lsr	r24
    3ddc:	77 95       	ror	r23
    3dde:	67 95       	ror	r22
    3de0:	b7 95       	ror	r27
    3de2:	08 f4       	brcc	.+2      	; 0x3de6 <ldexp+0x4e>
    3de4:	b1 60       	ori	r27, 0x01	; 1
    3de6:	93 95       	inc	r25
    3de8:	c1 f7       	brne	.-16     	; 0x3dda <ldexp+0x42>
    3dea:	bb 0f       	add	r27, r27
    3dec:	58 f7       	brcc	.-42     	; 0x3dc4 <ldexp+0x2c>
    3dee:	11 f4       	brne	.+4      	; 0x3df4 <ldexp+0x5c>
    3df0:	60 ff       	sbrs	r22, 0
    3df2:	e8 cf       	rjmp	.-48     	; 0x3dc4 <ldexp+0x2c>
    3df4:	6f 5f       	subi	r22, 0xFF	; 255
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfc:	e3 cf       	rjmp	.-58     	; 0x3dc4 <ldexp+0x2c>
    3dfe:	b8 ce       	rjmp	.-656    	; 0x3b70 <__fp_szero>
    3e00:	0e f0       	brts	.+2      	; 0x3e04 <ldexp+0x6c>
    3e02:	76 c0       	rjmp	.+236    	; 0x3ef0 <__fp_mpack>
    3e04:	70 ce       	rjmp	.-800    	; 0x3ae6 <__fp_nan>
    3e06:	68 94       	set
    3e08:	68 ce       	rjmp	.-816    	; 0x3ada <__fp_inf>

00003e0a <log>:
    3e0a:	97 de       	rcall	.-722    	; 0x3b3a <__fp_splitA>
    3e0c:	c8 f3       	brcs	.-14     	; 0x3e00 <ldexp+0x68>
    3e0e:	99 23       	and	r25, r25
    3e10:	d1 f3       	breq	.-12     	; 0x3e06 <ldexp+0x6e>
    3e12:	c6 f3       	brts	.-16     	; 0x3e04 <ldexp+0x6c>
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	1f 93       	push	r17
    3e1a:	0f 93       	push	r16
    3e1c:	ff 92       	push	r15
    3e1e:	c9 2f       	mov	r28, r25
    3e20:	dd 27       	eor	r29, r29
    3e22:	88 23       	and	r24, r24
    3e24:	2a f0       	brmi	.+10     	; 0x3e30 <log+0x26>
    3e26:	21 97       	sbiw	r28, 0x01	; 1
    3e28:	66 0f       	add	r22, r22
    3e2a:	77 1f       	adc	r23, r23
    3e2c:	88 1f       	adc	r24, r24
    3e2e:	da f7       	brpl	.-10     	; 0x3e26 <log+0x1c>
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e8       	ldi	r20, 0x80	; 128
    3e36:	5f eb       	ldi	r21, 0xBF	; 191
    3e38:	9f e3       	ldi	r25, 0x3F	; 63
    3e3a:	88 39       	cpi	r24, 0x98	; 152
    3e3c:	20 f0       	brcs	.+8      	; 0x3e46 <log+0x3c>
    3e3e:	80 3e       	cpi	r24, 0xE0	; 224
    3e40:	30 f0       	brcs	.+12     	; 0x3e4e <log+0x44>
    3e42:	21 96       	adiw	r28, 0x01	; 1
    3e44:	8f 77       	andi	r24, 0x7F	; 127
    3e46:	0f dd       	rcall	.-1506   	; 0x3866 <__addsf3>
    3e48:	ec e0       	ldi	r30, 0x0C	; 12
    3e4a:	f1 e0       	ldi	r31, 0x01	; 1
    3e4c:	03 c0       	rjmp	.+6      	; 0x3e54 <log+0x4a>
    3e4e:	0b dd       	rcall	.-1514   	; 0x3866 <__addsf3>
    3e50:	e9 e3       	ldi	r30, 0x39	; 57
    3e52:	f1 e0       	ldi	r31, 0x01	; 1
    3e54:	73 df       	rcall	.-282    	; 0x3d3c <__fp_powser>
    3e56:	8b 01       	movw	r16, r22
    3e58:	be 01       	movw	r22, r28
    3e5a:	ec 01       	movw	r28, r24
    3e5c:	fb 2e       	mov	r15, r27
    3e5e:	6f 57       	subi	r22, 0x7F	; 127
    3e60:	71 09       	sbc	r23, r1
    3e62:	75 95       	asr	r23
    3e64:	77 1f       	adc	r23, r23
    3e66:	88 0b       	sbc	r24, r24
    3e68:	99 0b       	sbc	r25, r25
    3e6a:	fc dd       	rcall	.-1032   	; 0x3a64 <__floatsisf>
    3e6c:	28 e1       	ldi	r18, 0x18	; 24
    3e6e:	32 e7       	ldi	r19, 0x72	; 114
    3e70:	41 e3       	ldi	r20, 0x31	; 49
    3e72:	5f e3       	ldi	r21, 0x3F	; 63
    3e74:	8f de       	rcall	.-738    	; 0x3b94 <__mulsf3x>
    3e76:	af 2d       	mov	r26, r15
    3e78:	98 01       	movw	r18, r16
    3e7a:	ae 01       	movw	r20, r28
    3e7c:	ff 90       	pop	r15
    3e7e:	0f 91       	pop	r16
    3e80:	1f 91       	pop	r17
    3e82:	cf 91       	pop	r28
    3e84:	df 91       	pop	r29
    3e86:	00 dd       	rcall	.-1536   	; 0x3888 <__addsf3x>
    3e88:	3f ce       	rjmp	.-898    	; 0x3b08 <__fp_round>

00003e8a <modf>:
    3e8a:	fa 01       	movw	r30, r20
    3e8c:	dc 01       	movw	r26, r24
    3e8e:	aa 0f       	add	r26, r26
    3e90:	bb 1f       	adc	r27, r27
    3e92:	9b 01       	movw	r18, r22
    3e94:	ac 01       	movw	r20, r24
    3e96:	bf 57       	subi	r27, 0x7F	; 127
    3e98:	28 f4       	brcc	.+10     	; 0x3ea4 <modf+0x1a>
    3e9a:	22 27       	eor	r18, r18
    3e9c:	33 27       	eor	r19, r19
    3e9e:	44 27       	eor	r20, r20
    3ea0:	50 78       	andi	r21, 0x80	; 128
    3ea2:	1f c0       	rjmp	.+62     	; 0x3ee2 <modf+0x58>
    3ea4:	b7 51       	subi	r27, 0x17	; 23
    3ea6:	88 f4       	brcc	.+34     	; 0x3eca <modf+0x40>
    3ea8:	ab 2f       	mov	r26, r27
    3eaa:	00 24       	eor	r0, r0
    3eac:	46 95       	lsr	r20
    3eae:	37 95       	ror	r19
    3eb0:	27 95       	ror	r18
    3eb2:	01 1c       	adc	r0, r1
    3eb4:	a3 95       	inc	r26
    3eb6:	d2 f3       	brmi	.-12     	; 0x3eac <modf+0x22>
    3eb8:	00 20       	and	r0, r0
    3eba:	69 f0       	breq	.+26     	; 0x3ed6 <modf+0x4c>
    3ebc:	22 0f       	add	r18, r18
    3ebe:	33 1f       	adc	r19, r19
    3ec0:	44 1f       	adc	r20, r20
    3ec2:	b3 95       	inc	r27
    3ec4:	da f3       	brmi	.-10     	; 0x3ebc <modf+0x32>
    3ec6:	0d d0       	rcall	.+26     	; 0x3ee2 <modf+0x58>
    3ec8:	cd cc       	rjmp	.-1638   	; 0x3864 <__subsf3>
    3eca:	61 30       	cpi	r22, 0x01	; 1
    3ecc:	71 05       	cpc	r23, r1
    3ece:	a0 e8       	ldi	r26, 0x80	; 128
    3ed0:	8a 07       	cpc	r24, r26
    3ed2:	b9 46       	sbci	r27, 0x69	; 105
    3ed4:	30 f4       	brcc	.+12     	; 0x3ee2 <modf+0x58>
    3ed6:	9b 01       	movw	r18, r22
    3ed8:	ac 01       	movw	r20, r24
    3eda:	66 27       	eor	r22, r22
    3edc:	77 27       	eor	r23, r23
    3ede:	88 27       	eor	r24, r24
    3ee0:	90 78       	andi	r25, 0x80	; 128
    3ee2:	30 96       	adiw	r30, 0x00	; 0
    3ee4:	21 f0       	breq	.+8      	; 0x3eee <modf+0x64>
    3ee6:	20 83       	st	Z, r18
    3ee8:	31 83       	std	Z+1, r19	; 0x01
    3eea:	42 83       	std	Z+2, r20	; 0x02
    3eec:	53 83       	std	Z+3, r21	; 0x03
    3eee:	08 95       	ret

00003ef0 <__fp_mpack>:
    3ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ef2:	31 f0       	breq	.+12     	; 0x3f00 <__fp_mpack_finite+0xc>

00003ef4 <__fp_mpack_finite>:
    3ef4:	91 50       	subi	r25, 0x01	; 1
    3ef6:	20 f4       	brcc	.+8      	; 0x3f00 <__fp_mpack_finite+0xc>
    3ef8:	87 95       	ror	r24
    3efa:	77 95       	ror	r23
    3efc:	67 95       	ror	r22
    3efe:	b7 95       	ror	r27
    3f00:	88 0f       	add	r24, r24
    3f02:	91 1d       	adc	r25, r1
    3f04:	96 95       	lsr	r25
    3f06:	87 95       	ror	r24
    3f08:	97 f9       	bld	r25, 7
    3f0a:	08 95       	ret

00003f0c <__udivmodhi4>:
    3f0c:	aa 1b       	sub	r26, r26
    3f0e:	bb 1b       	sub	r27, r27
    3f10:	51 e1       	ldi	r21, 0x11	; 17
    3f12:	07 c0       	rjmp	.+14     	; 0x3f22 <__udivmodhi4_ep>

00003f14 <__udivmodhi4_loop>:
    3f14:	aa 1f       	adc	r26, r26
    3f16:	bb 1f       	adc	r27, r27
    3f18:	a6 17       	cp	r26, r22
    3f1a:	b7 07       	cpc	r27, r23
    3f1c:	10 f0       	brcs	.+4      	; 0x3f22 <__udivmodhi4_ep>
    3f1e:	a6 1b       	sub	r26, r22
    3f20:	b7 0b       	sbc	r27, r23

00003f22 <__udivmodhi4_ep>:
    3f22:	88 1f       	adc	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	5a 95       	dec	r21
    3f28:	a9 f7       	brne	.-22     	; 0x3f14 <__udivmodhi4_loop>
    3f2a:	80 95       	com	r24
    3f2c:	90 95       	com	r25
    3f2e:	bc 01       	movw	r22, r24
    3f30:	cd 01       	movw	r24, r26
    3f32:	08 95       	ret

00003f34 <_exit>:
    3f34:	f8 94       	cli

00003f36 <__stop_program>:
    3f36:	ff cf       	rjmp	.-2      	; 0x3f36 <__stop_program>
